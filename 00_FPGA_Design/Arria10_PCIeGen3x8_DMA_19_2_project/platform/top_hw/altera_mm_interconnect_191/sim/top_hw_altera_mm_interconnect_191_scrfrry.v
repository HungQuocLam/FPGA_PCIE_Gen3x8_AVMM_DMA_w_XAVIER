// top_hw_altera_mm_interconnect_191_scrfrry.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module top_hw_altera_mm_interconnect_191_scrfrry (
		input  wire [63:0]  DUT_dma_rd_master_address,                                      //                                        DUT_dma_rd_master.address
		output wire         DUT_dma_rd_master_waitrequest,                                  //                                                         .waitrequest
		input  wire [4:0]   DUT_dma_rd_master_burstcount,                                   //                                                         .burstcount
		input  wire [31:0]  DUT_dma_rd_master_byteenable,                                   //                                                         .byteenable
		input  wire         DUT_dma_rd_master_write,                                        //                                                         .write
		input  wire [255:0] DUT_dma_rd_master_writedata,                                    //                                                         .writedata
		input  wire [63:0]  DUT_dma_wr_master_address,                                      //                                        DUT_dma_wr_master.address
		output wire         DUT_dma_wr_master_waitrequest,                                  //                                                         .waitrequest
		input  wire [4:0]   DUT_dma_wr_master_burstcount,                                   //                                                         .burstcount
		input  wire         DUT_dma_wr_master_read,                                         //                                                         .read
		output wire [255:0] DUT_dma_wr_master_readdata,                                     //                                                         .readdata
		output wire         DUT_dma_wr_master_readdatavalid,                                //                                                         .readdatavalid
		input  wire [63:0]  DUT_rxm_bar2_address,                                           //                                             DUT_rxm_bar2.address
		output wire         DUT_rxm_bar2_waitrequest,                                       //                                                         .waitrequest
		input  wire [3:0]   DUT_rxm_bar2_byteenable,                                        //                                                         .byteenable
		input  wire         DUT_rxm_bar2_read,                                              //                                                         .read
		output wire [31:0]  DUT_rxm_bar2_readdata,                                          //                                                         .readdata
		output wire         DUT_rxm_bar2_readdatavalid,                                     //                                                         .readdatavalid
		input  wire         DUT_rxm_bar2_write,                                             //                                                         .write
		input  wire [31:0]  DUT_rxm_bar2_writedata,                                         //                                                         .writedata
		output wire [21:0]  emif_0_ctrl_amm_0_address,                                      //                                        emif_0_ctrl_amm_0.address
		output wire         emif_0_ctrl_amm_0_write,                                        //                                                         .write
		output wire         emif_0_ctrl_amm_0_read,                                         //                                                         .read
		input  wire [511:0] emif_0_ctrl_amm_0_readdata,                                     //                                                         .readdata
		output wire [511:0] emif_0_ctrl_amm_0_writedata,                                    //                                                         .writedata
		output wire [6:0]   emif_0_ctrl_amm_0_burstcount,                                   //                                                         .burstcount
		output wire [63:0]  emif_0_ctrl_amm_0_byteenable,                                   //                                                         .byteenable
		input  wire         emif_0_ctrl_amm_0_readdatavalid,                                //                                                         .readdatavalid
		input  wire         emif_0_ctrl_amm_0_waitrequest,                                  //                                                         .waitrequest
		output wire [7:0]   DUT_rd_dts_slave_address,                                       //                                         DUT_rd_dts_slave.address
		output wire         DUT_rd_dts_slave_write,                                         //                                                         .write
		output wire [255:0] DUT_rd_dts_slave_writedata,                                     //                                                         .writedata
		output wire [4:0]   DUT_rd_dts_slave_burstcount,                                    //                                                         .burstcount
		input  wire         DUT_rd_dts_slave_waitrequest,                                   //                                                         .waitrequest
		output wire         DUT_rd_dts_slave_chipselect,                                    //                                                         .chipselect
		output wire [10:0]  onchip_memory2_0_s2_address,                                    //                                      onchip_memory2_0_s2.address
		output wire         onchip_memory2_0_s2_write,                                      //                                                         .write
		input  wire [255:0] onchip_memory2_0_s2_readdata,                                   //                                                         .readdata
		output wire [255:0] onchip_memory2_0_s2_writedata,                                  //                                                         .writedata
		output wire [31:0]  onchip_memory2_0_s2_byteenable,                                 //                                                         .byteenable
		output wire         onchip_memory2_0_s2_chipselect,                                 //                                                         .chipselect
		output wire         onchip_memory2_0_s2_clken,                                      //                                                         .clken
		output wire [7:0]   DUT_wr_dts_slave_address,                                       //                                         DUT_wr_dts_slave.address
		output wire         DUT_wr_dts_slave_write,                                         //                                                         .write
		output wire [255:0] DUT_wr_dts_slave_writedata,                                     //                                                         .writedata
		output wire [4:0]   DUT_wr_dts_slave_burstcount,                                    //                                                         .burstcount
		input  wire         DUT_wr_dts_slave_waitrequest,                                   //                                                         .waitrequest
		output wire         DUT_wr_dts_slave_chipselect,                                    //                                                         .chipselect
		output wire [10:0]  onchip_memory2_0_s1_address,                                    //                                      onchip_memory2_0_s1.address
		output wire         onchip_memory2_0_s1_write,                                      //                                                         .write
		input  wire [255:0] onchip_memory2_0_s1_readdata,                                   //                                                         .readdata
		output wire [255:0] onchip_memory2_0_s1_writedata,                                  //                                                         .writedata
		output wire [31:0]  onchip_memory2_0_s1_byteenable,                                 //                                                         .byteenable
		output wire         onchip_memory2_0_s1_chipselect,                                 //                                                         .chipselect
		output wire         onchip_memory2_0_s1_clken,                                      //                                                         .clken
		input  wire         onchip_memory2_0_reset2_reset_bridge_in_reset_reset,            //            onchip_memory2_0_reset2_reset_bridge_in_reset.reset
		input  wire         emif_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset, // emif_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset.reset
		input  wire         DUT_coreclkout_hip_clk,                                         //                                       DUT_coreclkout_hip.clk
		input  wire         emif_0_emif_usr_clk_clk                                         //                                      emif_0_emif_usr_clk.clk
	);

	wire          dut_dma_rd_master_translator_avalon_universal_master_0_waitrequest;         // DUT_dma_rd_master_agent:av_waitrequest -> DUT_dma_rd_master_translator:uav_waitrequest
	wire  [255:0] dut_dma_rd_master_translator_avalon_universal_master_0_readdata;            // DUT_dma_rd_master_agent:av_readdata -> DUT_dma_rd_master_translator:uav_readdata
	wire          dut_dma_rd_master_translator_avalon_universal_master_0_debugaccess;         // DUT_dma_rd_master_translator:uav_debugaccess -> DUT_dma_rd_master_agent:av_debugaccess
	wire   [63:0] dut_dma_rd_master_translator_avalon_universal_master_0_address;             // DUT_dma_rd_master_translator:uav_address -> DUT_dma_rd_master_agent:av_address
	wire          dut_dma_rd_master_translator_avalon_universal_master_0_read;                // DUT_dma_rd_master_translator:uav_read -> DUT_dma_rd_master_agent:av_read
	wire   [31:0] dut_dma_rd_master_translator_avalon_universal_master_0_byteenable;          // DUT_dma_rd_master_translator:uav_byteenable -> DUT_dma_rd_master_agent:av_byteenable
	wire          dut_dma_rd_master_translator_avalon_universal_master_0_readdatavalid;       // DUT_dma_rd_master_agent:av_readdatavalid -> DUT_dma_rd_master_translator:uav_readdatavalid
	wire          dut_dma_rd_master_translator_avalon_universal_master_0_lock;                // DUT_dma_rd_master_translator:uav_lock -> DUT_dma_rd_master_agent:av_lock
	wire          dut_dma_rd_master_translator_avalon_universal_master_0_write;               // DUT_dma_rd_master_translator:uav_write -> DUT_dma_rd_master_agent:av_write
	wire  [255:0] dut_dma_rd_master_translator_avalon_universal_master_0_writedata;           // DUT_dma_rd_master_translator:uav_writedata -> DUT_dma_rd_master_agent:av_writedata
	wire    [9:0] dut_dma_rd_master_translator_avalon_universal_master_0_burstcount;          // DUT_dma_rd_master_translator:uav_burstcount -> DUT_dma_rd_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                          // rsp_mux:src_valid -> DUT_dma_rd_master_agent:rp_valid
	wire  [408:0] rsp_mux_src_data;                                                           // rsp_mux:src_data -> DUT_dma_rd_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                          // DUT_dma_rd_master_agent:rp_ready -> rsp_mux:src_ready
	wire    [4:0] rsp_mux_src_channel;                                                        // rsp_mux:src_channel -> DUT_dma_rd_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                  // rsp_mux:src_startofpacket -> DUT_dma_rd_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                    // rsp_mux:src_endofpacket -> DUT_dma_rd_master_agent:rp_endofpacket
	wire          dut_dma_wr_master_translator_avalon_universal_master_0_waitrequest;         // DUT_dma_wr_master_agent:av_waitrequest -> DUT_dma_wr_master_translator:uav_waitrequest
	wire  [255:0] dut_dma_wr_master_translator_avalon_universal_master_0_readdata;            // DUT_dma_wr_master_agent:av_readdata -> DUT_dma_wr_master_translator:uav_readdata
	wire          dut_dma_wr_master_translator_avalon_universal_master_0_debugaccess;         // DUT_dma_wr_master_translator:uav_debugaccess -> DUT_dma_wr_master_agent:av_debugaccess
	wire   [63:0] dut_dma_wr_master_translator_avalon_universal_master_0_address;             // DUT_dma_wr_master_translator:uav_address -> DUT_dma_wr_master_agent:av_address
	wire          dut_dma_wr_master_translator_avalon_universal_master_0_read;                // DUT_dma_wr_master_translator:uav_read -> DUT_dma_wr_master_agent:av_read
	wire   [31:0] dut_dma_wr_master_translator_avalon_universal_master_0_byteenable;          // DUT_dma_wr_master_translator:uav_byteenable -> DUT_dma_wr_master_agent:av_byteenable
	wire          dut_dma_wr_master_translator_avalon_universal_master_0_readdatavalid;       // DUT_dma_wr_master_agent:av_readdatavalid -> DUT_dma_wr_master_translator:uav_readdatavalid
	wire          dut_dma_wr_master_translator_avalon_universal_master_0_lock;                // DUT_dma_wr_master_translator:uav_lock -> DUT_dma_wr_master_agent:av_lock
	wire          dut_dma_wr_master_translator_avalon_universal_master_0_write;               // DUT_dma_wr_master_translator:uav_write -> DUT_dma_wr_master_agent:av_write
	wire  [255:0] dut_dma_wr_master_translator_avalon_universal_master_0_writedata;           // DUT_dma_wr_master_translator:uav_writedata -> DUT_dma_wr_master_agent:av_writedata
	wire    [9:0] dut_dma_wr_master_translator_avalon_universal_master_0_burstcount;          // DUT_dma_wr_master_translator:uav_burstcount -> DUT_dma_wr_master_agent:av_burstcount
	wire          dut_rxm_bar2_translator_avalon_universal_master_0_waitrequest;              // DUT_rxm_bar2_agent:av_waitrequest -> DUT_rxm_bar2_translator:uav_waitrequest
	wire   [31:0] dut_rxm_bar2_translator_avalon_universal_master_0_readdata;                 // DUT_rxm_bar2_agent:av_readdata -> DUT_rxm_bar2_translator:uav_readdata
	wire          dut_rxm_bar2_translator_avalon_universal_master_0_debugaccess;              // DUT_rxm_bar2_translator:uav_debugaccess -> DUT_rxm_bar2_agent:av_debugaccess
	wire   [63:0] dut_rxm_bar2_translator_avalon_universal_master_0_address;                  // DUT_rxm_bar2_translator:uav_address -> DUT_rxm_bar2_agent:av_address
	wire          dut_rxm_bar2_translator_avalon_universal_master_0_read;                     // DUT_rxm_bar2_translator:uav_read -> DUT_rxm_bar2_agent:av_read
	wire    [3:0] dut_rxm_bar2_translator_avalon_universal_master_0_byteenable;               // DUT_rxm_bar2_translator:uav_byteenable -> DUT_rxm_bar2_agent:av_byteenable
	wire          dut_rxm_bar2_translator_avalon_universal_master_0_readdatavalid;            // DUT_rxm_bar2_agent:av_readdatavalid -> DUT_rxm_bar2_translator:uav_readdatavalid
	wire          dut_rxm_bar2_translator_avalon_universal_master_0_lock;                     // DUT_rxm_bar2_translator:uav_lock -> DUT_rxm_bar2_agent:av_lock
	wire          dut_rxm_bar2_translator_avalon_universal_master_0_write;                    // DUT_rxm_bar2_translator:uav_write -> DUT_rxm_bar2_agent:av_write
	wire   [31:0] dut_rxm_bar2_translator_avalon_universal_master_0_writedata;                // DUT_rxm_bar2_translator:uav_writedata -> DUT_rxm_bar2_agent:av_writedata
	wire    [2:0] dut_rxm_bar2_translator_avalon_universal_master_0_burstcount;               // DUT_rxm_bar2_translator:uav_burstcount -> DUT_rxm_bar2_agent:av_burstcount
	wire  [511:0] emif_0_ctrl_amm_0_agent_m0_readdata;                                        // emif_0_ctrl_amm_0_translator:uav_readdata -> emif_0_ctrl_amm_0_agent:m0_readdata
	wire          emif_0_ctrl_amm_0_agent_m0_waitrequest;                                     // emif_0_ctrl_amm_0_translator:uav_waitrequest -> emif_0_ctrl_amm_0_agent:m0_waitrequest
	wire          emif_0_ctrl_amm_0_agent_m0_debugaccess;                                     // emif_0_ctrl_amm_0_agent:m0_debugaccess -> emif_0_ctrl_amm_0_translator:uav_debugaccess
	wire   [63:0] emif_0_ctrl_amm_0_agent_m0_address;                                         // emif_0_ctrl_amm_0_agent:m0_address -> emif_0_ctrl_amm_0_translator:uav_address
	wire   [63:0] emif_0_ctrl_amm_0_agent_m0_byteenable;                                      // emif_0_ctrl_amm_0_agent:m0_byteenable -> emif_0_ctrl_amm_0_translator:uav_byteenable
	wire          emif_0_ctrl_amm_0_agent_m0_read;                                            // emif_0_ctrl_amm_0_agent:m0_read -> emif_0_ctrl_amm_0_translator:uav_read
	wire          emif_0_ctrl_amm_0_agent_m0_readdatavalid;                                   // emif_0_ctrl_amm_0_translator:uav_readdatavalid -> emif_0_ctrl_amm_0_agent:m0_readdatavalid
	wire          emif_0_ctrl_amm_0_agent_m0_lock;                                            // emif_0_ctrl_amm_0_agent:m0_lock -> emif_0_ctrl_amm_0_translator:uav_lock
	wire  [511:0] emif_0_ctrl_amm_0_agent_m0_writedata;                                       // emif_0_ctrl_amm_0_agent:m0_writedata -> emif_0_ctrl_amm_0_translator:uav_writedata
	wire          emif_0_ctrl_amm_0_agent_m0_write;                                           // emif_0_ctrl_amm_0_agent:m0_write -> emif_0_ctrl_amm_0_translator:uav_write
	wire   [12:0] emif_0_ctrl_amm_0_agent_m0_burstcount;                                      // emif_0_ctrl_amm_0_agent:m0_burstcount -> emif_0_ctrl_amm_0_translator:uav_burstcount
	wire          emif_0_ctrl_amm_0_agent_rf_source_valid;                                    // emif_0_ctrl_amm_0_agent:rf_source_valid -> emif_0_ctrl_amm_0_agent_rsp_fifo:in_valid
	wire  [697:0] emif_0_ctrl_amm_0_agent_rf_source_data;                                     // emif_0_ctrl_amm_0_agent:rf_source_data -> emif_0_ctrl_amm_0_agent_rsp_fifo:in_data
	wire          emif_0_ctrl_amm_0_agent_rf_source_ready;                                    // emif_0_ctrl_amm_0_agent_rsp_fifo:in_ready -> emif_0_ctrl_amm_0_agent:rf_source_ready
	wire          emif_0_ctrl_amm_0_agent_rf_source_startofpacket;                            // emif_0_ctrl_amm_0_agent:rf_source_startofpacket -> emif_0_ctrl_amm_0_agent_rsp_fifo:in_startofpacket
	wire          emif_0_ctrl_amm_0_agent_rf_source_endofpacket;                              // emif_0_ctrl_amm_0_agent:rf_source_endofpacket -> emif_0_ctrl_amm_0_agent_rsp_fifo:in_endofpacket
	wire          emif_0_ctrl_amm_0_agent_rsp_fifo_out_valid;                                 // emif_0_ctrl_amm_0_agent_rsp_fifo:out_valid -> emif_0_ctrl_amm_0_agent:rf_sink_valid
	wire  [697:0] emif_0_ctrl_amm_0_agent_rsp_fifo_out_data;                                  // emif_0_ctrl_amm_0_agent_rsp_fifo:out_data -> emif_0_ctrl_amm_0_agent:rf_sink_data
	wire          emif_0_ctrl_amm_0_agent_rsp_fifo_out_ready;                                 // emif_0_ctrl_amm_0_agent:rf_sink_ready -> emif_0_ctrl_amm_0_agent_rsp_fifo:out_ready
	wire          emif_0_ctrl_amm_0_agent_rsp_fifo_out_startofpacket;                         // emif_0_ctrl_amm_0_agent_rsp_fifo:out_startofpacket -> emif_0_ctrl_amm_0_agent:rf_sink_startofpacket
	wire          emif_0_ctrl_amm_0_agent_rsp_fifo_out_endofpacket;                           // emif_0_ctrl_amm_0_agent_rsp_fifo:out_endofpacket -> emif_0_ctrl_amm_0_agent:rf_sink_endofpacket
	wire          emif_0_ctrl_amm_0_agent_rdata_fifo_src_valid;                               // emif_0_ctrl_amm_0_agent:rdata_fifo_src_valid -> emif_0_ctrl_amm_0_agent_rdata_fifo:in_valid
	wire  [513:0] emif_0_ctrl_amm_0_agent_rdata_fifo_src_data;                                // emif_0_ctrl_amm_0_agent:rdata_fifo_src_data -> emif_0_ctrl_amm_0_agent_rdata_fifo:in_data
	wire          emif_0_ctrl_amm_0_agent_rdata_fifo_src_ready;                               // emif_0_ctrl_amm_0_agent_rdata_fifo:in_ready -> emif_0_ctrl_amm_0_agent:rdata_fifo_src_ready
	wire          emif_0_ctrl_amm_0_agent_rdata_fifo_out_valid;                               // emif_0_ctrl_amm_0_agent_rdata_fifo:out_valid -> emif_0_ctrl_amm_0_agent:rdata_fifo_sink_valid
	wire  [513:0] emif_0_ctrl_amm_0_agent_rdata_fifo_out_data;                                // emif_0_ctrl_amm_0_agent_rdata_fifo:out_data -> emif_0_ctrl_amm_0_agent:rdata_fifo_sink_data
	wire          emif_0_ctrl_amm_0_agent_rdata_fifo_out_ready;                               // emif_0_ctrl_amm_0_agent:rdata_fifo_sink_ready -> emif_0_ctrl_amm_0_agent_rdata_fifo:out_ready
	wire  [255:0] dut_rd_dts_slave_agent_m0_readdata;                                         // DUT_rd_dts_slave_translator:uav_readdata -> DUT_rd_dts_slave_agent:m0_readdata
	wire          dut_rd_dts_slave_agent_m0_waitrequest;                                      // DUT_rd_dts_slave_translator:uav_waitrequest -> DUT_rd_dts_slave_agent:m0_waitrequest
	wire          dut_rd_dts_slave_agent_m0_debugaccess;                                      // DUT_rd_dts_slave_agent:m0_debugaccess -> DUT_rd_dts_slave_translator:uav_debugaccess
	wire   [63:0] dut_rd_dts_slave_agent_m0_address;                                          // DUT_rd_dts_slave_agent:m0_address -> DUT_rd_dts_slave_translator:uav_address
	wire   [31:0] dut_rd_dts_slave_agent_m0_byteenable;                                       // DUT_rd_dts_slave_agent:m0_byteenable -> DUT_rd_dts_slave_translator:uav_byteenable
	wire          dut_rd_dts_slave_agent_m0_read;                                             // DUT_rd_dts_slave_agent:m0_read -> DUT_rd_dts_slave_translator:uav_read
	wire          dut_rd_dts_slave_agent_m0_readdatavalid;                                    // DUT_rd_dts_slave_translator:uav_readdatavalid -> DUT_rd_dts_slave_agent:m0_readdatavalid
	wire          dut_rd_dts_slave_agent_m0_lock;                                             // DUT_rd_dts_slave_agent:m0_lock -> DUT_rd_dts_slave_translator:uav_lock
	wire  [255:0] dut_rd_dts_slave_agent_m0_writedata;                                        // DUT_rd_dts_slave_agent:m0_writedata -> DUT_rd_dts_slave_translator:uav_writedata
	wire          dut_rd_dts_slave_agent_m0_write;                                            // DUT_rd_dts_slave_agent:m0_write -> DUT_rd_dts_slave_translator:uav_write
	wire    [9:0] dut_rd_dts_slave_agent_m0_burstcount;                                       // DUT_rd_dts_slave_agent:m0_burstcount -> DUT_rd_dts_slave_translator:uav_burstcount
	wire          dut_rd_dts_slave_agent_rf_source_valid;                                     // DUT_rd_dts_slave_agent:rf_source_valid -> DUT_rd_dts_slave_agent_rsp_fifo:in_valid
	wire  [409:0] dut_rd_dts_slave_agent_rf_source_data;                                      // DUT_rd_dts_slave_agent:rf_source_data -> DUT_rd_dts_slave_agent_rsp_fifo:in_data
	wire          dut_rd_dts_slave_agent_rf_source_ready;                                     // DUT_rd_dts_slave_agent_rsp_fifo:in_ready -> DUT_rd_dts_slave_agent:rf_source_ready
	wire          dut_rd_dts_slave_agent_rf_source_startofpacket;                             // DUT_rd_dts_slave_agent:rf_source_startofpacket -> DUT_rd_dts_slave_agent_rsp_fifo:in_startofpacket
	wire          dut_rd_dts_slave_agent_rf_source_endofpacket;                               // DUT_rd_dts_slave_agent:rf_source_endofpacket -> DUT_rd_dts_slave_agent_rsp_fifo:in_endofpacket
	wire          dut_rd_dts_slave_agent_rsp_fifo_out_valid;                                  // DUT_rd_dts_slave_agent_rsp_fifo:out_valid -> DUT_rd_dts_slave_agent:rf_sink_valid
	wire  [409:0] dut_rd_dts_slave_agent_rsp_fifo_out_data;                                   // DUT_rd_dts_slave_agent_rsp_fifo:out_data -> DUT_rd_dts_slave_agent:rf_sink_data
	wire          dut_rd_dts_slave_agent_rsp_fifo_out_ready;                                  // DUT_rd_dts_slave_agent:rf_sink_ready -> DUT_rd_dts_slave_agent_rsp_fifo:out_ready
	wire          dut_rd_dts_slave_agent_rsp_fifo_out_startofpacket;                          // DUT_rd_dts_slave_agent_rsp_fifo:out_startofpacket -> DUT_rd_dts_slave_agent:rf_sink_startofpacket
	wire          dut_rd_dts_slave_agent_rsp_fifo_out_endofpacket;                            // DUT_rd_dts_slave_agent_rsp_fifo:out_endofpacket -> DUT_rd_dts_slave_agent:rf_sink_endofpacket
	wire          dut_rd_dts_slave_agent_rdata_fifo_src_valid;                                // DUT_rd_dts_slave_agent:rdata_fifo_src_valid -> DUT_rd_dts_slave_agent:rdata_fifo_sink_valid
	wire  [257:0] dut_rd_dts_slave_agent_rdata_fifo_src_data;                                 // DUT_rd_dts_slave_agent:rdata_fifo_src_data -> DUT_rd_dts_slave_agent:rdata_fifo_sink_data
	wire          dut_rd_dts_slave_agent_rdata_fifo_src_ready;                                // DUT_rd_dts_slave_agent:rdata_fifo_sink_ready -> DUT_rd_dts_slave_agent:rdata_fifo_src_ready
	wire  [255:0] onchip_memory2_0_s2_agent_m0_readdata;                                      // onchip_memory2_0_s2_translator:uav_readdata -> onchip_memory2_0_s2_agent:m0_readdata
	wire          onchip_memory2_0_s2_agent_m0_waitrequest;                                   // onchip_memory2_0_s2_translator:uav_waitrequest -> onchip_memory2_0_s2_agent:m0_waitrequest
	wire          onchip_memory2_0_s2_agent_m0_debugaccess;                                   // onchip_memory2_0_s2_agent:m0_debugaccess -> onchip_memory2_0_s2_translator:uav_debugaccess
	wire   [63:0] onchip_memory2_0_s2_agent_m0_address;                                       // onchip_memory2_0_s2_agent:m0_address -> onchip_memory2_0_s2_translator:uav_address
	wire   [31:0] onchip_memory2_0_s2_agent_m0_byteenable;                                    // onchip_memory2_0_s2_agent:m0_byteenable -> onchip_memory2_0_s2_translator:uav_byteenable
	wire          onchip_memory2_0_s2_agent_m0_read;                                          // onchip_memory2_0_s2_agent:m0_read -> onchip_memory2_0_s2_translator:uav_read
	wire          onchip_memory2_0_s2_agent_m0_readdatavalid;                                 // onchip_memory2_0_s2_translator:uav_readdatavalid -> onchip_memory2_0_s2_agent:m0_readdatavalid
	wire          onchip_memory2_0_s2_agent_m0_lock;                                          // onchip_memory2_0_s2_agent:m0_lock -> onchip_memory2_0_s2_translator:uav_lock
	wire  [255:0] onchip_memory2_0_s2_agent_m0_writedata;                                     // onchip_memory2_0_s2_agent:m0_writedata -> onchip_memory2_0_s2_translator:uav_writedata
	wire          onchip_memory2_0_s2_agent_m0_write;                                         // onchip_memory2_0_s2_agent:m0_write -> onchip_memory2_0_s2_translator:uav_write
	wire    [5:0] onchip_memory2_0_s2_agent_m0_burstcount;                                    // onchip_memory2_0_s2_agent:m0_burstcount -> onchip_memory2_0_s2_translator:uav_burstcount
	wire          onchip_memory2_0_s2_agent_rf_source_valid;                                  // onchip_memory2_0_s2_agent:rf_source_valid -> onchip_memory2_0_s2_agent_rsp_fifo:in_valid
	wire  [409:0] onchip_memory2_0_s2_agent_rf_source_data;                                   // onchip_memory2_0_s2_agent:rf_source_data -> onchip_memory2_0_s2_agent_rsp_fifo:in_data
	wire          onchip_memory2_0_s2_agent_rf_source_ready;                                  // onchip_memory2_0_s2_agent_rsp_fifo:in_ready -> onchip_memory2_0_s2_agent:rf_source_ready
	wire          onchip_memory2_0_s2_agent_rf_source_startofpacket;                          // onchip_memory2_0_s2_agent:rf_source_startofpacket -> onchip_memory2_0_s2_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_0_s2_agent_rf_source_endofpacket;                            // onchip_memory2_0_s2_agent:rf_source_endofpacket -> onchip_memory2_0_s2_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_0_s2_agent_rsp_fifo_out_valid;                               // onchip_memory2_0_s2_agent_rsp_fifo:out_valid -> onchip_memory2_0_s2_agent:rf_sink_valid
	wire  [409:0] onchip_memory2_0_s2_agent_rsp_fifo_out_data;                                // onchip_memory2_0_s2_agent_rsp_fifo:out_data -> onchip_memory2_0_s2_agent:rf_sink_data
	wire          onchip_memory2_0_s2_agent_rsp_fifo_out_ready;                               // onchip_memory2_0_s2_agent:rf_sink_ready -> onchip_memory2_0_s2_agent_rsp_fifo:out_ready
	wire          onchip_memory2_0_s2_agent_rsp_fifo_out_startofpacket;                       // onchip_memory2_0_s2_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s2_agent:rf_sink_startofpacket
	wire          onchip_memory2_0_s2_agent_rsp_fifo_out_endofpacket;                         // onchip_memory2_0_s2_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s2_agent:rf_sink_endofpacket
	wire          onchip_memory2_0_s2_agent_rdata_fifo_src_valid;                             // onchip_memory2_0_s2_agent:rdata_fifo_src_valid -> onchip_memory2_0_s2_agent:rdata_fifo_sink_valid
	wire  [257:0] onchip_memory2_0_s2_agent_rdata_fifo_src_data;                              // onchip_memory2_0_s2_agent:rdata_fifo_src_data -> onchip_memory2_0_s2_agent:rdata_fifo_sink_data
	wire          onchip_memory2_0_s2_agent_rdata_fifo_src_ready;                             // onchip_memory2_0_s2_agent:rdata_fifo_sink_ready -> onchip_memory2_0_s2_agent:rdata_fifo_src_ready
	wire  [255:0] dut_wr_dts_slave_agent_m0_readdata;                                         // DUT_wr_dts_slave_translator:uav_readdata -> DUT_wr_dts_slave_agent:m0_readdata
	wire          dut_wr_dts_slave_agent_m0_waitrequest;                                      // DUT_wr_dts_slave_translator:uav_waitrequest -> DUT_wr_dts_slave_agent:m0_waitrequest
	wire          dut_wr_dts_slave_agent_m0_debugaccess;                                      // DUT_wr_dts_slave_agent:m0_debugaccess -> DUT_wr_dts_slave_translator:uav_debugaccess
	wire   [63:0] dut_wr_dts_slave_agent_m0_address;                                          // DUT_wr_dts_slave_agent:m0_address -> DUT_wr_dts_slave_translator:uav_address
	wire   [31:0] dut_wr_dts_slave_agent_m0_byteenable;                                       // DUT_wr_dts_slave_agent:m0_byteenable -> DUT_wr_dts_slave_translator:uav_byteenable
	wire          dut_wr_dts_slave_agent_m0_read;                                             // DUT_wr_dts_slave_agent:m0_read -> DUT_wr_dts_slave_translator:uav_read
	wire          dut_wr_dts_slave_agent_m0_readdatavalid;                                    // DUT_wr_dts_slave_translator:uav_readdatavalid -> DUT_wr_dts_slave_agent:m0_readdatavalid
	wire          dut_wr_dts_slave_agent_m0_lock;                                             // DUT_wr_dts_slave_agent:m0_lock -> DUT_wr_dts_slave_translator:uav_lock
	wire  [255:0] dut_wr_dts_slave_agent_m0_writedata;                                        // DUT_wr_dts_slave_agent:m0_writedata -> DUT_wr_dts_slave_translator:uav_writedata
	wire          dut_wr_dts_slave_agent_m0_write;                                            // DUT_wr_dts_slave_agent:m0_write -> DUT_wr_dts_slave_translator:uav_write
	wire    [9:0] dut_wr_dts_slave_agent_m0_burstcount;                                       // DUT_wr_dts_slave_agent:m0_burstcount -> DUT_wr_dts_slave_translator:uav_burstcount
	wire          dut_wr_dts_slave_agent_rf_source_valid;                                     // DUT_wr_dts_slave_agent:rf_source_valid -> DUT_wr_dts_slave_agent_rsp_fifo:in_valid
	wire  [409:0] dut_wr_dts_slave_agent_rf_source_data;                                      // DUT_wr_dts_slave_agent:rf_source_data -> DUT_wr_dts_slave_agent_rsp_fifo:in_data
	wire          dut_wr_dts_slave_agent_rf_source_ready;                                     // DUT_wr_dts_slave_agent_rsp_fifo:in_ready -> DUT_wr_dts_slave_agent:rf_source_ready
	wire          dut_wr_dts_slave_agent_rf_source_startofpacket;                             // DUT_wr_dts_slave_agent:rf_source_startofpacket -> DUT_wr_dts_slave_agent_rsp_fifo:in_startofpacket
	wire          dut_wr_dts_slave_agent_rf_source_endofpacket;                               // DUT_wr_dts_slave_agent:rf_source_endofpacket -> DUT_wr_dts_slave_agent_rsp_fifo:in_endofpacket
	wire          dut_wr_dts_slave_agent_rsp_fifo_out_valid;                                  // DUT_wr_dts_slave_agent_rsp_fifo:out_valid -> DUT_wr_dts_slave_agent:rf_sink_valid
	wire  [409:0] dut_wr_dts_slave_agent_rsp_fifo_out_data;                                   // DUT_wr_dts_slave_agent_rsp_fifo:out_data -> DUT_wr_dts_slave_agent:rf_sink_data
	wire          dut_wr_dts_slave_agent_rsp_fifo_out_ready;                                  // DUT_wr_dts_slave_agent:rf_sink_ready -> DUT_wr_dts_slave_agent_rsp_fifo:out_ready
	wire          dut_wr_dts_slave_agent_rsp_fifo_out_startofpacket;                          // DUT_wr_dts_slave_agent_rsp_fifo:out_startofpacket -> DUT_wr_dts_slave_agent:rf_sink_startofpacket
	wire          dut_wr_dts_slave_agent_rsp_fifo_out_endofpacket;                            // DUT_wr_dts_slave_agent_rsp_fifo:out_endofpacket -> DUT_wr_dts_slave_agent:rf_sink_endofpacket
	wire          dut_wr_dts_slave_agent_rdata_fifo_src_valid;                                // DUT_wr_dts_slave_agent:rdata_fifo_src_valid -> DUT_wr_dts_slave_agent:rdata_fifo_sink_valid
	wire  [257:0] dut_wr_dts_slave_agent_rdata_fifo_src_data;                                 // DUT_wr_dts_slave_agent:rdata_fifo_src_data -> DUT_wr_dts_slave_agent:rdata_fifo_sink_data
	wire          dut_wr_dts_slave_agent_rdata_fifo_src_ready;                                // DUT_wr_dts_slave_agent:rdata_fifo_sink_ready -> DUT_wr_dts_slave_agent:rdata_fifo_src_ready
	wire  [255:0] onchip_memory2_0_s1_agent_m0_readdata;                                      // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	wire          onchip_memory2_0_s1_agent_m0_waitrequest;                                   // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	wire          onchip_memory2_0_s1_agent_m0_debugaccess;                                   // onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire   [63:0] onchip_memory2_0_s1_agent_m0_address;                                       // onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire   [31:0] onchip_memory2_0_s1_agent_m0_byteenable;                                    // onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire          onchip_memory2_0_s1_agent_m0_read;                                          // onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire          onchip_memory2_0_s1_agent_m0_readdatavalid;                                 // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	wire          onchip_memory2_0_s1_agent_m0_lock;                                          // onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire  [255:0] onchip_memory2_0_s1_agent_m0_writedata;                                     // onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire          onchip_memory2_0_s1_agent_m0_write;                                         // onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire    [5:0] onchip_memory2_0_s1_agent_m0_burstcount;                                    // onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire          onchip_memory2_0_s1_agent_rf_source_valid;                                  // onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	wire  [409:0] onchip_memory2_0_s1_agent_rf_source_data;                                   // onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rf_source_ready;                                  // onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	wire          onchip_memory2_0_s1_agent_rf_source_startofpacket;                          // onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_0_s1_agent_rf_source_endofpacket;                            // onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_valid;                               // onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	wire  [409:0] onchip_memory2_0_s1_agent_rsp_fifo_out_data;                                // onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_ready;                               // onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket;                       // onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket;                         // onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_valid;                             // onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	wire  [257:0] onchip_memory2_0_s1_agent_rdata_fifo_src_data;                              // onchip_memory2_0_s1_agent:rdata_fifo_src_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_ready;                             // onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	wire          dut_dma_rd_master_agent_cp_valid;                                           // DUT_dma_rd_master_agent:cp_valid -> router:sink_valid
	wire  [408:0] dut_dma_rd_master_agent_cp_data;                                            // DUT_dma_rd_master_agent:cp_data -> router:sink_data
	wire          dut_dma_rd_master_agent_cp_ready;                                           // router:sink_ready -> DUT_dma_rd_master_agent:cp_ready
	wire          dut_dma_rd_master_agent_cp_startofpacket;                                   // DUT_dma_rd_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          dut_dma_rd_master_agent_cp_endofpacket;                                     // DUT_dma_rd_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                           // router:src_valid -> cmd_demux:sink_valid
	wire  [408:0] router_src_data;                                                            // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                           // cmd_demux:sink_ready -> router:src_ready
	wire    [4:0] router_src_channel;                                                         // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                   // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                     // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          dut_dma_wr_master_agent_cp_valid;                                           // DUT_dma_wr_master_agent:cp_valid -> router_001:sink_valid
	wire  [408:0] dut_dma_wr_master_agent_cp_data;                                            // DUT_dma_wr_master_agent:cp_data -> router_001:sink_data
	wire          dut_dma_wr_master_agent_cp_ready;                                           // router_001:sink_ready -> DUT_dma_wr_master_agent:cp_ready
	wire          dut_dma_wr_master_agent_cp_startofpacket;                                   // DUT_dma_wr_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          dut_dma_wr_master_agent_cp_endofpacket;                                     // DUT_dma_wr_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          dut_rxm_bar2_agent_cp_valid;                                                // DUT_rxm_bar2_agent:cp_valid -> router_002:sink_valid
	wire  [156:0] dut_rxm_bar2_agent_cp_data;                                                 // DUT_rxm_bar2_agent:cp_data -> router_002:sink_data
	wire          dut_rxm_bar2_agent_cp_ready;                                                // router_002:sink_ready -> DUT_rxm_bar2_agent:cp_ready
	wire          dut_rxm_bar2_agent_cp_startofpacket;                                        // DUT_rxm_bar2_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          dut_rxm_bar2_agent_cp_endofpacket;                                          // DUT_rxm_bar2_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_003_src_valid;                                                       // router_003:src_valid -> rsp_demux:sink_valid
	wire  [696:0] router_003_src_data;                                                        // router_003:src_data -> rsp_demux:sink_data
	wire          router_003_src_ready;                                                       // rsp_demux:sink_ready -> router_003:src_ready
	wire    [4:0] router_003_src_channel;                                                     // router_003:src_channel -> rsp_demux:sink_channel
	wire          router_003_src_startofpacket;                                               // router_003:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_003_src_endofpacket;                                                 // router_003:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_004_src_valid;                                                       // router_004:src_valid -> rsp_demux_001:sink_valid
	wire  [408:0] router_004_src_data;                                                        // router_004:src_data -> rsp_demux_001:sink_data
	wire          router_004_src_ready;                                                       // rsp_demux_001:sink_ready -> router_004:src_ready
	wire    [4:0] router_004_src_channel;                                                     // router_004:src_channel -> rsp_demux_001:sink_channel
	wire          router_004_src_startofpacket;                                               // router_004:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_004_src_endofpacket;                                                 // router_004:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_005_src_valid;                                                       // router_005:src_valid -> rsp_demux_002:sink_valid
	wire  [408:0] router_005_src_data;                                                        // router_005:src_data -> rsp_demux_002:sink_data
	wire          router_005_src_ready;                                                       // rsp_demux_002:sink_ready -> router_005:src_ready
	wire    [4:0] router_005_src_channel;                                                     // router_005:src_channel -> rsp_demux_002:sink_channel
	wire          router_005_src_startofpacket;                                               // router_005:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_005_src_endofpacket;                                                 // router_005:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_006_src_valid;                                                       // router_006:src_valid -> rsp_demux_003:sink_valid
	wire  [408:0] router_006_src_data;                                                        // router_006:src_data -> rsp_demux_003:sink_data
	wire          router_006_src_ready;                                                       // rsp_demux_003:sink_ready -> router_006:src_ready
	wire    [4:0] router_006_src_channel;                                                     // router_006:src_channel -> rsp_demux_003:sink_channel
	wire          router_006_src_startofpacket;                                               // router_006:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_006_src_endofpacket;                                                 // router_006:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_007_src_valid;                                                       // router_007:src_valid -> rsp_demux_004:sink_valid
	wire  [408:0] router_007_src_data;                                                        // router_007:src_data -> rsp_demux_004:sink_data
	wire          router_007_src_ready;                                                       // rsp_demux_004:sink_ready -> router_007:src_ready
	wire    [4:0] router_007_src_channel;                                                     // router_007:src_channel -> rsp_demux_004:sink_channel
	wire          router_007_src_startofpacket;                                               // router_007:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_007_src_endofpacket;                                                 // router_007:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_001_src_valid;                                                       // router_001:src_valid -> DUT_dma_wr_master_limiter:cmd_sink_valid
	wire  [408:0] router_001_src_data;                                                        // router_001:src_data -> DUT_dma_wr_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                       // DUT_dma_wr_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [4:0] router_001_src_channel;                                                     // router_001:src_channel -> DUT_dma_wr_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                               // router_001:src_startofpacket -> DUT_dma_wr_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                 // router_001:src_endofpacket -> DUT_dma_wr_master_limiter:cmd_sink_endofpacket
	wire          dut_dma_wr_master_limiter_rsp_src_valid;                                    // DUT_dma_wr_master_limiter:rsp_src_valid -> DUT_dma_wr_master_agent:rp_valid
	wire  [408:0] dut_dma_wr_master_limiter_rsp_src_data;                                     // DUT_dma_wr_master_limiter:rsp_src_data -> DUT_dma_wr_master_agent:rp_data
	wire          dut_dma_wr_master_limiter_rsp_src_ready;                                    // DUT_dma_wr_master_agent:rp_ready -> DUT_dma_wr_master_limiter:rsp_src_ready
	wire    [4:0] dut_dma_wr_master_limiter_rsp_src_channel;                                  // DUT_dma_wr_master_limiter:rsp_src_channel -> DUT_dma_wr_master_agent:rp_channel
	wire          dut_dma_wr_master_limiter_rsp_src_startofpacket;                            // DUT_dma_wr_master_limiter:rsp_src_startofpacket -> DUT_dma_wr_master_agent:rp_startofpacket
	wire          dut_dma_wr_master_limiter_rsp_src_endofpacket;                              // DUT_dma_wr_master_limiter:rsp_src_endofpacket -> DUT_dma_wr_master_agent:rp_endofpacket
	wire          router_002_src_valid;                                                       // router_002:src_valid -> DUT_rxm_bar2_limiter:cmd_sink_valid
	wire  [156:0] router_002_src_data;                                                        // router_002:src_data -> DUT_rxm_bar2_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                       // DUT_rxm_bar2_limiter:cmd_sink_ready -> router_002:src_ready
	wire    [4:0] router_002_src_channel;                                                     // router_002:src_channel -> DUT_rxm_bar2_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                               // router_002:src_startofpacket -> DUT_rxm_bar2_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                 // router_002:src_endofpacket -> DUT_rxm_bar2_limiter:cmd_sink_endofpacket
	wire          dut_rxm_bar2_limiter_rsp_src_valid;                                         // DUT_rxm_bar2_limiter:rsp_src_valid -> DUT_rxm_bar2_agent:rp_valid
	wire  [156:0] dut_rxm_bar2_limiter_rsp_src_data;                                          // DUT_rxm_bar2_limiter:rsp_src_data -> DUT_rxm_bar2_agent:rp_data
	wire          dut_rxm_bar2_limiter_rsp_src_ready;                                         // DUT_rxm_bar2_agent:rp_ready -> DUT_rxm_bar2_limiter:rsp_src_ready
	wire    [4:0] dut_rxm_bar2_limiter_rsp_src_channel;                                       // DUT_rxm_bar2_limiter:rsp_src_channel -> DUT_rxm_bar2_agent:rp_channel
	wire          dut_rxm_bar2_limiter_rsp_src_startofpacket;                                 // DUT_rxm_bar2_limiter:rsp_src_startofpacket -> DUT_rxm_bar2_agent:rp_startofpacket
	wire          dut_rxm_bar2_limiter_rsp_src_endofpacket;                                   // DUT_rxm_bar2_limiter:rsp_src_endofpacket -> DUT_rxm_bar2_agent:rp_endofpacket
	wire          cmd_mux_002_src_valid;                                                      // cmd_mux_002:src_valid -> onchip_memory2_0_s2_burst_adapter:sink0_valid
	wire  [408:0] cmd_mux_002_src_data;                                                       // cmd_mux_002:src_data -> onchip_memory2_0_s2_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                      // onchip_memory2_0_s2_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [4:0] cmd_mux_002_src_channel;                                                    // cmd_mux_002:src_channel -> onchip_memory2_0_s2_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                              // cmd_mux_002:src_startofpacket -> onchip_memory2_0_s2_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                // cmd_mux_002:src_endofpacket -> onchip_memory2_0_s2_burst_adapter:sink0_endofpacket
	wire          cmd_mux_004_src_valid;                                                      // cmd_mux_004:src_valid -> onchip_memory2_0_s1_burst_adapter:sink0_valid
	wire  [408:0] cmd_mux_004_src_data;                                                       // cmd_mux_004:src_data -> onchip_memory2_0_s1_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                      // onchip_memory2_0_s1_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire    [4:0] cmd_mux_004_src_channel;                                                    // cmd_mux_004:src_channel -> onchip_memory2_0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                              // cmd_mux_004:src_startofpacket -> onchip_memory2_0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                // cmd_mux_004:src_endofpacket -> onchip_memory2_0_s1_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                                       // cmd_demux:src0_valid -> DUT_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter:in_valid
	wire  [408:0] cmd_demux_src0_data;                                                        // cmd_demux:src0_data -> DUT_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter:in_data
	wire          cmd_demux_src0_ready;                                                       // DUT_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter:in_ready -> cmd_demux:src0_ready
	wire    [4:0] cmd_demux_src0_channel;                                                     // cmd_demux:src0_channel -> DUT_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter:in_channel
	wire          cmd_demux_src0_startofpacket;                                               // cmd_demux:src0_startofpacket -> DUT_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                 // cmd_demux:src0_endofpacket -> DUT_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_001_src0_valid;                                                   // cmd_demux_001:src0_valid -> DUT_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter:in_valid
	wire  [408:0] cmd_demux_001_src0_data;                                                    // cmd_demux_001:src0_data -> DUT_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter:in_data
	wire          cmd_demux_001_src0_ready;                                                   // DUT_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter:in_ready -> cmd_demux_001:src0_ready
	wire    [4:0] cmd_demux_001_src0_channel;                                                 // cmd_demux_001:src0_channel -> DUT_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                           // cmd_demux_001:src0_startofpacket -> DUT_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                             // cmd_demux_001:src0_endofpacket -> DUT_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_002_src0_valid;                                                   // cmd_demux_002:src0_valid -> DUT_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter:in_valid
	wire  [156:0] cmd_demux_002_src0_data;                                                    // cmd_demux_002:src0_data -> DUT_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter:in_data
	wire          cmd_demux_002_src0_ready;                                                   // DUT_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter:in_ready -> cmd_demux_002:src0_ready
	wire    [4:0] cmd_demux_002_src0_channel;                                                 // cmd_demux_002:src0_channel -> DUT_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                           // cmd_demux_002:src0_startofpacket -> DUT_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                             // cmd_demux_002:src0_endofpacket -> DUT_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_002_src1_valid;                                                   // cmd_demux_002:src1_valid -> DUT_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter:in_valid
	wire  [156:0] cmd_demux_002_src1_data;                                                    // cmd_demux_002:src1_data -> DUT_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter:in_data
	wire          cmd_demux_002_src1_ready;                                                   // DUT_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter:in_ready -> cmd_demux_002:src1_ready
	wire    [4:0] cmd_demux_002_src1_channel;                                                 // cmd_demux_002:src1_channel -> DUT_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src1_startofpacket;                                           // cmd_demux_002:src1_startofpacket -> DUT_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                             // cmd_demux_002:src1_endofpacket -> DUT_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter:in_endofpacket
	wire          rsp_demux_src0_valid;                                                       // rsp_demux:src0_valid -> emif_0_ctrl_amm_0_to_DUT_dma_rd_master_rsp_width_adapter:in_valid
	wire  [696:0] rsp_demux_src0_data;                                                        // rsp_demux:src0_data -> emif_0_ctrl_amm_0_to_DUT_dma_rd_master_rsp_width_adapter:in_data
	wire          rsp_demux_src0_ready;                                                       // emif_0_ctrl_amm_0_to_DUT_dma_rd_master_rsp_width_adapter:in_ready -> rsp_demux:src0_ready
	wire    [4:0] rsp_demux_src0_channel;                                                     // rsp_demux:src0_channel -> emif_0_ctrl_amm_0_to_DUT_dma_rd_master_rsp_width_adapter:in_channel
	wire          rsp_demux_src0_startofpacket;                                               // rsp_demux:src0_startofpacket -> emif_0_ctrl_amm_0_to_DUT_dma_rd_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                 // rsp_demux:src0_endofpacket -> emif_0_ctrl_amm_0_to_DUT_dma_rd_master_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_src1_valid;                                                       // rsp_demux:src1_valid -> emif_0_ctrl_amm_0_to_DUT_dma_wr_master_rsp_width_adapter:in_valid
	wire  [696:0] rsp_demux_src1_data;                                                        // rsp_demux:src1_data -> emif_0_ctrl_amm_0_to_DUT_dma_wr_master_rsp_width_adapter:in_data
	wire          rsp_demux_src1_ready;                                                       // emif_0_ctrl_amm_0_to_DUT_dma_wr_master_rsp_width_adapter:in_ready -> rsp_demux:src1_ready
	wire    [4:0] rsp_demux_src1_channel;                                                     // rsp_demux:src1_channel -> emif_0_ctrl_amm_0_to_DUT_dma_wr_master_rsp_width_adapter:in_channel
	wire          rsp_demux_src1_startofpacket;                                               // rsp_demux:src1_startofpacket -> emif_0_ctrl_amm_0_to_DUT_dma_wr_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                 // rsp_demux:src1_endofpacket -> emif_0_ctrl_amm_0_to_DUT_dma_wr_master_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_src2_valid;                                                       // rsp_demux:src2_valid -> emif_0_ctrl_amm_0_to_DUT_rxm_bar2_rsp_width_adapter:in_valid
	wire  [696:0] rsp_demux_src2_data;                                                        // rsp_demux:src2_data -> emif_0_ctrl_amm_0_to_DUT_rxm_bar2_rsp_width_adapter:in_data
	wire          rsp_demux_src2_ready;                                                       // emif_0_ctrl_amm_0_to_DUT_rxm_bar2_rsp_width_adapter:in_ready -> rsp_demux:src2_ready
	wire    [4:0] rsp_demux_src2_channel;                                                     // rsp_demux:src2_channel -> emif_0_ctrl_amm_0_to_DUT_rxm_bar2_rsp_width_adapter:in_channel
	wire          rsp_demux_src2_startofpacket;                                               // rsp_demux:src2_startofpacket -> emif_0_ctrl_amm_0_to_DUT_rxm_bar2_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                 // rsp_demux:src2_endofpacket -> emif_0_ctrl_amm_0_to_DUT_rxm_bar2_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_004_src1_valid;                                                   // rsp_demux_004:src1_valid -> onchip_memory2_0_s1_to_DUT_rxm_bar2_rsp_width_adapter:in_valid
	wire  [408:0] rsp_demux_004_src1_data;                                                    // rsp_demux_004:src1_data -> onchip_memory2_0_s1_to_DUT_rxm_bar2_rsp_width_adapter:in_data
	wire          rsp_demux_004_src1_ready;                                                   // onchip_memory2_0_s1_to_DUT_rxm_bar2_rsp_width_adapter:in_ready -> rsp_demux_004:src1_ready
	wire    [4:0] rsp_demux_004_src1_channel;                                                 // rsp_demux_004:src1_channel -> onchip_memory2_0_s1_to_DUT_rxm_bar2_rsp_width_adapter:in_channel
	wire          rsp_demux_004_src1_startofpacket;                                           // rsp_demux_004:src1_startofpacket -> onchip_memory2_0_s1_to_DUT_rxm_bar2_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                             // rsp_demux_004:src1_endofpacket -> onchip_memory2_0_s1_to_DUT_rxm_bar2_rsp_width_adapter:in_endofpacket
	wire          dut_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_valid;         // DUT_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter:out_valid -> async_fifo:in_valid
	wire  [696:0] dut_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_data;          // DUT_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter:out_data -> async_fifo:in_data
	wire          dut_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_ready;         // async_fifo:in_ready -> DUT_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter:out_ready
	wire    [4:0] dut_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_channel;       // DUT_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter:out_channel -> async_fifo:in_channel
	wire          dut_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_startofpacket; // DUT_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter:out_startofpacket -> async_fifo:in_startofpacket
	wire          dut_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_endofpacket;   // DUT_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter:out_endofpacket -> async_fifo:in_endofpacket
	wire          dut_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_valid;         // DUT_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter:out_valid -> async_fifo_001:in_valid
	wire  [696:0] dut_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_data;          // DUT_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter:out_data -> async_fifo_001:in_data
	wire          dut_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_ready;         // async_fifo_001:in_ready -> DUT_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter:out_ready
	wire    [4:0] dut_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_channel;       // DUT_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter:out_channel -> async_fifo_001:in_channel
	wire          dut_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_startofpacket; // DUT_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter:out_startofpacket -> async_fifo_001:in_startofpacket
	wire          dut_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_endofpacket;   // DUT_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter:out_endofpacket -> async_fifo_001:in_endofpacket
	wire          dut_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_valid;              // DUT_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter:out_valid -> async_fifo_002:in_valid
	wire  [696:0] dut_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_data;               // DUT_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter:out_data -> async_fifo_002:in_data
	wire          dut_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_ready;              // async_fifo_002:in_ready -> DUT_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter:out_ready
	wire    [4:0] dut_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_channel;            // DUT_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter:out_channel -> async_fifo_002:in_channel
	wire          dut_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_startofpacket;      // DUT_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter:out_startofpacket -> async_fifo_002:in_startofpacket
	wire          dut_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_endofpacket;        // DUT_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter:out_endofpacket -> async_fifo_002:in_endofpacket
	wire          emif_0_ctrl_amm_0_to_dut_dma_rd_master_rsp_width_adapter_src_valid;         // emif_0_ctrl_amm_0_to_DUT_dma_rd_master_rsp_width_adapter:out_valid -> async_fifo_003:in_valid
	wire  [408:0] emif_0_ctrl_amm_0_to_dut_dma_rd_master_rsp_width_adapter_src_data;          // emif_0_ctrl_amm_0_to_DUT_dma_rd_master_rsp_width_adapter:out_data -> async_fifo_003:in_data
	wire          emif_0_ctrl_amm_0_to_dut_dma_rd_master_rsp_width_adapter_src_ready;         // async_fifo_003:in_ready -> emif_0_ctrl_amm_0_to_DUT_dma_rd_master_rsp_width_adapter:out_ready
	wire    [4:0] emif_0_ctrl_amm_0_to_dut_dma_rd_master_rsp_width_adapter_src_channel;       // emif_0_ctrl_amm_0_to_DUT_dma_rd_master_rsp_width_adapter:out_channel -> async_fifo_003:in_channel
	wire          emif_0_ctrl_amm_0_to_dut_dma_rd_master_rsp_width_adapter_src_startofpacket; // emif_0_ctrl_amm_0_to_DUT_dma_rd_master_rsp_width_adapter:out_startofpacket -> async_fifo_003:in_startofpacket
	wire          emif_0_ctrl_amm_0_to_dut_dma_rd_master_rsp_width_adapter_src_endofpacket;   // emif_0_ctrl_amm_0_to_DUT_dma_rd_master_rsp_width_adapter:out_endofpacket -> async_fifo_003:in_endofpacket
	wire          emif_0_ctrl_amm_0_to_dut_dma_wr_master_rsp_width_adapter_src_valid;         // emif_0_ctrl_amm_0_to_DUT_dma_wr_master_rsp_width_adapter:out_valid -> async_fifo_004:in_valid
	wire  [408:0] emif_0_ctrl_amm_0_to_dut_dma_wr_master_rsp_width_adapter_src_data;          // emif_0_ctrl_amm_0_to_DUT_dma_wr_master_rsp_width_adapter:out_data -> async_fifo_004:in_data
	wire          emif_0_ctrl_amm_0_to_dut_dma_wr_master_rsp_width_adapter_src_ready;         // async_fifo_004:in_ready -> emif_0_ctrl_amm_0_to_DUT_dma_wr_master_rsp_width_adapter:out_ready
	wire    [4:0] emif_0_ctrl_amm_0_to_dut_dma_wr_master_rsp_width_adapter_src_channel;       // emif_0_ctrl_amm_0_to_DUT_dma_wr_master_rsp_width_adapter:out_channel -> async_fifo_004:in_channel
	wire          emif_0_ctrl_amm_0_to_dut_dma_wr_master_rsp_width_adapter_src_startofpacket; // emif_0_ctrl_amm_0_to_DUT_dma_wr_master_rsp_width_adapter:out_startofpacket -> async_fifo_004:in_startofpacket
	wire          emif_0_ctrl_amm_0_to_dut_dma_wr_master_rsp_width_adapter_src_endofpacket;   // emif_0_ctrl_amm_0_to_DUT_dma_wr_master_rsp_width_adapter:out_endofpacket -> async_fifo_004:in_endofpacket
	wire          emif_0_ctrl_amm_0_to_dut_rxm_bar2_rsp_width_adapter_src_valid;              // emif_0_ctrl_amm_0_to_DUT_rxm_bar2_rsp_width_adapter:out_valid -> async_fifo_005:in_valid
	wire  [156:0] emif_0_ctrl_amm_0_to_dut_rxm_bar2_rsp_width_adapter_src_data;               // emif_0_ctrl_amm_0_to_DUT_rxm_bar2_rsp_width_adapter:out_data -> async_fifo_005:in_data
	wire          emif_0_ctrl_amm_0_to_dut_rxm_bar2_rsp_width_adapter_src_ready;              // async_fifo_005:in_ready -> emif_0_ctrl_amm_0_to_DUT_rxm_bar2_rsp_width_adapter:out_ready
	wire    [4:0] emif_0_ctrl_amm_0_to_dut_rxm_bar2_rsp_width_adapter_src_channel;            // emif_0_ctrl_amm_0_to_DUT_rxm_bar2_rsp_width_adapter:out_channel -> async_fifo_005:in_channel
	wire          emif_0_ctrl_amm_0_to_dut_rxm_bar2_rsp_width_adapter_src_startofpacket;      // emif_0_ctrl_amm_0_to_DUT_rxm_bar2_rsp_width_adapter:out_startofpacket -> async_fifo_005:in_startofpacket
	wire          emif_0_ctrl_amm_0_to_dut_rxm_bar2_rsp_width_adapter_src_endofpacket;        // emif_0_ctrl_amm_0_to_DUT_rxm_bar2_rsp_width_adapter:out_endofpacket -> async_fifo_005:in_endofpacket
	wire    [0:0] dut_dma_wr_master_limiter_cmd_src_valid;                                    // DUT_dma_wr_master_limiter:cmd_src_valid -> limiter_pipeline:in_valid
	wire  [408:0] dut_dma_wr_master_limiter_cmd_src_data;                                     // DUT_dma_wr_master_limiter:cmd_src_data -> limiter_pipeline:in_data
	wire          dut_dma_wr_master_limiter_cmd_src_ready;                                    // limiter_pipeline:in_ready -> DUT_dma_wr_master_limiter:cmd_src_ready
	wire    [4:0] dut_dma_wr_master_limiter_cmd_src_channel;                                  // DUT_dma_wr_master_limiter:cmd_src_channel -> limiter_pipeline:in_channel
	wire          dut_dma_wr_master_limiter_cmd_src_startofpacket;                            // DUT_dma_wr_master_limiter:cmd_src_startofpacket -> limiter_pipeline:in_startofpacket
	wire          dut_dma_wr_master_limiter_cmd_src_endofpacket;                              // DUT_dma_wr_master_limiter:cmd_src_endofpacket -> limiter_pipeline:in_endofpacket
	wire          limiter_pipeline_source0_valid;                                             // limiter_pipeline:out_valid -> cmd_demux_001:sink_valid
	wire  [408:0] limiter_pipeline_source0_data;                                              // limiter_pipeline:out_data -> cmd_demux_001:sink_data
	wire          limiter_pipeline_source0_ready;                                             // cmd_demux_001:sink_ready -> limiter_pipeline:out_ready
	wire    [4:0] limiter_pipeline_source0_channel;                                           // limiter_pipeline:out_channel -> cmd_demux_001:sink_channel
	wire          limiter_pipeline_source0_startofpacket;                                     // limiter_pipeline:out_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          limiter_pipeline_source0_endofpacket;                                       // limiter_pipeline:out_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                      // rsp_mux_001:src_valid -> limiter_pipeline_001:in_valid
	wire  [408:0] rsp_mux_001_src_data;                                                       // rsp_mux_001:src_data -> limiter_pipeline_001:in_data
	wire          rsp_mux_001_src_ready;                                                      // limiter_pipeline_001:in_ready -> rsp_mux_001:src_ready
	wire    [4:0] rsp_mux_001_src_channel;                                                    // rsp_mux_001:src_channel -> limiter_pipeline_001:in_channel
	wire          rsp_mux_001_src_startofpacket;                                              // rsp_mux_001:src_startofpacket -> limiter_pipeline_001:in_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                // rsp_mux_001:src_endofpacket -> limiter_pipeline_001:in_endofpacket
	wire          limiter_pipeline_001_source0_valid;                                         // limiter_pipeline_001:out_valid -> DUT_dma_wr_master_limiter:rsp_sink_valid
	wire  [408:0] limiter_pipeline_001_source0_data;                                          // limiter_pipeline_001:out_data -> DUT_dma_wr_master_limiter:rsp_sink_data
	wire          limiter_pipeline_001_source0_ready;                                         // DUT_dma_wr_master_limiter:rsp_sink_ready -> limiter_pipeline_001:out_ready
	wire    [4:0] limiter_pipeline_001_source0_channel;                                       // limiter_pipeline_001:out_channel -> DUT_dma_wr_master_limiter:rsp_sink_channel
	wire          limiter_pipeline_001_source0_startofpacket;                                 // limiter_pipeline_001:out_startofpacket -> DUT_dma_wr_master_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_001_source0_endofpacket;                                   // limiter_pipeline_001:out_endofpacket -> DUT_dma_wr_master_limiter:rsp_sink_endofpacket
	wire    [0:0] dut_rxm_bar2_limiter_cmd_src_valid;                                         // DUT_rxm_bar2_limiter:cmd_src_valid -> limiter_pipeline_002:in_valid
	wire  [156:0] dut_rxm_bar2_limiter_cmd_src_data;                                          // DUT_rxm_bar2_limiter:cmd_src_data -> limiter_pipeline_002:in_data
	wire          dut_rxm_bar2_limiter_cmd_src_ready;                                         // limiter_pipeline_002:in_ready -> DUT_rxm_bar2_limiter:cmd_src_ready
	wire    [4:0] dut_rxm_bar2_limiter_cmd_src_channel;                                       // DUT_rxm_bar2_limiter:cmd_src_channel -> limiter_pipeline_002:in_channel
	wire          dut_rxm_bar2_limiter_cmd_src_startofpacket;                                 // DUT_rxm_bar2_limiter:cmd_src_startofpacket -> limiter_pipeline_002:in_startofpacket
	wire          dut_rxm_bar2_limiter_cmd_src_endofpacket;                                   // DUT_rxm_bar2_limiter:cmd_src_endofpacket -> limiter_pipeline_002:in_endofpacket
	wire          limiter_pipeline_002_source0_valid;                                         // limiter_pipeline_002:out_valid -> cmd_demux_002:sink_valid
	wire  [156:0] limiter_pipeline_002_source0_data;                                          // limiter_pipeline_002:out_data -> cmd_demux_002:sink_data
	wire          limiter_pipeline_002_source0_ready;                                         // cmd_demux_002:sink_ready -> limiter_pipeline_002:out_ready
	wire    [4:0] limiter_pipeline_002_source0_channel;                                       // limiter_pipeline_002:out_channel -> cmd_demux_002:sink_channel
	wire          limiter_pipeline_002_source0_startofpacket;                                 // limiter_pipeline_002:out_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          limiter_pipeline_002_source0_endofpacket;                                   // limiter_pipeline_002:out_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                      // rsp_mux_002:src_valid -> limiter_pipeline_003:in_valid
	wire  [156:0] rsp_mux_002_src_data;                                                       // rsp_mux_002:src_data -> limiter_pipeline_003:in_data
	wire          rsp_mux_002_src_ready;                                                      // limiter_pipeline_003:in_ready -> rsp_mux_002:src_ready
	wire    [4:0] rsp_mux_002_src_channel;                                                    // rsp_mux_002:src_channel -> limiter_pipeline_003:in_channel
	wire          rsp_mux_002_src_startofpacket;                                              // rsp_mux_002:src_startofpacket -> limiter_pipeline_003:in_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                // rsp_mux_002:src_endofpacket -> limiter_pipeline_003:in_endofpacket
	wire          limiter_pipeline_003_source0_valid;                                         // limiter_pipeline_003:out_valid -> DUT_rxm_bar2_limiter:rsp_sink_valid
	wire  [156:0] limiter_pipeline_003_source0_data;                                          // limiter_pipeline_003:out_data -> DUT_rxm_bar2_limiter:rsp_sink_data
	wire          limiter_pipeline_003_source0_ready;                                         // DUT_rxm_bar2_limiter:rsp_sink_ready -> limiter_pipeline_003:out_ready
	wire    [4:0] limiter_pipeline_003_source0_channel;                                       // limiter_pipeline_003:out_channel -> DUT_rxm_bar2_limiter:rsp_sink_channel
	wire          limiter_pipeline_003_source0_startofpacket;                                 // limiter_pipeline_003:out_startofpacket -> DUT_rxm_bar2_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_003_source0_endofpacket;                                   // limiter_pipeline_003:out_endofpacket -> DUT_rxm_bar2_limiter:rsp_sink_endofpacket
	wire          cmd_mux_src_valid;                                                          // cmd_mux:src_valid -> agent_pipeline:in_valid
	wire  [696:0] cmd_mux_src_data;                                                           // cmd_mux:src_data -> agent_pipeline:in_data
	wire          cmd_mux_src_ready;                                                          // agent_pipeline:in_ready -> cmd_mux:src_ready
	wire    [4:0] cmd_mux_src_channel;                                                        // cmd_mux:src_channel -> agent_pipeline:in_channel
	wire          cmd_mux_src_startofpacket;                                                  // cmd_mux:src_startofpacket -> agent_pipeline:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                    // cmd_mux:src_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                                               // agent_pipeline:out_valid -> emif_0_ctrl_amm_0_agent:cp_valid
	wire  [696:0] agent_pipeline_source0_data;                                                // agent_pipeline:out_data -> emif_0_ctrl_amm_0_agent:cp_data
	wire          agent_pipeline_source0_ready;                                               // emif_0_ctrl_amm_0_agent:cp_ready -> agent_pipeline:out_ready
	wire    [4:0] agent_pipeline_source0_channel;                                             // agent_pipeline:out_channel -> emif_0_ctrl_amm_0_agent:cp_channel
	wire          agent_pipeline_source0_startofpacket;                                       // agent_pipeline:out_startofpacket -> emif_0_ctrl_amm_0_agent:cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                                         // agent_pipeline:out_endofpacket -> emif_0_ctrl_amm_0_agent:cp_endofpacket
	wire          emif_0_ctrl_amm_0_agent_rp_valid;                                           // emif_0_ctrl_amm_0_agent:rp_valid -> agent_pipeline_001:in_valid
	wire  [696:0] emif_0_ctrl_amm_0_agent_rp_data;                                            // emif_0_ctrl_amm_0_agent:rp_data -> agent_pipeline_001:in_data
	wire          emif_0_ctrl_amm_0_agent_rp_ready;                                           // agent_pipeline_001:in_ready -> emif_0_ctrl_amm_0_agent:rp_ready
	wire          emif_0_ctrl_amm_0_agent_rp_startofpacket;                                   // emif_0_ctrl_amm_0_agent:rp_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          emif_0_ctrl_amm_0_agent_rp_endofpacket;                                     // emif_0_ctrl_amm_0_agent:rp_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                                           // agent_pipeline_001:out_valid -> router_003:sink_valid
	wire  [696:0] agent_pipeline_001_source0_data;                                            // agent_pipeline_001:out_data -> router_003:sink_data
	wire          agent_pipeline_001_source0_ready;                                           // router_003:sink_ready -> agent_pipeline_001:out_ready
	wire          agent_pipeline_001_source0_startofpacket;                                   // agent_pipeline_001:out_startofpacket -> router_003:sink_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                                     // agent_pipeline_001:out_endofpacket -> router_003:sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                      // cmd_mux_001:src_valid -> agent_pipeline_002:in_valid
	wire  [408:0] cmd_mux_001_src_data;                                                       // cmd_mux_001:src_data -> agent_pipeline_002:in_data
	wire          cmd_mux_001_src_ready;                                                      // agent_pipeline_002:in_ready -> cmd_mux_001:src_ready
	wire    [4:0] cmd_mux_001_src_channel;                                                    // cmd_mux_001:src_channel -> agent_pipeline_002:in_channel
	wire          cmd_mux_001_src_startofpacket;                                              // cmd_mux_001:src_startofpacket -> agent_pipeline_002:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                // cmd_mux_001:src_endofpacket -> agent_pipeline_002:in_endofpacket
	wire          agent_pipeline_002_source0_valid;                                           // agent_pipeline_002:out_valid -> DUT_rd_dts_slave_agent:cp_valid
	wire  [408:0] agent_pipeline_002_source0_data;                                            // agent_pipeline_002:out_data -> DUT_rd_dts_slave_agent:cp_data
	wire          agent_pipeline_002_source0_ready;                                           // DUT_rd_dts_slave_agent:cp_ready -> agent_pipeline_002:out_ready
	wire    [4:0] agent_pipeline_002_source0_channel;                                         // agent_pipeline_002:out_channel -> DUT_rd_dts_slave_agent:cp_channel
	wire          agent_pipeline_002_source0_startofpacket;                                   // agent_pipeline_002:out_startofpacket -> DUT_rd_dts_slave_agent:cp_startofpacket
	wire          agent_pipeline_002_source0_endofpacket;                                     // agent_pipeline_002:out_endofpacket -> DUT_rd_dts_slave_agent:cp_endofpacket
	wire          dut_rd_dts_slave_agent_rp_valid;                                            // DUT_rd_dts_slave_agent:rp_valid -> agent_pipeline_003:in_valid
	wire  [408:0] dut_rd_dts_slave_agent_rp_data;                                             // DUT_rd_dts_slave_agent:rp_data -> agent_pipeline_003:in_data
	wire          dut_rd_dts_slave_agent_rp_ready;                                            // agent_pipeline_003:in_ready -> DUT_rd_dts_slave_agent:rp_ready
	wire          dut_rd_dts_slave_agent_rp_startofpacket;                                    // DUT_rd_dts_slave_agent:rp_startofpacket -> agent_pipeline_003:in_startofpacket
	wire          dut_rd_dts_slave_agent_rp_endofpacket;                                      // DUT_rd_dts_slave_agent:rp_endofpacket -> agent_pipeline_003:in_endofpacket
	wire          agent_pipeline_003_source0_valid;                                           // agent_pipeline_003:out_valid -> router_004:sink_valid
	wire  [408:0] agent_pipeline_003_source0_data;                                            // agent_pipeline_003:out_data -> router_004:sink_data
	wire          agent_pipeline_003_source0_ready;                                           // router_004:sink_ready -> agent_pipeline_003:out_ready
	wire          agent_pipeline_003_source0_startofpacket;                                   // agent_pipeline_003:out_startofpacket -> router_004:sink_startofpacket
	wire          agent_pipeline_003_source0_endofpacket;                                     // agent_pipeline_003:out_endofpacket -> router_004:sink_endofpacket
	wire          onchip_memory2_0_s2_burst_adapter_source0_valid;                            // onchip_memory2_0_s2_burst_adapter:source0_valid -> agent_pipeline_004:in_valid
	wire  [408:0] onchip_memory2_0_s2_burst_adapter_source0_data;                             // onchip_memory2_0_s2_burst_adapter:source0_data -> agent_pipeline_004:in_data
	wire          onchip_memory2_0_s2_burst_adapter_source0_ready;                            // agent_pipeline_004:in_ready -> onchip_memory2_0_s2_burst_adapter:source0_ready
	wire    [4:0] onchip_memory2_0_s2_burst_adapter_source0_channel;                          // onchip_memory2_0_s2_burst_adapter:source0_channel -> agent_pipeline_004:in_channel
	wire          onchip_memory2_0_s2_burst_adapter_source0_startofpacket;                    // onchip_memory2_0_s2_burst_adapter:source0_startofpacket -> agent_pipeline_004:in_startofpacket
	wire          onchip_memory2_0_s2_burst_adapter_source0_endofpacket;                      // onchip_memory2_0_s2_burst_adapter:source0_endofpacket -> agent_pipeline_004:in_endofpacket
	wire          agent_pipeline_004_source0_valid;                                           // agent_pipeline_004:out_valid -> onchip_memory2_0_s2_agent:cp_valid
	wire  [408:0] agent_pipeline_004_source0_data;                                            // agent_pipeline_004:out_data -> onchip_memory2_0_s2_agent:cp_data
	wire          agent_pipeline_004_source0_ready;                                           // onchip_memory2_0_s2_agent:cp_ready -> agent_pipeline_004:out_ready
	wire    [4:0] agent_pipeline_004_source0_channel;                                         // agent_pipeline_004:out_channel -> onchip_memory2_0_s2_agent:cp_channel
	wire          agent_pipeline_004_source0_startofpacket;                                   // agent_pipeline_004:out_startofpacket -> onchip_memory2_0_s2_agent:cp_startofpacket
	wire          agent_pipeline_004_source0_endofpacket;                                     // agent_pipeline_004:out_endofpacket -> onchip_memory2_0_s2_agent:cp_endofpacket
	wire          onchip_memory2_0_s2_agent_rp_valid;                                         // onchip_memory2_0_s2_agent:rp_valid -> agent_pipeline_005:in_valid
	wire  [408:0] onchip_memory2_0_s2_agent_rp_data;                                          // onchip_memory2_0_s2_agent:rp_data -> agent_pipeline_005:in_data
	wire          onchip_memory2_0_s2_agent_rp_ready;                                         // agent_pipeline_005:in_ready -> onchip_memory2_0_s2_agent:rp_ready
	wire          onchip_memory2_0_s2_agent_rp_startofpacket;                                 // onchip_memory2_0_s2_agent:rp_startofpacket -> agent_pipeline_005:in_startofpacket
	wire          onchip_memory2_0_s2_agent_rp_endofpacket;                                   // onchip_memory2_0_s2_agent:rp_endofpacket -> agent_pipeline_005:in_endofpacket
	wire          agent_pipeline_005_source0_valid;                                           // agent_pipeline_005:out_valid -> router_005:sink_valid
	wire  [408:0] agent_pipeline_005_source0_data;                                            // agent_pipeline_005:out_data -> router_005:sink_data
	wire          agent_pipeline_005_source0_ready;                                           // router_005:sink_ready -> agent_pipeline_005:out_ready
	wire          agent_pipeline_005_source0_startofpacket;                                   // agent_pipeline_005:out_startofpacket -> router_005:sink_startofpacket
	wire          agent_pipeline_005_source0_endofpacket;                                     // agent_pipeline_005:out_endofpacket -> router_005:sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                      // cmd_mux_003:src_valid -> agent_pipeline_006:in_valid
	wire  [408:0] cmd_mux_003_src_data;                                                       // cmd_mux_003:src_data -> agent_pipeline_006:in_data
	wire          cmd_mux_003_src_ready;                                                      // agent_pipeline_006:in_ready -> cmd_mux_003:src_ready
	wire    [4:0] cmd_mux_003_src_channel;                                                    // cmd_mux_003:src_channel -> agent_pipeline_006:in_channel
	wire          cmd_mux_003_src_startofpacket;                                              // cmd_mux_003:src_startofpacket -> agent_pipeline_006:in_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                // cmd_mux_003:src_endofpacket -> agent_pipeline_006:in_endofpacket
	wire          agent_pipeline_006_source0_valid;                                           // agent_pipeline_006:out_valid -> DUT_wr_dts_slave_agent:cp_valid
	wire  [408:0] agent_pipeline_006_source0_data;                                            // agent_pipeline_006:out_data -> DUT_wr_dts_slave_agent:cp_data
	wire          agent_pipeline_006_source0_ready;                                           // DUT_wr_dts_slave_agent:cp_ready -> agent_pipeline_006:out_ready
	wire    [4:0] agent_pipeline_006_source0_channel;                                         // agent_pipeline_006:out_channel -> DUT_wr_dts_slave_agent:cp_channel
	wire          agent_pipeline_006_source0_startofpacket;                                   // agent_pipeline_006:out_startofpacket -> DUT_wr_dts_slave_agent:cp_startofpacket
	wire          agent_pipeline_006_source0_endofpacket;                                     // agent_pipeline_006:out_endofpacket -> DUT_wr_dts_slave_agent:cp_endofpacket
	wire          dut_wr_dts_slave_agent_rp_valid;                                            // DUT_wr_dts_slave_agent:rp_valid -> agent_pipeline_007:in_valid
	wire  [408:0] dut_wr_dts_slave_agent_rp_data;                                             // DUT_wr_dts_slave_agent:rp_data -> agent_pipeline_007:in_data
	wire          dut_wr_dts_slave_agent_rp_ready;                                            // agent_pipeline_007:in_ready -> DUT_wr_dts_slave_agent:rp_ready
	wire          dut_wr_dts_slave_agent_rp_startofpacket;                                    // DUT_wr_dts_slave_agent:rp_startofpacket -> agent_pipeline_007:in_startofpacket
	wire          dut_wr_dts_slave_agent_rp_endofpacket;                                      // DUT_wr_dts_slave_agent:rp_endofpacket -> agent_pipeline_007:in_endofpacket
	wire          agent_pipeline_007_source0_valid;                                           // agent_pipeline_007:out_valid -> router_006:sink_valid
	wire  [408:0] agent_pipeline_007_source0_data;                                            // agent_pipeline_007:out_data -> router_006:sink_data
	wire          agent_pipeline_007_source0_ready;                                           // router_006:sink_ready -> agent_pipeline_007:out_ready
	wire          agent_pipeline_007_source0_startofpacket;                                   // agent_pipeline_007:out_startofpacket -> router_006:sink_startofpacket
	wire          agent_pipeline_007_source0_endofpacket;                                     // agent_pipeline_007:out_endofpacket -> router_006:sink_endofpacket
	wire          onchip_memory2_0_s1_burst_adapter_source0_valid;                            // onchip_memory2_0_s1_burst_adapter:source0_valid -> agent_pipeline_008:in_valid
	wire  [408:0] onchip_memory2_0_s1_burst_adapter_source0_data;                             // onchip_memory2_0_s1_burst_adapter:source0_data -> agent_pipeline_008:in_data
	wire          onchip_memory2_0_s1_burst_adapter_source0_ready;                            // agent_pipeline_008:in_ready -> onchip_memory2_0_s1_burst_adapter:source0_ready
	wire    [4:0] onchip_memory2_0_s1_burst_adapter_source0_channel;                          // onchip_memory2_0_s1_burst_adapter:source0_channel -> agent_pipeline_008:in_channel
	wire          onchip_memory2_0_s1_burst_adapter_source0_startofpacket;                    // onchip_memory2_0_s1_burst_adapter:source0_startofpacket -> agent_pipeline_008:in_startofpacket
	wire          onchip_memory2_0_s1_burst_adapter_source0_endofpacket;                      // onchip_memory2_0_s1_burst_adapter:source0_endofpacket -> agent_pipeline_008:in_endofpacket
	wire          agent_pipeline_008_source0_valid;                                           // agent_pipeline_008:out_valid -> onchip_memory2_0_s1_agent:cp_valid
	wire  [408:0] agent_pipeline_008_source0_data;                                            // agent_pipeline_008:out_data -> onchip_memory2_0_s1_agent:cp_data
	wire          agent_pipeline_008_source0_ready;                                           // onchip_memory2_0_s1_agent:cp_ready -> agent_pipeline_008:out_ready
	wire    [4:0] agent_pipeline_008_source0_channel;                                         // agent_pipeline_008:out_channel -> onchip_memory2_0_s1_agent:cp_channel
	wire          agent_pipeline_008_source0_startofpacket;                                   // agent_pipeline_008:out_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	wire          agent_pipeline_008_source0_endofpacket;                                     // agent_pipeline_008:out_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	wire          onchip_memory2_0_s1_agent_rp_valid;                                         // onchip_memory2_0_s1_agent:rp_valid -> agent_pipeline_009:in_valid
	wire  [408:0] onchip_memory2_0_s1_agent_rp_data;                                          // onchip_memory2_0_s1_agent:rp_data -> agent_pipeline_009:in_data
	wire          onchip_memory2_0_s1_agent_rp_ready;                                         // agent_pipeline_009:in_ready -> onchip_memory2_0_s1_agent:rp_ready
	wire          onchip_memory2_0_s1_agent_rp_startofpacket;                                 // onchip_memory2_0_s1_agent:rp_startofpacket -> agent_pipeline_009:in_startofpacket
	wire          onchip_memory2_0_s1_agent_rp_endofpacket;                                   // onchip_memory2_0_s1_agent:rp_endofpacket -> agent_pipeline_009:in_endofpacket
	wire          agent_pipeline_009_source0_valid;                                           // agent_pipeline_009:out_valid -> router_007:sink_valid
	wire  [408:0] agent_pipeline_009_source0_data;                                            // agent_pipeline_009:out_data -> router_007:sink_data
	wire          agent_pipeline_009_source0_ready;                                           // router_007:sink_ready -> agent_pipeline_009:out_ready
	wire          agent_pipeline_009_source0_startofpacket;                                   // agent_pipeline_009:out_startofpacket -> router_007:sink_startofpacket
	wire          agent_pipeline_009_source0_endofpacket;                                     // agent_pipeline_009:out_endofpacket -> router_007:sink_endofpacket
	wire          async_fifo_out_valid;                                                       // async_fifo:out_valid -> mux_pipeline:in_valid
	wire  [696:0] async_fifo_out_data;                                                        // async_fifo:out_data -> mux_pipeline:in_data
	wire          async_fifo_out_ready;                                                       // mux_pipeline:in_ready -> async_fifo:out_ready
	wire    [4:0] async_fifo_out_channel;                                                     // async_fifo:out_channel -> mux_pipeline:in_channel
	wire          async_fifo_out_startofpacket;                                               // async_fifo:out_startofpacket -> mux_pipeline:in_startofpacket
	wire          async_fifo_out_endofpacket;                                                 // async_fifo:out_endofpacket -> mux_pipeline:in_endofpacket
	wire          mux_pipeline_source0_valid;                                                 // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire  [696:0] mux_pipeline_source0_data;                                                  // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire          mux_pipeline_source0_ready;                                                 // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire    [4:0] mux_pipeline_source0_channel;                                               // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_startofpacket;                                         // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mux_pipeline_source0_endofpacket;                                           // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          async_fifo_001_out_valid;                                                   // async_fifo_001:out_valid -> mux_pipeline_001:in_valid
	wire  [696:0] async_fifo_001_out_data;                                                    // async_fifo_001:out_data -> mux_pipeline_001:in_data
	wire          async_fifo_001_out_ready;                                                   // mux_pipeline_001:in_ready -> async_fifo_001:out_ready
	wire    [4:0] async_fifo_001_out_channel;                                                 // async_fifo_001:out_channel -> mux_pipeline_001:in_channel
	wire          async_fifo_001_out_startofpacket;                                           // async_fifo_001:out_startofpacket -> mux_pipeline_001:in_startofpacket
	wire          async_fifo_001_out_endofpacket;                                             // async_fifo_001:out_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          mux_pipeline_001_source0_valid;                                             // mux_pipeline_001:out_valid -> cmd_mux:sink1_valid
	wire  [696:0] mux_pipeline_001_source0_data;                                              // mux_pipeline_001:out_data -> cmd_mux:sink1_data
	wire          mux_pipeline_001_source0_ready;                                             // cmd_mux:sink1_ready -> mux_pipeline_001:out_ready
	wire    [4:0] mux_pipeline_001_source0_channel;                                           // mux_pipeline_001:out_channel -> cmd_mux:sink1_channel
	wire          mux_pipeline_001_source0_startofpacket;                                     // mux_pipeline_001:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          mux_pipeline_001_source0_endofpacket;                                       // mux_pipeline_001:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          async_fifo_002_out_valid;                                                   // async_fifo_002:out_valid -> mux_pipeline_002:in_valid
	wire  [696:0] async_fifo_002_out_data;                                                    // async_fifo_002:out_data -> mux_pipeline_002:in_data
	wire          async_fifo_002_out_ready;                                                   // mux_pipeline_002:in_ready -> async_fifo_002:out_ready
	wire    [4:0] async_fifo_002_out_channel;                                                 // async_fifo_002:out_channel -> mux_pipeline_002:in_channel
	wire          async_fifo_002_out_startofpacket;                                           // async_fifo_002:out_startofpacket -> mux_pipeline_002:in_startofpacket
	wire          async_fifo_002_out_endofpacket;                                             // async_fifo_002:out_endofpacket -> mux_pipeline_002:in_endofpacket
	wire          mux_pipeline_002_source0_valid;                                             // mux_pipeline_002:out_valid -> cmd_mux:sink2_valid
	wire  [696:0] mux_pipeline_002_source0_data;                                              // mux_pipeline_002:out_data -> cmd_mux:sink2_data
	wire          mux_pipeline_002_source0_ready;                                             // cmd_mux:sink2_ready -> mux_pipeline_002:out_ready
	wire    [4:0] mux_pipeline_002_source0_channel;                                           // mux_pipeline_002:out_channel -> cmd_mux:sink2_channel
	wire          mux_pipeline_002_source0_startofpacket;                                     // mux_pipeline_002:out_startofpacket -> cmd_mux:sink2_startofpacket
	wire          mux_pipeline_002_source0_endofpacket;                                       // mux_pipeline_002:out_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_src1_valid;                                                       // cmd_demux:src1_valid -> mux_pipeline_003:in_valid
	wire  [408:0] cmd_demux_src1_data;                                                        // cmd_demux:src1_data -> mux_pipeline_003:in_data
	wire          cmd_demux_src1_ready;                                                       // mux_pipeline_003:in_ready -> cmd_demux:src1_ready
	wire    [4:0] cmd_demux_src1_channel;                                                     // cmd_demux:src1_channel -> mux_pipeline_003:in_channel
	wire          cmd_demux_src1_startofpacket;                                               // cmd_demux:src1_startofpacket -> mux_pipeline_003:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                 // cmd_demux:src1_endofpacket -> mux_pipeline_003:in_endofpacket
	wire          mux_pipeline_003_source0_valid;                                             // mux_pipeline_003:out_valid -> cmd_mux_001:sink0_valid
	wire  [408:0] mux_pipeline_003_source0_data;                                              // mux_pipeline_003:out_data -> cmd_mux_001:sink0_data
	wire          mux_pipeline_003_source0_ready;                                             // cmd_mux_001:sink0_ready -> mux_pipeline_003:out_ready
	wire    [4:0] mux_pipeline_003_source0_channel;                                           // mux_pipeline_003:out_channel -> cmd_mux_001:sink0_channel
	wire          mux_pipeline_003_source0_startofpacket;                                     // mux_pipeline_003:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          mux_pipeline_003_source0_endofpacket;                                       // mux_pipeline_003:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                       // cmd_demux:src2_valid -> mux_pipeline_004:in_valid
	wire  [408:0] cmd_demux_src2_data;                                                        // cmd_demux:src2_data -> mux_pipeline_004:in_data
	wire          cmd_demux_src2_ready;                                                       // mux_pipeline_004:in_ready -> cmd_demux:src2_ready
	wire    [4:0] cmd_demux_src2_channel;                                                     // cmd_demux:src2_channel -> mux_pipeline_004:in_channel
	wire          cmd_demux_src2_startofpacket;                                               // cmd_demux:src2_startofpacket -> mux_pipeline_004:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                 // cmd_demux:src2_endofpacket -> mux_pipeline_004:in_endofpacket
	wire          mux_pipeline_004_source0_valid;                                             // mux_pipeline_004:out_valid -> cmd_mux_002:sink0_valid
	wire  [408:0] mux_pipeline_004_source0_data;                                              // mux_pipeline_004:out_data -> cmd_mux_002:sink0_data
	wire          mux_pipeline_004_source0_ready;                                             // cmd_mux_002:sink0_ready -> mux_pipeline_004:out_ready
	wire    [4:0] mux_pipeline_004_source0_channel;                                           // mux_pipeline_004:out_channel -> cmd_mux_002:sink0_channel
	wire          mux_pipeline_004_source0_startofpacket;                                     // mux_pipeline_004:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          mux_pipeline_004_source0_endofpacket;                                       // mux_pipeline_004:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                       // cmd_demux:src3_valid -> mux_pipeline_005:in_valid
	wire  [408:0] cmd_demux_src3_data;                                                        // cmd_demux:src3_data -> mux_pipeline_005:in_data
	wire          cmd_demux_src3_ready;                                                       // mux_pipeline_005:in_ready -> cmd_demux:src3_ready
	wire    [4:0] cmd_demux_src3_channel;                                                     // cmd_demux:src3_channel -> mux_pipeline_005:in_channel
	wire          cmd_demux_src3_startofpacket;                                               // cmd_demux:src3_startofpacket -> mux_pipeline_005:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                 // cmd_demux:src3_endofpacket -> mux_pipeline_005:in_endofpacket
	wire          mux_pipeline_005_source0_valid;                                             // mux_pipeline_005:out_valid -> cmd_mux_003:sink0_valid
	wire  [408:0] mux_pipeline_005_source0_data;                                              // mux_pipeline_005:out_data -> cmd_mux_003:sink0_data
	wire          mux_pipeline_005_source0_ready;                                             // cmd_mux_003:sink0_ready -> mux_pipeline_005:out_ready
	wire    [4:0] mux_pipeline_005_source0_channel;                                           // mux_pipeline_005:out_channel -> cmd_mux_003:sink0_channel
	wire          mux_pipeline_005_source0_startofpacket;                                     // mux_pipeline_005:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          mux_pipeline_005_source0_endofpacket;                                       // mux_pipeline_005:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                                   // cmd_demux_001:src1_valid -> mux_pipeline_006:in_valid
	wire  [408:0] cmd_demux_001_src1_data;                                                    // cmd_demux_001:src1_data -> mux_pipeline_006:in_data
	wire          cmd_demux_001_src1_ready;                                                   // mux_pipeline_006:in_ready -> cmd_demux_001:src1_ready
	wire    [4:0] cmd_demux_001_src1_channel;                                                 // cmd_demux_001:src1_channel -> mux_pipeline_006:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                           // cmd_demux_001:src1_startofpacket -> mux_pipeline_006:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                             // cmd_demux_001:src1_endofpacket -> mux_pipeline_006:in_endofpacket
	wire          mux_pipeline_006_source0_valid;                                             // mux_pipeline_006:out_valid -> cmd_mux_004:sink0_valid
	wire  [408:0] mux_pipeline_006_source0_data;                                              // mux_pipeline_006:out_data -> cmd_mux_004:sink0_data
	wire          mux_pipeline_006_source0_ready;                                             // cmd_mux_004:sink0_ready -> mux_pipeline_006:out_ready
	wire    [4:0] mux_pipeline_006_source0_channel;                                           // mux_pipeline_006:out_channel -> cmd_mux_004:sink0_channel
	wire          mux_pipeline_006_source0_startofpacket;                                     // mux_pipeline_006:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          mux_pipeline_006_source0_endofpacket;                                       // mux_pipeline_006:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          dut_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid;            // DUT_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter:out_valid -> mux_pipeline_007:in_valid
	wire  [408:0] dut_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter_src_data;             // DUT_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter:out_data -> mux_pipeline_007:in_data
	wire          dut_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready;            // mux_pipeline_007:in_ready -> DUT_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter:out_ready
	wire    [4:0] dut_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel;          // DUT_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter:out_channel -> mux_pipeline_007:in_channel
	wire          dut_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket;    // DUT_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter:out_startofpacket -> mux_pipeline_007:in_startofpacket
	wire          dut_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket;      // DUT_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter:out_endofpacket -> mux_pipeline_007:in_endofpacket
	wire          mux_pipeline_007_source0_valid;                                             // mux_pipeline_007:out_valid -> cmd_mux_004:sink1_valid
	wire  [408:0] mux_pipeline_007_source0_data;                                              // mux_pipeline_007:out_data -> cmd_mux_004:sink1_data
	wire          mux_pipeline_007_source0_ready;                                             // cmd_mux_004:sink1_ready -> mux_pipeline_007:out_ready
	wire    [4:0] mux_pipeline_007_source0_channel;                                           // mux_pipeline_007:out_channel -> cmd_mux_004:sink1_channel
	wire          mux_pipeline_007_source0_startofpacket;                                     // mux_pipeline_007:out_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          mux_pipeline_007_source0_endofpacket;                                       // mux_pipeline_007:out_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          async_fifo_003_out_valid;                                                   // async_fifo_003:out_valid -> mux_pipeline_008:in_valid
	wire  [408:0] async_fifo_003_out_data;                                                    // async_fifo_003:out_data -> mux_pipeline_008:in_data
	wire          async_fifo_003_out_ready;                                                   // mux_pipeline_008:in_ready -> async_fifo_003:out_ready
	wire    [4:0] async_fifo_003_out_channel;                                                 // async_fifo_003:out_channel -> mux_pipeline_008:in_channel
	wire          async_fifo_003_out_startofpacket;                                           // async_fifo_003:out_startofpacket -> mux_pipeline_008:in_startofpacket
	wire          async_fifo_003_out_endofpacket;                                             // async_fifo_003:out_endofpacket -> mux_pipeline_008:in_endofpacket
	wire          mux_pipeline_008_source0_valid;                                             // mux_pipeline_008:out_valid -> rsp_mux:sink0_valid
	wire  [408:0] mux_pipeline_008_source0_data;                                              // mux_pipeline_008:out_data -> rsp_mux:sink0_data
	wire          mux_pipeline_008_source0_ready;                                             // rsp_mux:sink0_ready -> mux_pipeline_008:out_ready
	wire    [4:0] mux_pipeline_008_source0_channel;                                           // mux_pipeline_008:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_008_source0_startofpacket;                                     // mux_pipeline_008:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mux_pipeline_008_source0_endofpacket;                                       // mux_pipeline_008:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                   // rsp_demux_001:src0_valid -> mux_pipeline_009:in_valid
	wire  [408:0] rsp_demux_001_src0_data;                                                    // rsp_demux_001:src0_data -> mux_pipeline_009:in_data
	wire          rsp_demux_001_src0_ready;                                                   // mux_pipeline_009:in_ready -> rsp_demux_001:src0_ready
	wire    [4:0] rsp_demux_001_src0_channel;                                                 // rsp_demux_001:src0_channel -> mux_pipeline_009:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                           // rsp_demux_001:src0_startofpacket -> mux_pipeline_009:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                             // rsp_demux_001:src0_endofpacket -> mux_pipeline_009:in_endofpacket
	wire          mux_pipeline_009_source0_valid;                                             // mux_pipeline_009:out_valid -> rsp_mux:sink1_valid
	wire  [408:0] mux_pipeline_009_source0_data;                                              // mux_pipeline_009:out_data -> rsp_mux:sink1_data
	wire          mux_pipeline_009_source0_ready;                                             // rsp_mux:sink1_ready -> mux_pipeline_009:out_ready
	wire    [4:0] mux_pipeline_009_source0_channel;                                           // mux_pipeline_009:out_channel -> rsp_mux:sink1_channel
	wire          mux_pipeline_009_source0_startofpacket;                                     // mux_pipeline_009:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          mux_pipeline_009_source0_endofpacket;                                       // mux_pipeline_009:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                   // rsp_demux_002:src0_valid -> mux_pipeline_010:in_valid
	wire  [408:0] rsp_demux_002_src0_data;                                                    // rsp_demux_002:src0_data -> mux_pipeline_010:in_data
	wire          rsp_demux_002_src0_ready;                                                   // mux_pipeline_010:in_ready -> rsp_demux_002:src0_ready
	wire    [4:0] rsp_demux_002_src0_channel;                                                 // rsp_demux_002:src0_channel -> mux_pipeline_010:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                           // rsp_demux_002:src0_startofpacket -> mux_pipeline_010:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                             // rsp_demux_002:src0_endofpacket -> mux_pipeline_010:in_endofpacket
	wire          mux_pipeline_010_source0_valid;                                             // mux_pipeline_010:out_valid -> rsp_mux:sink2_valid
	wire  [408:0] mux_pipeline_010_source0_data;                                              // mux_pipeline_010:out_data -> rsp_mux:sink2_data
	wire          mux_pipeline_010_source0_ready;                                             // rsp_mux:sink2_ready -> mux_pipeline_010:out_ready
	wire    [4:0] mux_pipeline_010_source0_channel;                                           // mux_pipeline_010:out_channel -> rsp_mux:sink2_channel
	wire          mux_pipeline_010_source0_startofpacket;                                     // mux_pipeline_010:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          mux_pipeline_010_source0_endofpacket;                                       // mux_pipeline_010:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                   // rsp_demux_003:src0_valid -> mux_pipeline_011:in_valid
	wire  [408:0] rsp_demux_003_src0_data;                                                    // rsp_demux_003:src0_data -> mux_pipeline_011:in_data
	wire          rsp_demux_003_src0_ready;                                                   // mux_pipeline_011:in_ready -> rsp_demux_003:src0_ready
	wire    [4:0] rsp_demux_003_src0_channel;                                                 // rsp_demux_003:src0_channel -> mux_pipeline_011:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                           // rsp_demux_003:src0_startofpacket -> mux_pipeline_011:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                             // rsp_demux_003:src0_endofpacket -> mux_pipeline_011:in_endofpacket
	wire          mux_pipeline_011_source0_valid;                                             // mux_pipeline_011:out_valid -> rsp_mux:sink3_valid
	wire  [408:0] mux_pipeline_011_source0_data;                                              // mux_pipeline_011:out_data -> rsp_mux:sink3_data
	wire          mux_pipeline_011_source0_ready;                                             // rsp_mux:sink3_ready -> mux_pipeline_011:out_ready
	wire    [4:0] mux_pipeline_011_source0_channel;                                           // mux_pipeline_011:out_channel -> rsp_mux:sink3_channel
	wire          mux_pipeline_011_source0_startofpacket;                                     // mux_pipeline_011:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          mux_pipeline_011_source0_endofpacket;                                       // mux_pipeline_011:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          async_fifo_004_out_valid;                                                   // async_fifo_004:out_valid -> mux_pipeline_012:in_valid
	wire  [408:0] async_fifo_004_out_data;                                                    // async_fifo_004:out_data -> mux_pipeline_012:in_data
	wire          async_fifo_004_out_ready;                                                   // mux_pipeline_012:in_ready -> async_fifo_004:out_ready
	wire    [4:0] async_fifo_004_out_channel;                                                 // async_fifo_004:out_channel -> mux_pipeline_012:in_channel
	wire          async_fifo_004_out_startofpacket;                                           // async_fifo_004:out_startofpacket -> mux_pipeline_012:in_startofpacket
	wire          async_fifo_004_out_endofpacket;                                             // async_fifo_004:out_endofpacket -> mux_pipeline_012:in_endofpacket
	wire          mux_pipeline_012_source0_valid;                                             // mux_pipeline_012:out_valid -> rsp_mux_001:sink0_valid
	wire  [408:0] mux_pipeline_012_source0_data;                                              // mux_pipeline_012:out_data -> rsp_mux_001:sink0_data
	wire          mux_pipeline_012_source0_ready;                                             // rsp_mux_001:sink0_ready -> mux_pipeline_012:out_ready
	wire    [4:0] mux_pipeline_012_source0_channel;                                           // mux_pipeline_012:out_channel -> rsp_mux_001:sink0_channel
	wire          mux_pipeline_012_source0_startofpacket;                                     // mux_pipeline_012:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          mux_pipeline_012_source0_endofpacket;                                       // mux_pipeline_012:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_004_src0_valid;                                                   // rsp_demux_004:src0_valid -> mux_pipeline_013:in_valid
	wire  [408:0] rsp_demux_004_src0_data;                                                    // rsp_demux_004:src0_data -> mux_pipeline_013:in_data
	wire          rsp_demux_004_src0_ready;                                                   // mux_pipeline_013:in_ready -> rsp_demux_004:src0_ready
	wire    [4:0] rsp_demux_004_src0_channel;                                                 // rsp_demux_004:src0_channel -> mux_pipeline_013:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                           // rsp_demux_004:src0_startofpacket -> mux_pipeline_013:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                             // rsp_demux_004:src0_endofpacket -> mux_pipeline_013:in_endofpacket
	wire          mux_pipeline_013_source0_valid;                                             // mux_pipeline_013:out_valid -> rsp_mux_001:sink1_valid
	wire  [408:0] mux_pipeline_013_source0_data;                                              // mux_pipeline_013:out_data -> rsp_mux_001:sink1_data
	wire          mux_pipeline_013_source0_ready;                                             // rsp_mux_001:sink1_ready -> mux_pipeline_013:out_ready
	wire    [4:0] mux_pipeline_013_source0_channel;                                           // mux_pipeline_013:out_channel -> rsp_mux_001:sink1_channel
	wire          mux_pipeline_013_source0_startofpacket;                                     // mux_pipeline_013:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          mux_pipeline_013_source0_endofpacket;                                       // mux_pipeline_013:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          async_fifo_005_out_valid;                                                   // async_fifo_005:out_valid -> mux_pipeline_014:in_valid
	wire  [156:0] async_fifo_005_out_data;                                                    // async_fifo_005:out_data -> mux_pipeline_014:in_data
	wire          async_fifo_005_out_ready;                                                   // mux_pipeline_014:in_ready -> async_fifo_005:out_ready
	wire    [4:0] async_fifo_005_out_channel;                                                 // async_fifo_005:out_channel -> mux_pipeline_014:in_channel
	wire          async_fifo_005_out_startofpacket;                                           // async_fifo_005:out_startofpacket -> mux_pipeline_014:in_startofpacket
	wire          async_fifo_005_out_endofpacket;                                             // async_fifo_005:out_endofpacket -> mux_pipeline_014:in_endofpacket
	wire          mux_pipeline_014_source0_valid;                                             // mux_pipeline_014:out_valid -> rsp_mux_002:sink0_valid
	wire  [156:0] mux_pipeline_014_source0_data;                                              // mux_pipeline_014:out_data -> rsp_mux_002:sink0_data
	wire          mux_pipeline_014_source0_ready;                                             // rsp_mux_002:sink0_ready -> mux_pipeline_014:out_ready
	wire    [4:0] mux_pipeline_014_source0_channel;                                           // mux_pipeline_014:out_channel -> rsp_mux_002:sink0_channel
	wire          mux_pipeline_014_source0_startofpacket;                                     // mux_pipeline_014:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          mux_pipeline_014_source0_endofpacket;                                       // mux_pipeline_014:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          onchip_memory2_0_s1_to_dut_rxm_bar2_rsp_width_adapter_src_valid;            // onchip_memory2_0_s1_to_DUT_rxm_bar2_rsp_width_adapter:out_valid -> mux_pipeline_015:in_valid
	wire  [156:0] onchip_memory2_0_s1_to_dut_rxm_bar2_rsp_width_adapter_src_data;             // onchip_memory2_0_s1_to_DUT_rxm_bar2_rsp_width_adapter:out_data -> mux_pipeline_015:in_data
	wire          onchip_memory2_0_s1_to_dut_rxm_bar2_rsp_width_adapter_src_ready;            // mux_pipeline_015:in_ready -> onchip_memory2_0_s1_to_DUT_rxm_bar2_rsp_width_adapter:out_ready
	wire    [4:0] onchip_memory2_0_s1_to_dut_rxm_bar2_rsp_width_adapter_src_channel;          // onchip_memory2_0_s1_to_DUT_rxm_bar2_rsp_width_adapter:out_channel -> mux_pipeline_015:in_channel
	wire          onchip_memory2_0_s1_to_dut_rxm_bar2_rsp_width_adapter_src_startofpacket;    // onchip_memory2_0_s1_to_DUT_rxm_bar2_rsp_width_adapter:out_startofpacket -> mux_pipeline_015:in_startofpacket
	wire          onchip_memory2_0_s1_to_dut_rxm_bar2_rsp_width_adapter_src_endofpacket;      // onchip_memory2_0_s1_to_DUT_rxm_bar2_rsp_width_adapter:out_endofpacket -> mux_pipeline_015:in_endofpacket
	wire          mux_pipeline_015_source0_valid;                                             // mux_pipeline_015:out_valid -> rsp_mux_002:sink1_valid
	wire  [156:0] mux_pipeline_015_source0_data;                                              // mux_pipeline_015:out_data -> rsp_mux_002:sink1_data
	wire          mux_pipeline_015_source0_ready;                                             // rsp_mux_002:sink1_ready -> mux_pipeline_015:out_ready
	wire    [4:0] mux_pipeline_015_source0_channel;                                           // mux_pipeline_015:out_channel -> rsp_mux_002:sink1_channel
	wire          mux_pipeline_015_source0_startofpacket;                                     // mux_pipeline_015:out_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          mux_pipeline_015_source0_endofpacket;                                       // mux_pipeline_015:out_endofpacket -> rsp_mux_002:sink1_endofpacket

	top_hw_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (5),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) dut_dma_rd_master_translator (
		.clk                    (DUT_coreclkout_hip_clk),                                               //   input,    width = 1,                       clk.clk
		.reset                  (onchip_memory2_0_reset2_reset_bridge_in_reset_reset),                  //   input,    width = 1,                     reset.reset
		.uav_address            (dut_dma_rd_master_translator_avalon_universal_master_0_address),       //  output,   width = 64, avalon_universal_master_0.address
		.uav_burstcount         (dut_dma_rd_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 10,                          .burstcount
		.uav_read               (dut_dma_rd_master_translator_avalon_universal_master_0_read),          //  output,    width = 1,                          .read
		.uav_write              (dut_dma_rd_master_translator_avalon_universal_master_0_write),         //  output,    width = 1,                          .write
		.uav_waitrequest        (dut_dma_rd_master_translator_avalon_universal_master_0_waitrequest),   //   input,    width = 1,                          .waitrequest
		.uav_readdatavalid      (dut_dma_rd_master_translator_avalon_universal_master_0_readdatavalid), //   input,    width = 1,                          .readdatavalid
		.uav_byteenable         (dut_dma_rd_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 32,                          .byteenable
		.uav_readdata           (dut_dma_rd_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 256,                          .readdata
		.uav_writedata          (dut_dma_rd_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 256,                          .writedata
		.uav_lock               (dut_dma_rd_master_translator_avalon_universal_master_0_lock),          //  output,    width = 1,                          .lock
		.uav_debugaccess        (dut_dma_rd_master_translator_avalon_universal_master_0_debugaccess),   //  output,    width = 1,                          .debugaccess
		.av_address             (DUT_dma_rd_master_address),                                            //   input,   width = 64,      avalon_anti_master_0.address
		.av_waitrequest         (DUT_dma_rd_master_waitrequest),                                        //  output,    width = 1,                          .waitrequest
		.av_burstcount          (DUT_dma_rd_master_burstcount),                                         //   input,    width = 5,                          .burstcount
		.av_byteenable          (DUT_dma_rd_master_byteenable),                                         //   input,   width = 32,                          .byteenable
		.av_write               (DUT_dma_rd_master_write),                                              //   input,    width = 1,                          .write
		.av_writedata           (DUT_dma_rd_master_writedata),                                          //   input,  width = 256,                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                 // (terminated),                                         
		.av_begintransfer       (1'b0),                                                                 // (terminated),                                         
		.av_chipselect          (1'b0),                                                                 // (terminated),                                         
		.av_read                (1'b0),                                                                 // (terminated),                                         
		.av_readdata            (),                                                                     // (terminated),                                         
		.av_readdatavalid       (),                                                                     // (terminated),                                         
		.av_lock                (1'b0),                                                                 // (terminated),                                         
		.av_debugaccess         (1'b0),                                                                 // (terminated),                                         
		.uav_clken              (),                                                                     // (terminated),                                         
		.av_clken               (1'b1),                                                                 // (terminated),                                         
		.uav_response           (2'b00),                                                                // (terminated),                                         
		.av_response            (),                                                                     // (terminated),                                         
		.uav_writeresponsevalid (1'b0),                                                                 // (terminated),                                         
		.av_writeresponsevalid  ()                                                                      // (terminated),                                         
	);

	top_hw_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (5),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) dut_dma_wr_master_translator (
		.clk                    (DUT_coreclkout_hip_clk),                                                                                                                                                                                                                                                //   input,    width = 1,                       clk.clk
		.reset                  (onchip_memory2_0_reset2_reset_bridge_in_reset_reset),                                                                                                                                                                                                                   //   input,    width = 1,                     reset.reset
		.uav_address            (dut_dma_wr_master_translator_avalon_universal_master_0_address),                                                                                                                                                                                                        //  output,   width = 64, avalon_universal_master_0.address
		.uav_burstcount         (dut_dma_wr_master_translator_avalon_universal_master_0_burstcount),                                                                                                                                                                                                     //  output,   width = 10,                          .burstcount
		.uav_read               (dut_dma_wr_master_translator_avalon_universal_master_0_read),                                                                                                                                                                                                           //  output,    width = 1,                          .read
		.uav_write              (dut_dma_wr_master_translator_avalon_universal_master_0_write),                                                                                                                                                                                                          //  output,    width = 1,                          .write
		.uav_waitrequest        (dut_dma_wr_master_translator_avalon_universal_master_0_waitrequest),                                                                                                                                                                                                    //   input,    width = 1,                          .waitrequest
		.uav_readdatavalid      (dut_dma_wr_master_translator_avalon_universal_master_0_readdatavalid),                                                                                                                                                                                                  //   input,    width = 1,                          .readdatavalid
		.uav_byteenable         (dut_dma_wr_master_translator_avalon_universal_master_0_byteenable),                                                                                                                                                                                                     //  output,   width = 32,                          .byteenable
		.uav_readdata           (dut_dma_wr_master_translator_avalon_universal_master_0_readdata),                                                                                                                                                                                                       //   input,  width = 256,                          .readdata
		.uav_writedata          (dut_dma_wr_master_translator_avalon_universal_master_0_writedata),                                                                                                                                                                                                      //  output,  width = 256,                          .writedata
		.uav_lock               (dut_dma_wr_master_translator_avalon_universal_master_0_lock),                                                                                                                                                                                                           //  output,    width = 1,                          .lock
		.uav_debugaccess        (dut_dma_wr_master_translator_avalon_universal_master_0_debugaccess),                                                                                                                                                                                                    //  output,    width = 1,                          .debugaccess
		.av_address             (DUT_dma_wr_master_address),                                                                                                                                                                                                                                             //   input,   width = 64,      avalon_anti_master_0.address
		.av_waitrequest         (DUT_dma_wr_master_waitrequest),                                                                                                                                                                                                                                         //  output,    width = 1,                          .waitrequest
		.av_burstcount          (DUT_dma_wr_master_burstcount),                                                                                                                                                                                                                                          //   input,    width = 5,                          .burstcount
		.av_read                (DUT_dma_wr_master_read),                                                                                                                                                                                                                                                //   input,    width = 1,                          .read
		.av_readdata            (DUT_dma_wr_master_readdata),                                                                                                                                                                                                                                            //  output,  width = 256,                          .readdata
		.av_readdatavalid       (DUT_dma_wr_master_readdatavalid),                                                                                                                                                                                                                                       //  output,    width = 1,                          .readdatavalid
		.av_byteenable          (32'b11111111111111111111111111111111),                                                                                                                                                                                                                                  // (terminated),                                         
		.av_beginbursttransfer  (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.av_begintransfer       (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.av_chipselect          (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.av_write               (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.av_writedata           (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), // (terminated),                                         
		.av_lock                (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.av_debugaccess         (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.uav_clken              (),                                                                                                                                                                                                                                                                      // (terminated),                                         
		.av_clken               (1'b1),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.uav_response           (2'b00),                                                                                                                                                                                                                                                                 // (terminated),                                         
		.av_response            (),                                                                                                                                                                                                                                                                      // (terminated),                                         
		.uav_writeresponsevalid (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.av_writeresponsevalid  ()                                                                                                                                                                                                                                                                       // (terminated),                                         
	);

	top_hw_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) dut_rxm_bar2_translator (
		.clk                    (DUT_coreclkout_hip_clk),                                          //   input,   width = 1,                       clk.clk
		.reset                  (onchip_memory2_0_reset2_reset_bridge_in_reset_reset),             //   input,   width = 1,                     reset.reset
		.uav_address            (dut_rxm_bar2_translator_avalon_universal_master_0_address),       //  output,  width = 64, avalon_universal_master_0.address
		.uav_burstcount         (dut_rxm_bar2_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (dut_rxm_bar2_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (dut_rxm_bar2_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (dut_rxm_bar2_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (dut_rxm_bar2_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (dut_rxm_bar2_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (dut_rxm_bar2_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (dut_rxm_bar2_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (dut_rxm_bar2_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (dut_rxm_bar2_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (DUT_rxm_bar2_address),                                            //   input,  width = 64,      avalon_anti_master_0.address
		.av_waitrequest         (DUT_rxm_bar2_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_byteenable          (DUT_rxm_bar2_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (DUT_rxm_bar2_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (DUT_rxm_bar2_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (DUT_rxm_bar2_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (DUT_rxm_bar2_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (DUT_rxm_bar2_writedata),                                          //   input,  width = 32,                          .writedata
		.av_burstcount          (1'b1),                                                            // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                            // (terminated),                                        
		.av_begintransfer       (1'b0),                                                            // (terminated),                                        
		.av_chipselect          (1'b0),                                                            // (terminated),                                        
		.av_lock                (1'b0),                                                            // (terminated),                                        
		.av_debugaccess         (1'b0),                                                            // (terminated),                                        
		.uav_clken              (),                                                                // (terminated),                                        
		.av_clken               (1'b1),                                                            // (terminated),                                        
		.uav_response           (2'b00),                                                           // (terminated),                                        
		.av_response            (),                                                                // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                            // (terminated),                                        
		.av_writeresponsevalid  ()                                                                 // (terminated),                                        
	);

	top_hw_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (22),
		.AV_DATA_W                      (512),
		.UAV_DATA_W                     (512),
		.AV_BURSTCOUNT_W                (7),
		.AV_BYTEENABLE_W                (64),
		.UAV_BYTEENABLE_W               (64),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (13),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (64),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) emif_0_ctrl_amm_0_translator (
		.clk                    (emif_0_emif_usr_clk_clk),                                        //   input,    width = 1,                      clk.clk
		.reset                  (emif_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,                    reset.reset
		.uav_address            (emif_0_ctrl_amm_0_agent_m0_address),                             //   input,   width = 64, avalon_universal_slave_0.address
		.uav_burstcount         (emif_0_ctrl_amm_0_agent_m0_burstcount),                          //   input,   width = 13,                         .burstcount
		.uav_read               (emif_0_ctrl_amm_0_agent_m0_read),                                //   input,    width = 1,                         .read
		.uav_write              (emif_0_ctrl_amm_0_agent_m0_write),                               //   input,    width = 1,                         .write
		.uav_waitrequest        (emif_0_ctrl_amm_0_agent_m0_waitrequest),                         //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (emif_0_ctrl_amm_0_agent_m0_readdatavalid),                       //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (emif_0_ctrl_amm_0_agent_m0_byteenable),                          //   input,   width = 64,                         .byteenable
		.uav_readdata           (emif_0_ctrl_amm_0_agent_m0_readdata),                            //  output,  width = 512,                         .readdata
		.uav_writedata          (emif_0_ctrl_amm_0_agent_m0_writedata),                           //   input,  width = 512,                         .writedata
		.uav_lock               (emif_0_ctrl_amm_0_agent_m0_lock),                                //   input,    width = 1,                         .lock
		.uav_debugaccess        (emif_0_ctrl_amm_0_agent_m0_debugaccess),                         //   input,    width = 1,                         .debugaccess
		.av_address             (emif_0_ctrl_amm_0_address),                                      //  output,   width = 22,      avalon_anti_slave_0.address
		.av_write               (emif_0_ctrl_amm_0_write),                                        //  output,    width = 1,                         .write
		.av_read                (emif_0_ctrl_amm_0_read),                                         //  output,    width = 1,                         .read
		.av_readdata            (emif_0_ctrl_amm_0_readdata),                                     //   input,  width = 512,                         .readdata
		.av_writedata           (emif_0_ctrl_amm_0_writedata),                                    //  output,  width = 512,                         .writedata
		.av_burstcount          (emif_0_ctrl_amm_0_burstcount),                                   //  output,    width = 7,                         .burstcount
		.av_byteenable          (emif_0_ctrl_amm_0_byteenable),                                   //  output,   width = 64,                         .byteenable
		.av_readdatavalid       (emif_0_ctrl_amm_0_readdatavalid),                                //   input,    width = 1,                         .readdatavalid
		.av_waitrequest         (emif_0_ctrl_amm_0_waitrequest),                                  //   input,    width = 1,                         .waitrequest
		.av_begintransfer       (),                                                               // (terminated),                                        
		.av_beginbursttransfer  (),                                                               // (terminated),                                        
		.av_writebyteenable     (),                                                               // (terminated),                                        
		.av_lock                (),                                                               // (terminated),                                        
		.av_chipselect          (),                                                               // (terminated),                                        
		.av_clken               (),                                                               // (terminated),                                        
		.uav_clken              (1'b0),                                                           // (terminated),                                        
		.av_debugaccess         (),                                                               // (terminated),                                        
		.av_outputenable        (),                                                               // (terminated),                                        
		.uav_response           (),                                                               // (terminated),                                        
		.av_response            (2'b00),                                                          // (terminated),                                        
		.uav_writeresponsevalid (),                                                               // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                            // (terminated),                                        
	);

	top_hw_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (5),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (10),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) dut_rd_dts_slave_translator (
		.clk                    (DUT_coreclkout_hip_clk),                                                                                                                                                                                                                                                //   input,    width = 1,                      clk.clk
		.reset                  (onchip_memory2_0_reset2_reset_bridge_in_reset_reset),                                                                                                                                                                                                                   //   input,    width = 1,                    reset.reset
		.uav_address            (dut_rd_dts_slave_agent_m0_address),                                                                                                                                                                                                                                     //   input,   width = 64, avalon_universal_slave_0.address
		.uav_burstcount         (dut_rd_dts_slave_agent_m0_burstcount),                                                                                                                                                                                                                                  //   input,   width = 10,                         .burstcount
		.uav_read               (dut_rd_dts_slave_agent_m0_read),                                                                                                                                                                                                                                        //   input,    width = 1,                         .read
		.uav_write              (dut_rd_dts_slave_agent_m0_write),                                                                                                                                                                                                                                       //   input,    width = 1,                         .write
		.uav_waitrequest        (dut_rd_dts_slave_agent_m0_waitrequest),                                                                                                                                                                                                                                 //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (dut_rd_dts_slave_agent_m0_readdatavalid),                                                                                                                                                                                                                               //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (dut_rd_dts_slave_agent_m0_byteenable),                                                                                                                                                                                                                                  //   input,   width = 32,                         .byteenable
		.uav_readdata           (dut_rd_dts_slave_agent_m0_readdata),                                                                                                                                                                                                                                    //  output,  width = 256,                         .readdata
		.uav_writedata          (dut_rd_dts_slave_agent_m0_writedata),                                                                                                                                                                                                                                   //   input,  width = 256,                         .writedata
		.uav_lock               (dut_rd_dts_slave_agent_m0_lock),                                                                                                                                                                                                                                        //   input,    width = 1,                         .lock
		.uav_debugaccess        (dut_rd_dts_slave_agent_m0_debugaccess),                                                                                                                                                                                                                                 //   input,    width = 1,                         .debugaccess
		.av_address             (DUT_rd_dts_slave_address),                                                                                                                                                                                                                                              //  output,    width = 8,      avalon_anti_slave_0.address
		.av_write               (DUT_rd_dts_slave_write),                                                                                                                                                                                                                                                //  output,    width = 1,                         .write
		.av_writedata           (DUT_rd_dts_slave_writedata),                                                                                                                                                                                                                                            //  output,  width = 256,                         .writedata
		.av_burstcount          (DUT_rd_dts_slave_burstcount),                                                                                                                                                                                                                                           //  output,    width = 5,                         .burstcount
		.av_waitrequest         (DUT_rd_dts_slave_waitrequest),                                                                                                                                                                                                                                          //   input,    width = 1,                         .waitrequest
		.av_chipselect          (DUT_rd_dts_slave_chipselect),                                                                                                                                                                                                                                           //  output,    width = 1,                         .chipselect
		.av_read                (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_readdata            (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), // (terminated),                                        
		.av_begintransfer       (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_beginbursttransfer  (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_byteenable          (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_readdatavalid       (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                        
		.av_writebyteenable     (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_lock                (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_clken               (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.uav_clken              (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                        
		.av_debugaccess         (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_outputenable        (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.uav_response           (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_response            (2'b00),                                                                                                                                                                                                                                                                 // (terminated),                                        
		.uav_writeresponsevalid (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                                                                                                                                                                                                                                   // (terminated),                                        
	);

	top_hw_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (11),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) onchip_memory2_0_s2_translator (
		.clk                    (DUT_coreclkout_hip_clk),                              //   input,    width = 1,                      clk.clk
		.reset                  (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1,                    reset.reset
		.uav_address            (onchip_memory2_0_s2_agent_m0_address),                //   input,   width = 64, avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_0_s2_agent_m0_burstcount),             //   input,    width = 6,                         .burstcount
		.uav_read               (onchip_memory2_0_s2_agent_m0_read),                   //   input,    width = 1,                         .read
		.uav_write              (onchip_memory2_0_s2_agent_m0_write),                  //   input,    width = 1,                         .write
		.uav_waitrequest        (onchip_memory2_0_s2_agent_m0_waitrequest),            //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_0_s2_agent_m0_readdatavalid),          //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (onchip_memory2_0_s2_agent_m0_byteenable),             //   input,   width = 32,                         .byteenable
		.uav_readdata           (onchip_memory2_0_s2_agent_m0_readdata),               //  output,  width = 256,                         .readdata
		.uav_writedata          (onchip_memory2_0_s2_agent_m0_writedata),              //   input,  width = 256,                         .writedata
		.uav_lock               (onchip_memory2_0_s2_agent_m0_lock),                   //   input,    width = 1,                         .lock
		.uav_debugaccess        (onchip_memory2_0_s2_agent_m0_debugaccess),            //   input,    width = 1,                         .debugaccess
		.av_address             (onchip_memory2_0_s2_address),                         //  output,   width = 11,      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_0_s2_write),                           //  output,    width = 1,                         .write
		.av_readdata            (onchip_memory2_0_s2_readdata),                        //   input,  width = 256,                         .readdata
		.av_writedata           (onchip_memory2_0_s2_writedata),                       //  output,  width = 256,                         .writedata
		.av_byteenable          (onchip_memory2_0_s2_byteenable),                      //  output,   width = 32,                         .byteenable
		.av_chipselect          (onchip_memory2_0_s2_chipselect),                      //  output,    width = 1,                         .chipselect
		.av_clken               (onchip_memory2_0_s2_clken),                           //  output,    width = 1,                         .clken
		.av_read                (),                                                    // (terminated),                                        
		.av_begintransfer       (),                                                    // (terminated),                                        
		.av_beginbursttransfer  (),                                                    // (terminated),                                        
		.av_burstcount          (),                                                    // (terminated),                                        
		.av_readdatavalid       (1'b0),                                                // (terminated),                                        
		.av_waitrequest         (1'b0),                                                // (terminated),                                        
		.av_writebyteenable     (),                                                    // (terminated),                                        
		.av_lock                (),                                                    // (terminated),                                        
		.uav_clken              (1'b0),                                                // (terminated),                                        
		.av_debugaccess         (),                                                    // (terminated),                                        
		.av_outputenable        (),                                                    // (terminated),                                        
		.uav_response           (),                                                    // (terminated),                                        
		.av_response            (2'b00),                                               // (terminated),                                        
		.uav_writeresponsevalid (),                                                    // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                 // (terminated),                                        
	);

	top_hw_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (5),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (10),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) dut_wr_dts_slave_translator (
		.clk                    (DUT_coreclkout_hip_clk),                                                                                                                                                                                                                                                //   input,    width = 1,                      clk.clk
		.reset                  (onchip_memory2_0_reset2_reset_bridge_in_reset_reset),                                                                                                                                                                                                                   //   input,    width = 1,                    reset.reset
		.uav_address            (dut_wr_dts_slave_agent_m0_address),                                                                                                                                                                                                                                     //   input,   width = 64, avalon_universal_slave_0.address
		.uav_burstcount         (dut_wr_dts_slave_agent_m0_burstcount),                                                                                                                                                                                                                                  //   input,   width = 10,                         .burstcount
		.uav_read               (dut_wr_dts_slave_agent_m0_read),                                                                                                                                                                                                                                        //   input,    width = 1,                         .read
		.uav_write              (dut_wr_dts_slave_agent_m0_write),                                                                                                                                                                                                                                       //   input,    width = 1,                         .write
		.uav_waitrequest        (dut_wr_dts_slave_agent_m0_waitrequest),                                                                                                                                                                                                                                 //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (dut_wr_dts_slave_agent_m0_readdatavalid),                                                                                                                                                                                                                               //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (dut_wr_dts_slave_agent_m0_byteenable),                                                                                                                                                                                                                                  //   input,   width = 32,                         .byteenable
		.uav_readdata           (dut_wr_dts_slave_agent_m0_readdata),                                                                                                                                                                                                                                    //  output,  width = 256,                         .readdata
		.uav_writedata          (dut_wr_dts_slave_agent_m0_writedata),                                                                                                                                                                                                                                   //   input,  width = 256,                         .writedata
		.uav_lock               (dut_wr_dts_slave_agent_m0_lock),                                                                                                                                                                                                                                        //   input,    width = 1,                         .lock
		.uav_debugaccess        (dut_wr_dts_slave_agent_m0_debugaccess),                                                                                                                                                                                                                                 //   input,    width = 1,                         .debugaccess
		.av_address             (DUT_wr_dts_slave_address),                                                                                                                                                                                                                                              //  output,    width = 8,      avalon_anti_slave_0.address
		.av_write               (DUT_wr_dts_slave_write),                                                                                                                                                                                                                                                //  output,    width = 1,                         .write
		.av_writedata           (DUT_wr_dts_slave_writedata),                                                                                                                                                                                                                                            //  output,  width = 256,                         .writedata
		.av_burstcount          (DUT_wr_dts_slave_burstcount),                                                                                                                                                                                                                                           //  output,    width = 5,                         .burstcount
		.av_waitrequest         (DUT_wr_dts_slave_waitrequest),                                                                                                                                                                                                                                          //   input,    width = 1,                         .waitrequest
		.av_chipselect          (DUT_wr_dts_slave_chipselect),                                                                                                                                                                                                                                           //  output,    width = 1,                         .chipselect
		.av_read                (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_readdata            (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), // (terminated),                                        
		.av_begintransfer       (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_beginbursttransfer  (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_byteenable          (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_readdatavalid       (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                        
		.av_writebyteenable     (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_lock                (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_clken               (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.uav_clken              (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                        
		.av_debugaccess         (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_outputenable        (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.uav_response           (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_response            (2'b00),                                                                                                                                                                                                                                                                 // (terminated),                                        
		.uav_writeresponsevalid (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                                                                                                                                                                                                                                   // (terminated),                                        
	);

	top_hw_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (11),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) onchip_memory2_0_s1_translator (
		.clk                    (DUT_coreclkout_hip_clk),                              //   input,    width = 1,                      clk.clk
		.reset                  (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1,                    reset.reset
		.uav_address            (onchip_memory2_0_s1_agent_m0_address),                //   input,   width = 64, avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_0_s1_agent_m0_burstcount),             //   input,    width = 6,                         .burstcount
		.uav_read               (onchip_memory2_0_s1_agent_m0_read),                   //   input,    width = 1,                         .read
		.uav_write              (onchip_memory2_0_s1_agent_m0_write),                  //   input,    width = 1,                         .write
		.uav_waitrequest        (onchip_memory2_0_s1_agent_m0_waitrequest),            //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_0_s1_agent_m0_readdatavalid),          //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (onchip_memory2_0_s1_agent_m0_byteenable),             //   input,   width = 32,                         .byteenable
		.uav_readdata           (onchip_memory2_0_s1_agent_m0_readdata),               //  output,  width = 256,                         .readdata
		.uav_writedata          (onchip_memory2_0_s1_agent_m0_writedata),              //   input,  width = 256,                         .writedata
		.uav_lock               (onchip_memory2_0_s1_agent_m0_lock),                   //   input,    width = 1,                         .lock
		.uav_debugaccess        (onchip_memory2_0_s1_agent_m0_debugaccess),            //   input,    width = 1,                         .debugaccess
		.av_address             (onchip_memory2_0_s1_address),                         //  output,   width = 11,      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_0_s1_write),                           //  output,    width = 1,                         .write
		.av_readdata            (onchip_memory2_0_s1_readdata),                        //   input,  width = 256,                         .readdata
		.av_writedata           (onchip_memory2_0_s1_writedata),                       //  output,  width = 256,                         .writedata
		.av_byteenable          (onchip_memory2_0_s1_byteenable),                      //  output,   width = 32,                         .byteenable
		.av_chipselect          (onchip_memory2_0_s1_chipselect),                      //  output,    width = 1,                         .chipselect
		.av_clken               (onchip_memory2_0_s1_clken),                           //  output,    width = 1,                         .clken
		.av_read                (),                                                    // (terminated),                                        
		.av_begintransfer       (),                                                    // (terminated),                                        
		.av_beginbursttransfer  (),                                                    // (terminated),                                        
		.av_burstcount          (),                                                    // (terminated),                                        
		.av_readdatavalid       (1'b0),                                                // (terminated),                                        
		.av_waitrequest         (1'b0),                                                // (terminated),                                        
		.av_writebyteenable     (),                                                    // (terminated),                                        
		.av_lock                (),                                                    // (terminated),                                        
		.uav_clken              (1'b0),                                                // (terminated),                                        
		.av_debugaccess         (),                                                    // (terminated),                                        
		.av_outputenable        (),                                                    // (terminated),                                        
		.uav_response           (),                                                    // (terminated),                                        
		.av_response            (2'b00),                                               // (terminated),                                        
		.uav_writeresponsevalid (),                                                    // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                 // (terminated),                                        
	);

	top_hw_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (408),
		.PKT_DOMAIN_H              (407),
		.PKT_DOMAIN_L              (406),
		.PKT_SNOOP_H               (405),
		.PKT_SNOOP_L               (402),
		.PKT_BARRIER_H             (401),
		.PKT_BARRIER_L             (400),
		.PKT_ORI_BURST_SIZE_H      (399),
		.PKT_ORI_BURST_SIZE_L      (397),
		.PKT_RESPONSE_STATUS_H     (396),
		.PKT_RESPONSE_STATUS_L     (395),
		.PKT_QOS_H                 (380),
		.PKT_QOS_L                 (380),
		.PKT_DATA_SIDEBAND_H       (378),
		.PKT_DATA_SIDEBAND_L       (378),
		.PKT_ADDR_SIDEBAND_H       (377),
		.PKT_ADDR_SIDEBAND_L       (377),
		.PKT_BURST_TYPE_H          (376),
		.PKT_BURST_TYPE_L          (375),
		.PKT_CACHE_H               (394),
		.PKT_CACHE_L               (391),
		.PKT_THREAD_ID_H           (387),
		.PKT_THREAD_ID_L           (387),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_TRANS_EXCLUSIVE       (357),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (379),
		.PKT_PROTECTION_H          (390),
		.PKT_PROTECTION_L          (388),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (383),
		.PKT_SRC_ID_L              (381),
		.PKT_DEST_ID_H             (386),
		.PKT_DEST_ID_L             (384),
		.ST_DATA_W                 (409),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) dut_dma_rd_master_agent (
		.clk                   (DUT_coreclkout_hip_clk),                                               //   input,    width = 1,       clk.clk
		.reset                 (onchip_memory2_0_reset2_reset_bridge_in_reset_reset),                  //   input,    width = 1, clk_reset.reset
		.av_address            (dut_dma_rd_master_translator_avalon_universal_master_0_address),       //   input,   width = 64,        av.address
		.av_write              (dut_dma_rd_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (dut_dma_rd_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (dut_dma_rd_master_translator_avalon_universal_master_0_writedata),     //   input,  width = 256,          .writedata
		.av_readdata           (dut_dma_rd_master_translator_avalon_universal_master_0_readdata),      //  output,  width = 256,          .readdata
		.av_waitrequest        (dut_dma_rd_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (dut_dma_rd_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (dut_dma_rd_master_translator_avalon_universal_master_0_byteenable),    //   input,   width = 32,          .byteenable
		.av_burstcount         (dut_dma_rd_master_translator_avalon_universal_master_0_burstcount),    //   input,   width = 10,          .burstcount
		.av_debugaccess        (dut_dma_rd_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (dut_dma_rd_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (dut_dma_rd_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (dut_dma_rd_master_agent_cp_data),                                      //  output,  width = 409,          .data
		.cp_startofpacket      (dut_dma_rd_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (dut_dma_rd_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (dut_dma_rd_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_src_valid),                                                    //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_src_data),                                                     //   input,  width = 409,          .data
		.rp_channel            (rsp_mux_src_channel),                                                  //   input,    width = 5,          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                    //  output,    width = 1,          .ready
		.av_response           (),                                                                     // (terminated),                         
		.av_writeresponsevalid ()                                                                      // (terminated),                         
	);

	top_hw_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (408),
		.PKT_DOMAIN_H              (407),
		.PKT_DOMAIN_L              (406),
		.PKT_SNOOP_H               (405),
		.PKT_SNOOP_L               (402),
		.PKT_BARRIER_H             (401),
		.PKT_BARRIER_L             (400),
		.PKT_ORI_BURST_SIZE_H      (399),
		.PKT_ORI_BURST_SIZE_L      (397),
		.PKT_RESPONSE_STATUS_H     (396),
		.PKT_RESPONSE_STATUS_L     (395),
		.PKT_QOS_H                 (380),
		.PKT_QOS_L                 (380),
		.PKT_DATA_SIDEBAND_H       (378),
		.PKT_DATA_SIDEBAND_L       (378),
		.PKT_ADDR_SIDEBAND_H       (377),
		.PKT_ADDR_SIDEBAND_L       (377),
		.PKT_BURST_TYPE_H          (376),
		.PKT_BURST_TYPE_L          (375),
		.PKT_CACHE_H               (394),
		.PKT_CACHE_L               (391),
		.PKT_THREAD_ID_H           (387),
		.PKT_THREAD_ID_L           (387),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_TRANS_EXCLUSIVE       (357),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (379),
		.PKT_PROTECTION_H          (390),
		.PKT_PROTECTION_L          (388),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (383),
		.PKT_SRC_ID_L              (381),
		.PKT_DEST_ID_H             (386),
		.PKT_DEST_ID_L             (384),
		.ST_DATA_W                 (409),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) dut_dma_wr_master_agent (
		.clk                   (DUT_coreclkout_hip_clk),                                               //   input,    width = 1,       clk.clk
		.reset                 (onchip_memory2_0_reset2_reset_bridge_in_reset_reset),                  //   input,    width = 1, clk_reset.reset
		.av_address            (dut_dma_wr_master_translator_avalon_universal_master_0_address),       //   input,   width = 64,        av.address
		.av_write              (dut_dma_wr_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (dut_dma_wr_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (dut_dma_wr_master_translator_avalon_universal_master_0_writedata),     //   input,  width = 256,          .writedata
		.av_readdata           (dut_dma_wr_master_translator_avalon_universal_master_0_readdata),      //  output,  width = 256,          .readdata
		.av_waitrequest        (dut_dma_wr_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (dut_dma_wr_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (dut_dma_wr_master_translator_avalon_universal_master_0_byteenable),    //   input,   width = 32,          .byteenable
		.av_burstcount         (dut_dma_wr_master_translator_avalon_universal_master_0_burstcount),    //   input,   width = 10,          .burstcount
		.av_debugaccess        (dut_dma_wr_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (dut_dma_wr_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (dut_dma_wr_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (dut_dma_wr_master_agent_cp_data),                                      //  output,  width = 409,          .data
		.cp_startofpacket      (dut_dma_wr_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (dut_dma_wr_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (dut_dma_wr_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (dut_dma_wr_master_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (dut_dma_wr_master_limiter_rsp_src_data),                               //   input,  width = 409,          .data
		.rp_channel            (dut_dma_wr_master_limiter_rsp_src_channel),                            //   input,    width = 5,          .channel
		.rp_startofpacket      (dut_dma_wr_master_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (dut_dma_wr_master_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (dut_dma_wr_master_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                     // (terminated),                         
		.av_writeresponsevalid ()                                                                      // (terminated),                         
	);

	top_hw_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (156),
		.PKT_DOMAIN_H              (155),
		.PKT_DOMAIN_L              (154),
		.PKT_SNOOP_H               (153),
		.PKT_SNOOP_L               (150),
		.PKT_BARRIER_H             (149),
		.PKT_BARRIER_L             (148),
		.PKT_ORI_BURST_SIZE_H      (147),
		.PKT_ORI_BURST_SIZE_L      (145),
		.PKT_RESPONSE_STATUS_H     (144),
		.PKT_RESPONSE_STATUS_L     (143),
		.PKT_QOS_H                 (128),
		.PKT_QOS_L                 (128),
		.PKT_DATA_SIDEBAND_H       (126),
		.PKT_DATA_SIDEBAND_L       (126),
		.PKT_ADDR_SIDEBAND_H       (125),
		.PKT_ADDR_SIDEBAND_L       (125),
		.PKT_BURST_TYPE_H          (124),
		.PKT_BURST_TYPE_L          (123),
		.PKT_CACHE_H               (142),
		.PKT_CACHE_L               (139),
		.PKT_THREAD_ID_H           (135),
		.PKT_THREAD_ID_L           (135),
		.PKT_BURST_SIZE_H          (122),
		.PKT_BURST_SIZE_L          (120),
		.PKT_TRANS_EXCLUSIVE       (105),
		.PKT_TRANS_LOCK            (104),
		.PKT_BEGIN_BURST           (127),
		.PKT_PROTECTION_H          (138),
		.PKT_PROTECTION_L          (136),
		.PKT_BURSTWRAP_H           (119),
		.PKT_BURSTWRAP_L           (119),
		.PKT_BYTE_CNT_H            (118),
		.PKT_BYTE_CNT_L            (106),
		.PKT_ADDR_H                (99),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (100),
		.PKT_TRANS_POSTED          (101),
		.PKT_TRANS_WRITE           (102),
		.PKT_TRANS_READ            (103),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (131),
		.PKT_SRC_ID_L              (129),
		.PKT_DEST_ID_H             (134),
		.PKT_DEST_ID_L             (132),
		.ST_DATA_W                 (157),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (2),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) dut_rxm_bar2_agent (
		.clk                   (DUT_coreclkout_hip_clk),                                          //   input,    width = 1,       clk.clk
		.reset                 (onchip_memory2_0_reset2_reset_bridge_in_reset_reset),             //   input,    width = 1, clk_reset.reset
		.av_address            (dut_rxm_bar2_translator_avalon_universal_master_0_address),       //   input,   width = 64,        av.address
		.av_write              (dut_rxm_bar2_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (dut_rxm_bar2_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (dut_rxm_bar2_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (dut_rxm_bar2_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (dut_rxm_bar2_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (dut_rxm_bar2_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (dut_rxm_bar2_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (dut_rxm_bar2_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (dut_rxm_bar2_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (dut_rxm_bar2_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (dut_rxm_bar2_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (dut_rxm_bar2_agent_cp_data),                                      //  output,  width = 157,          .data
		.cp_startofpacket      (dut_rxm_bar2_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (dut_rxm_bar2_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (dut_rxm_bar2_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (dut_rxm_bar2_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (dut_rxm_bar2_limiter_rsp_src_data),                               //   input,  width = 157,          .data
		.rp_channel            (dut_rxm_bar2_limiter_rsp_src_channel),                            //   input,    width = 5,          .channel
		.rp_startofpacket      (dut_rxm_bar2_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (dut_rxm_bar2_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (dut_rxm_bar2_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                // (terminated),                         
		.av_writeresponsevalid ()                                                                 // (terminated),                         
	);

	top_hw_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (687),
		.PKT_ORI_BURST_SIZE_L      (685),
		.PKT_RESPONSE_STATUS_H     (684),
		.PKT_RESPONSE_STATUS_L     (683),
		.PKT_BURST_SIZE_H          (662),
		.PKT_BURST_SIZE_L          (660),
		.PKT_TRANS_LOCK            (644),
		.PKT_BEGIN_BURST           (667),
		.PKT_PROTECTION_H          (678),
		.PKT_PROTECTION_L          (676),
		.PKT_BURSTWRAP_H           (659),
		.PKT_BURSTWRAP_L           (659),
		.PKT_BYTE_CNT_H            (658),
		.PKT_BYTE_CNT_L            (646),
		.PKT_ADDR_H                (639),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (640),
		.PKT_TRANS_POSTED          (641),
		.PKT_TRANS_WRITE           (642),
		.PKT_TRANS_READ            (643),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (671),
		.PKT_SRC_ID_L              (669),
		.PKT_DEST_ID_H             (674),
		.PKT_DEST_ID_L             (672),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (697),
		.AVS_BURSTCOUNT_W          (13),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) emif_0_ctrl_amm_0_agent (
		.clk                     (emif_0_emif_usr_clk_clk),                                        //   input,    width = 1,             clk.clk
		.reset                   (emif_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (emif_0_ctrl_amm_0_agent_m0_address),                             //  output,   width = 64,              m0.address
		.m0_burstcount           (emif_0_ctrl_amm_0_agent_m0_burstcount),                          //  output,   width = 13,                .burstcount
		.m0_byteenable           (emif_0_ctrl_amm_0_agent_m0_byteenable),                          //  output,   width = 64,                .byteenable
		.m0_debugaccess          (emif_0_ctrl_amm_0_agent_m0_debugaccess),                         //  output,    width = 1,                .debugaccess
		.m0_lock                 (emif_0_ctrl_amm_0_agent_m0_lock),                                //  output,    width = 1,                .lock
		.m0_readdata             (emif_0_ctrl_amm_0_agent_m0_readdata),                            //   input,  width = 512,                .readdata
		.m0_readdatavalid        (emif_0_ctrl_amm_0_agent_m0_readdatavalid),                       //   input,    width = 1,                .readdatavalid
		.m0_read                 (emif_0_ctrl_amm_0_agent_m0_read),                                //  output,    width = 1,                .read
		.m0_waitrequest          (emif_0_ctrl_amm_0_agent_m0_waitrequest),                         //   input,    width = 1,                .waitrequest
		.m0_writedata            (emif_0_ctrl_amm_0_agent_m0_writedata),                           //  output,  width = 512,                .writedata
		.m0_write                (emif_0_ctrl_amm_0_agent_m0_write),                               //  output,    width = 1,                .write
		.rp_endofpacket          (emif_0_ctrl_amm_0_agent_rp_endofpacket),                         //  output,    width = 1,              rp.endofpacket
		.rp_ready                (emif_0_ctrl_amm_0_agent_rp_ready),                               //   input,    width = 1,                .ready
		.rp_valid                (emif_0_ctrl_amm_0_agent_rp_valid),                               //  output,    width = 1,                .valid
		.rp_data                 (emif_0_ctrl_amm_0_agent_rp_data),                                //  output,  width = 697,                .data
		.rp_startofpacket        (emif_0_ctrl_amm_0_agent_rp_startofpacket),                       //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_source0_ready),                                   //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_source0_valid),                                   //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_source0_data),                                    //   input,  width = 697,                .data
		.cp_startofpacket        (agent_pipeline_source0_startofpacket),                           //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_source0_endofpacket),                             //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_source0_channel),                                 //   input,    width = 5,                .channel
		.rf_sink_ready           (emif_0_ctrl_amm_0_agent_rsp_fifo_out_ready),                     //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (emif_0_ctrl_amm_0_agent_rsp_fifo_out_valid),                     //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (emif_0_ctrl_amm_0_agent_rsp_fifo_out_startofpacket),             //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (emif_0_ctrl_amm_0_agent_rsp_fifo_out_endofpacket),               //   input,    width = 1,                .endofpacket
		.rf_sink_data            (emif_0_ctrl_amm_0_agent_rsp_fifo_out_data),                      //   input,  width = 698,                .data
		.rf_source_ready         (emif_0_ctrl_amm_0_agent_rf_source_ready),                        //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (emif_0_ctrl_amm_0_agent_rf_source_valid),                        //  output,    width = 1,                .valid
		.rf_source_startofpacket (emif_0_ctrl_amm_0_agent_rf_source_startofpacket),                //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (emif_0_ctrl_amm_0_agent_rf_source_endofpacket),                  //  output,    width = 1,                .endofpacket
		.rf_source_data          (emif_0_ctrl_amm_0_agent_rf_source_data),                         //  output,  width = 698,                .data
		.rdata_fifo_sink_ready   (emif_0_ctrl_amm_0_agent_rdata_fifo_out_ready),                   //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (emif_0_ctrl_amm_0_agent_rdata_fifo_out_valid),                   //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (emif_0_ctrl_amm_0_agent_rdata_fifo_out_data),                    //   input,  width = 514,                .data
		.rdata_fifo_src_ready    (emif_0_ctrl_amm_0_agent_rdata_fifo_src_ready),                   //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (emif_0_ctrl_amm_0_agent_rdata_fifo_src_valid),                   //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (emif_0_ctrl_amm_0_agent_rdata_fifo_src_data),                    //  output,  width = 514,                .data
		.m0_response             (2'b00),                                                          // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                           // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                            // (terminated),                               
	);

	top_hw_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (698),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) emif_0_ctrl_amm_0_agent_rsp_fifo (
		.clk               (emif_0_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset             (emif_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (emif_0_ctrl_amm_0_agent_rf_source_data),                         //   input,  width = 698,        in.data
		.in_valid          (emif_0_ctrl_amm_0_agent_rf_source_valid),                        //   input,    width = 1,          .valid
		.in_ready          (emif_0_ctrl_amm_0_agent_rf_source_ready),                        //  output,    width = 1,          .ready
		.in_startofpacket  (emif_0_ctrl_amm_0_agent_rf_source_startofpacket),                //   input,    width = 1,          .startofpacket
		.in_endofpacket    (emif_0_ctrl_amm_0_agent_rf_source_endofpacket),                  //   input,    width = 1,          .endofpacket
		.out_data          (emif_0_ctrl_amm_0_agent_rsp_fifo_out_data),                      //  output,  width = 698,       out.data
		.out_valid         (emif_0_ctrl_amm_0_agent_rsp_fifo_out_valid),                     //  output,    width = 1,          .valid
		.out_ready         (emif_0_ctrl_amm_0_agent_rsp_fifo_out_ready),                     //   input,    width = 1,          .ready
		.out_startofpacket (emif_0_ctrl_amm_0_agent_rsp_fifo_out_startofpacket),             //  output,    width = 1,          .startofpacket
		.out_endofpacket   (emif_0_ctrl_amm_0_agent_rsp_fifo_out_endofpacket),               //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated),                         
		.csr_read          (1'b0),                                                           // (terminated),                         
		.csr_write         (1'b0),                                                           // (terminated),                         
		.csr_readdata      (),                                                               // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated),                         
		.almost_full_data  (),                                                               // (terminated),                         
		.almost_empty_data (),                                                               // (terminated),                         
		.in_empty          (1'b0),                                                           // (terminated),                         
		.out_empty         (),                                                               // (terminated),                         
		.in_error          (1'b0),                                                           // (terminated),                         
		.out_error         (),                                                               // (terminated),                         
		.in_channel        (1'b0),                                                           // (terminated),                         
		.out_channel       ()                                                                // (terminated),                         
	);

	top_hw_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (514),
		.FIFO_DEPTH          (1024),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) emif_0_ctrl_amm_0_agent_rdata_fifo (
		.clk               (emif_0_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset             (emif_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (emif_0_ctrl_amm_0_agent_rdata_fifo_src_data),                    //   input,  width = 514,        in.data
		.in_valid          (emif_0_ctrl_amm_0_agent_rdata_fifo_src_valid),                   //   input,    width = 1,          .valid
		.in_ready          (emif_0_ctrl_amm_0_agent_rdata_fifo_src_ready),                   //  output,    width = 1,          .ready
		.out_data          (emif_0_ctrl_amm_0_agent_rdata_fifo_out_data),                    //  output,  width = 514,       out.data
		.out_valid         (emif_0_ctrl_amm_0_agent_rdata_fifo_out_valid),                   //  output,    width = 1,          .valid
		.out_ready         (emif_0_ctrl_amm_0_agent_rdata_fifo_out_ready),                   //   input,    width = 1,          .ready
		.csr_address       (2'b00),                                                          // (terminated),                         
		.csr_read          (1'b0),                                                           // (terminated),                         
		.csr_write         (1'b0),                                                           // (terminated),                         
		.csr_readdata      (),                                                               // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated),                         
		.almost_full_data  (),                                                               // (terminated),                         
		.almost_empty_data (),                                                               // (terminated),                         
		.in_startofpacket  (1'b0),                                                           // (terminated),                         
		.in_endofpacket    (1'b0),                                                           // (terminated),                         
		.out_startofpacket (),                                                               // (terminated),                         
		.out_endofpacket   (),                                                               // (terminated),                         
		.in_empty          (1'b0),                                                           // (terminated),                         
		.out_empty         (),                                                               // (terminated),                         
		.in_error          (1'b0),                                                           // (terminated),                         
		.out_error         (),                                                               // (terminated),                         
		.in_channel        (1'b0),                                                           // (terminated),                         
		.out_channel       ()                                                                // (terminated),                         
	);

	top_hw_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (399),
		.PKT_ORI_BURST_SIZE_L      (397),
		.PKT_RESPONSE_STATUS_H     (396),
		.PKT_RESPONSE_STATUS_L     (395),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (379),
		.PKT_PROTECTION_H          (390),
		.PKT_PROTECTION_L          (388),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (383),
		.PKT_SRC_ID_L              (381),
		.PKT_DEST_ID_H             (386),
		.PKT_DEST_ID_L             (384),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (409),
		.AVS_BURSTCOUNT_W          (10),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) dut_rd_dts_slave_agent (
		.clk                     (DUT_coreclkout_hip_clk),                              //   input,    width = 1,             clk.clk
		.reset                   (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (dut_rd_dts_slave_agent_m0_address),                   //  output,   width = 64,              m0.address
		.m0_burstcount           (dut_rd_dts_slave_agent_m0_burstcount),                //  output,   width = 10,                .burstcount
		.m0_byteenable           (dut_rd_dts_slave_agent_m0_byteenable),                //  output,   width = 32,                .byteenable
		.m0_debugaccess          (dut_rd_dts_slave_agent_m0_debugaccess),               //  output,    width = 1,                .debugaccess
		.m0_lock                 (dut_rd_dts_slave_agent_m0_lock),                      //  output,    width = 1,                .lock
		.m0_readdata             (dut_rd_dts_slave_agent_m0_readdata),                  //   input,  width = 256,                .readdata
		.m0_readdatavalid        (dut_rd_dts_slave_agent_m0_readdatavalid),             //   input,    width = 1,                .readdatavalid
		.m0_read                 (dut_rd_dts_slave_agent_m0_read),                      //  output,    width = 1,                .read
		.m0_waitrequest          (dut_rd_dts_slave_agent_m0_waitrequest),               //   input,    width = 1,                .waitrequest
		.m0_writedata            (dut_rd_dts_slave_agent_m0_writedata),                 //  output,  width = 256,                .writedata
		.m0_write                (dut_rd_dts_slave_agent_m0_write),                     //  output,    width = 1,                .write
		.rp_endofpacket          (dut_rd_dts_slave_agent_rp_endofpacket),               //  output,    width = 1,              rp.endofpacket
		.rp_ready                (dut_rd_dts_slave_agent_rp_ready),                     //   input,    width = 1,                .ready
		.rp_valid                (dut_rd_dts_slave_agent_rp_valid),                     //  output,    width = 1,                .valid
		.rp_data                 (dut_rd_dts_slave_agent_rp_data),                      //  output,  width = 409,                .data
		.rp_startofpacket        (dut_rd_dts_slave_agent_rp_startofpacket),             //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_002_source0_ready),                    //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_002_source0_valid),                    //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_002_source0_data),                     //   input,  width = 409,                .data
		.cp_startofpacket        (agent_pipeline_002_source0_startofpacket),            //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_002_source0_endofpacket),              //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_002_source0_channel),                  //   input,    width = 5,                .channel
		.rf_sink_ready           (dut_rd_dts_slave_agent_rsp_fifo_out_ready),           //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (dut_rd_dts_slave_agent_rsp_fifo_out_valid),           //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (dut_rd_dts_slave_agent_rsp_fifo_out_startofpacket),   //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (dut_rd_dts_slave_agent_rsp_fifo_out_endofpacket),     //   input,    width = 1,                .endofpacket
		.rf_sink_data            (dut_rd_dts_slave_agent_rsp_fifo_out_data),            //   input,  width = 410,                .data
		.rf_source_ready         (dut_rd_dts_slave_agent_rf_source_ready),              //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (dut_rd_dts_slave_agent_rf_source_valid),              //  output,    width = 1,                .valid
		.rf_source_startofpacket (dut_rd_dts_slave_agent_rf_source_startofpacket),      //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (dut_rd_dts_slave_agent_rf_source_endofpacket),        //  output,    width = 1,                .endofpacket
		.rf_source_data          (dut_rd_dts_slave_agent_rf_source_data),               //  output,  width = 410,                .data
		.rdata_fifo_sink_ready   (dut_rd_dts_slave_agent_rdata_fifo_src_ready),         //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (dut_rd_dts_slave_agent_rdata_fifo_src_valid),         //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (dut_rd_dts_slave_agent_rdata_fifo_src_data),          //   input,  width = 258,                .data
		.rdata_fifo_src_ready    (dut_rd_dts_slave_agent_rdata_fifo_src_ready),         //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dut_rd_dts_slave_agent_rdata_fifo_src_valid),         //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (dut_rd_dts_slave_agent_rdata_fifo_src_data),          //  output,  width = 258,                .data
		.m0_response             (2'b00),                                               // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                 // (terminated),                               
	);

	top_hw_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (410),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) dut_rd_dts_slave_agent_rsp_fifo (
		.clk               (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (dut_rd_dts_slave_agent_rf_source_data),               //   input,  width = 410,        in.data
		.in_valid          (dut_rd_dts_slave_agent_rf_source_valid),              //   input,    width = 1,          .valid
		.in_ready          (dut_rd_dts_slave_agent_rf_source_ready),              //  output,    width = 1,          .ready
		.in_startofpacket  (dut_rd_dts_slave_agent_rf_source_startofpacket),      //   input,    width = 1,          .startofpacket
		.in_endofpacket    (dut_rd_dts_slave_agent_rf_source_endofpacket),        //   input,    width = 1,          .endofpacket
		.out_data          (dut_rd_dts_slave_agent_rsp_fifo_out_data),            //  output,  width = 410,       out.data
		.out_valid         (dut_rd_dts_slave_agent_rsp_fifo_out_valid),           //  output,    width = 1,          .valid
		.out_ready         (dut_rd_dts_slave_agent_rsp_fifo_out_ready),           //   input,    width = 1,          .ready
		.out_startofpacket (dut_rd_dts_slave_agent_rsp_fifo_out_startofpacket),   //  output,    width = 1,          .startofpacket
		.out_endofpacket   (dut_rd_dts_slave_agent_rsp_fifo_out_endofpacket),     //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                               // (terminated),                         
		.csr_read          (1'b0),                                                // (terminated),                         
		.csr_write         (1'b0),                                                // (terminated),                         
		.csr_readdata      (),                                                    // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated),                         
		.almost_full_data  (),                                                    // (terminated),                         
		.almost_empty_data (),                                                    // (terminated),                         
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.in_error          (1'b0),                                                // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_channel        (1'b0),                                                // (terminated),                         
		.out_channel       ()                                                     // (terminated),                         
	);

	top_hw_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (399),
		.PKT_ORI_BURST_SIZE_L      (397),
		.PKT_RESPONSE_STATUS_H     (396),
		.PKT_RESPONSE_STATUS_L     (395),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (379),
		.PKT_PROTECTION_H          (390),
		.PKT_PROTECTION_L          (388),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (383),
		.PKT_SRC_ID_L              (381),
		.PKT_DEST_ID_H             (386),
		.PKT_DEST_ID_L             (384),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (409),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) onchip_memory2_0_s2_agent (
		.clk                     (DUT_coreclkout_hip_clk),                               //   input,    width = 1,             clk.clk
		.reset                   (onchip_memory2_0_reset2_reset_bridge_in_reset_reset),  //   input,    width = 1,       clk_reset.reset
		.m0_address              (onchip_memory2_0_s2_agent_m0_address),                 //  output,   width = 64,              m0.address
		.m0_burstcount           (onchip_memory2_0_s2_agent_m0_burstcount),              //  output,    width = 6,                .burstcount
		.m0_byteenable           (onchip_memory2_0_s2_agent_m0_byteenable),              //  output,   width = 32,                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s2_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (onchip_memory2_0_s2_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (onchip_memory2_0_s2_agent_m0_readdata),                //   input,  width = 256,                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s2_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (onchip_memory2_0_s2_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (onchip_memory2_0_s2_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (onchip_memory2_0_s2_agent_m0_writedata),               //  output,  width = 256,                .writedata
		.m0_write                (onchip_memory2_0_s2_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (onchip_memory2_0_s2_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s2_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (onchip_memory2_0_s2_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (onchip_memory2_0_s2_agent_rp_data),                    //  output,  width = 409,                .data
		.rp_startofpacket        (onchip_memory2_0_s2_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_004_source0_ready),                     //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_004_source0_valid),                     //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_004_source0_data),                      //   input,  width = 409,                .data
		.cp_startofpacket        (agent_pipeline_004_source0_startofpacket),             //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_004_source0_endofpacket),               //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_004_source0_channel),                   //   input,    width = 5,                .channel
		.rf_sink_ready           (onchip_memory2_0_s2_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s2_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s2_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s2_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s2_agent_rsp_fifo_out_data),          //   input,  width = 410,                .data
		.rf_source_ready         (onchip_memory2_0_s2_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s2_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (onchip_memory2_0_s2_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s2_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (onchip_memory2_0_s2_agent_rf_source_data),             //  output,  width = 410,                .data
		.rdata_fifo_sink_ready   (onchip_memory2_0_s2_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (onchip_memory2_0_s2_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (onchip_memory2_0_s2_agent_rdata_fifo_src_data),        //   input,  width = 258,                .data
		.rdata_fifo_src_ready    (onchip_memory2_0_s2_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s2_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s2_agent_rdata_fifo_src_data),        //  output,  width = 258,                .data
		.m0_response             (2'b00),                                                // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                 // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                  // (terminated),                               
	);

	top_hw_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (410),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) onchip_memory2_0_s2_agent_rsp_fifo (
		.clk               (DUT_coreclkout_hip_clk),                               //   input,    width = 1,       clk.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset),  //   input,    width = 1, clk_reset.reset
		.in_data           (onchip_memory2_0_s2_agent_rf_source_data),             //   input,  width = 410,        in.data
		.in_valid          (onchip_memory2_0_s2_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (onchip_memory2_0_s2_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (onchip_memory2_0_s2_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s2_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (onchip_memory2_0_s2_agent_rsp_fifo_out_data),          //  output,  width = 410,       out.data
		.out_valid         (onchip_memory2_0_s2_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (onchip_memory2_0_s2_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (onchip_memory2_0_s2_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s2_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                // (terminated),                         
		.csr_read          (1'b0),                                                 // (terminated),                         
		.csr_write         (1'b0),                                                 // (terminated),                         
		.csr_readdata      (),                                                     // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated),                         
		.almost_full_data  (),                                                     // (terminated),                         
		.almost_empty_data (),                                                     // (terminated),                         
		.in_empty          (1'b0),                                                 // (terminated),                         
		.out_empty         (),                                                     // (terminated),                         
		.in_error          (1'b0),                                                 // (terminated),                         
		.out_error         (),                                                     // (terminated),                         
		.in_channel        (1'b0),                                                 // (terminated),                         
		.out_channel       ()                                                      // (terminated),                         
	);

	top_hw_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (399),
		.PKT_ORI_BURST_SIZE_L      (397),
		.PKT_RESPONSE_STATUS_H     (396),
		.PKT_RESPONSE_STATUS_L     (395),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (379),
		.PKT_PROTECTION_H          (390),
		.PKT_PROTECTION_L          (388),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (383),
		.PKT_SRC_ID_L              (381),
		.PKT_DEST_ID_H             (386),
		.PKT_DEST_ID_L             (384),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (409),
		.AVS_BURSTCOUNT_W          (10),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) dut_wr_dts_slave_agent (
		.clk                     (DUT_coreclkout_hip_clk),                              //   input,    width = 1,             clk.clk
		.reset                   (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (dut_wr_dts_slave_agent_m0_address),                   //  output,   width = 64,              m0.address
		.m0_burstcount           (dut_wr_dts_slave_agent_m0_burstcount),                //  output,   width = 10,                .burstcount
		.m0_byteenable           (dut_wr_dts_slave_agent_m0_byteenable),                //  output,   width = 32,                .byteenable
		.m0_debugaccess          (dut_wr_dts_slave_agent_m0_debugaccess),               //  output,    width = 1,                .debugaccess
		.m0_lock                 (dut_wr_dts_slave_agent_m0_lock),                      //  output,    width = 1,                .lock
		.m0_readdata             (dut_wr_dts_slave_agent_m0_readdata),                  //   input,  width = 256,                .readdata
		.m0_readdatavalid        (dut_wr_dts_slave_agent_m0_readdatavalid),             //   input,    width = 1,                .readdatavalid
		.m0_read                 (dut_wr_dts_slave_agent_m0_read),                      //  output,    width = 1,                .read
		.m0_waitrequest          (dut_wr_dts_slave_agent_m0_waitrequest),               //   input,    width = 1,                .waitrequest
		.m0_writedata            (dut_wr_dts_slave_agent_m0_writedata),                 //  output,  width = 256,                .writedata
		.m0_write                (dut_wr_dts_slave_agent_m0_write),                     //  output,    width = 1,                .write
		.rp_endofpacket          (dut_wr_dts_slave_agent_rp_endofpacket),               //  output,    width = 1,              rp.endofpacket
		.rp_ready                (dut_wr_dts_slave_agent_rp_ready),                     //   input,    width = 1,                .ready
		.rp_valid                (dut_wr_dts_slave_agent_rp_valid),                     //  output,    width = 1,                .valid
		.rp_data                 (dut_wr_dts_slave_agent_rp_data),                      //  output,  width = 409,                .data
		.rp_startofpacket        (dut_wr_dts_slave_agent_rp_startofpacket),             //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_006_source0_ready),                    //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_006_source0_valid),                    //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_006_source0_data),                     //   input,  width = 409,                .data
		.cp_startofpacket        (agent_pipeline_006_source0_startofpacket),            //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_006_source0_endofpacket),              //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_006_source0_channel),                  //   input,    width = 5,                .channel
		.rf_sink_ready           (dut_wr_dts_slave_agent_rsp_fifo_out_ready),           //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (dut_wr_dts_slave_agent_rsp_fifo_out_valid),           //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (dut_wr_dts_slave_agent_rsp_fifo_out_startofpacket),   //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (dut_wr_dts_slave_agent_rsp_fifo_out_endofpacket),     //   input,    width = 1,                .endofpacket
		.rf_sink_data            (dut_wr_dts_slave_agent_rsp_fifo_out_data),            //   input,  width = 410,                .data
		.rf_source_ready         (dut_wr_dts_slave_agent_rf_source_ready),              //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (dut_wr_dts_slave_agent_rf_source_valid),              //  output,    width = 1,                .valid
		.rf_source_startofpacket (dut_wr_dts_slave_agent_rf_source_startofpacket),      //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (dut_wr_dts_slave_agent_rf_source_endofpacket),        //  output,    width = 1,                .endofpacket
		.rf_source_data          (dut_wr_dts_slave_agent_rf_source_data),               //  output,  width = 410,                .data
		.rdata_fifo_sink_ready   (dut_wr_dts_slave_agent_rdata_fifo_src_ready),         //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (dut_wr_dts_slave_agent_rdata_fifo_src_valid),         //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (dut_wr_dts_slave_agent_rdata_fifo_src_data),          //   input,  width = 258,                .data
		.rdata_fifo_src_ready    (dut_wr_dts_slave_agent_rdata_fifo_src_ready),         //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dut_wr_dts_slave_agent_rdata_fifo_src_valid),         //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (dut_wr_dts_slave_agent_rdata_fifo_src_data),          //  output,  width = 258,                .data
		.m0_response             (2'b00),                                               // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                 // (terminated),                               
	);

	top_hw_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (410),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) dut_wr_dts_slave_agent_rsp_fifo (
		.clk               (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (dut_wr_dts_slave_agent_rf_source_data),               //   input,  width = 410,        in.data
		.in_valid          (dut_wr_dts_slave_agent_rf_source_valid),              //   input,    width = 1,          .valid
		.in_ready          (dut_wr_dts_slave_agent_rf_source_ready),              //  output,    width = 1,          .ready
		.in_startofpacket  (dut_wr_dts_slave_agent_rf_source_startofpacket),      //   input,    width = 1,          .startofpacket
		.in_endofpacket    (dut_wr_dts_slave_agent_rf_source_endofpacket),        //   input,    width = 1,          .endofpacket
		.out_data          (dut_wr_dts_slave_agent_rsp_fifo_out_data),            //  output,  width = 410,       out.data
		.out_valid         (dut_wr_dts_slave_agent_rsp_fifo_out_valid),           //  output,    width = 1,          .valid
		.out_ready         (dut_wr_dts_slave_agent_rsp_fifo_out_ready),           //   input,    width = 1,          .ready
		.out_startofpacket (dut_wr_dts_slave_agent_rsp_fifo_out_startofpacket),   //  output,    width = 1,          .startofpacket
		.out_endofpacket   (dut_wr_dts_slave_agent_rsp_fifo_out_endofpacket),     //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                               // (terminated),                         
		.csr_read          (1'b0),                                                // (terminated),                         
		.csr_write         (1'b0),                                                // (terminated),                         
		.csr_readdata      (),                                                    // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated),                         
		.almost_full_data  (),                                                    // (terminated),                         
		.almost_empty_data (),                                                    // (terminated),                         
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.in_error          (1'b0),                                                // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_channel        (1'b0),                                                // (terminated),                         
		.out_channel       ()                                                     // (terminated),                         
	);

	top_hw_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (399),
		.PKT_ORI_BURST_SIZE_L      (397),
		.PKT_RESPONSE_STATUS_H     (396),
		.PKT_RESPONSE_STATUS_L     (395),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (379),
		.PKT_PROTECTION_H          (390),
		.PKT_PROTECTION_L          (388),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (383),
		.PKT_SRC_ID_L              (381),
		.PKT_DEST_ID_H             (386),
		.PKT_DEST_ID_L             (384),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (409),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) onchip_memory2_0_s1_agent (
		.clk                     (DUT_coreclkout_hip_clk),                               //   input,    width = 1,             clk.clk
		.reset                   (onchip_memory2_0_reset2_reset_bridge_in_reset_reset),  //   input,    width = 1,       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_agent_m0_address),                 //  output,   width = 64,              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),              //  output,    width = 6,                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),              //  output,   width = 32,                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (onchip_memory2_0_s1_agent_m0_readdata),                //   input,  width = 256,                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_agent_m0_writedata),               //  output,  width = 256,                .writedata
		.m0_write                (onchip_memory2_0_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (onchip_memory2_0_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (onchip_memory2_0_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (onchip_memory2_0_s1_agent_rp_data),                    //  output,  width = 409,                .data
		.rp_startofpacket        (onchip_memory2_0_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_008_source0_ready),                     //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_008_source0_valid),                     //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_008_source0_data),                      //   input,  width = 409,                .data
		.cp_startofpacket        (agent_pipeline_008_source0_startofpacket),             //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_008_source0_endofpacket),               //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_008_source0_channel),                   //   input,    width = 5,                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //   input,  width = 410,                .data
		.rf_source_ready         (onchip_memory2_0_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_agent_rf_source_data),             //  output,  width = 410,                .data
		.rdata_fifo_sink_ready   (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (onchip_memory2_0_s1_agent_rdata_fifo_src_data),        //   input,  width = 258,                .data
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_agent_rdata_fifo_src_data),        //  output,  width = 258,                .data
		.m0_response             (2'b00),                                                // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                 // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                  // (terminated),                               
	);

	top_hw_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (410),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) onchip_memory2_0_s1_agent_rsp_fifo (
		.clk               (DUT_coreclkout_hip_clk),                               //   input,    width = 1,       clk.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset),  //   input,    width = 1, clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rf_source_data),             //   input,  width = 410,        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //  output,  width = 410,       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                // (terminated),                         
		.csr_read          (1'b0),                                                 // (terminated),                         
		.csr_write         (1'b0),                                                 // (terminated),                         
		.csr_readdata      (),                                                     // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated),                         
		.almost_full_data  (),                                                     // (terminated),                         
		.almost_empty_data (),                                                     // (terminated),                         
		.in_empty          (1'b0),                                                 // (terminated),                         
		.out_empty         (),                                                     // (terminated),                         
		.in_error          (1'b0),                                                 // (terminated),                         
		.out_error         (),                                                     // (terminated),                         
		.in_channel        (1'b0),                                                 // (terminated),                         
		.out_channel       ()                                                      // (terminated),                         
	);

	top_hw_altera_merlin_router_191_6xefe7y router (
		.sink_ready         (dut_dma_rd_master_agent_cp_ready),                    //  output,    width = 1,      sink.ready
		.sink_valid         (dut_dma_rd_master_agent_cp_valid),                    //   input,    width = 1,          .valid
		.sink_data          (dut_dma_rd_master_agent_cp_data),                     //   input,  width = 409,          .data
		.sink_startofpacket (dut_dma_rd_master_agent_cp_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (dut_dma_rd_master_agent_cp_endofpacket),              //   input,    width = 1,          .endofpacket
		.clk                (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset              (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                    //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                    //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                     //  output,  width = 409,          .data
		.src_channel        (router_src_channel),                                  //  output,    width = 5,          .channel
		.src_startofpacket  (router_src_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                               //  output,    width = 1,          .endofpacket
	);

	top_hw_altera_merlin_router_191_m64leea router_001 (
		.sink_ready         (dut_dma_wr_master_agent_cp_ready),                    //  output,    width = 1,      sink.ready
		.sink_valid         (dut_dma_wr_master_agent_cp_valid),                    //   input,    width = 1,          .valid
		.sink_data          (dut_dma_wr_master_agent_cp_data),                     //   input,  width = 409,          .data
		.sink_startofpacket (dut_dma_wr_master_agent_cp_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (dut_dma_wr_master_agent_cp_endofpacket),              //   input,    width = 1,          .endofpacket
		.clk                (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset              (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                 //  output,  width = 409,          .data
		.src_channel        (router_001_src_channel),                              //  output,    width = 5,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	top_hw_altera_merlin_router_191_4hnp2yy router_002 (
		.sink_ready         (dut_rxm_bar2_agent_cp_ready),                         //  output,    width = 1,      sink.ready
		.sink_valid         (dut_rxm_bar2_agent_cp_valid),                         //   input,    width = 1,          .valid
		.sink_data          (dut_rxm_bar2_agent_cp_data),                          //   input,  width = 157,          .data
		.sink_startofpacket (dut_rxm_bar2_agent_cp_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (dut_rxm_bar2_agent_cp_endofpacket),                   //   input,    width = 1,          .endofpacket
		.clk                (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset              (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                 //  output,  width = 157,          .data
		.src_channel        (router_002_src_channel),                              //  output,    width = 5,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	top_hw_altera_merlin_router_191_tjsusja router_003 (
		.sink_ready         (agent_pipeline_001_source0_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_001_source0_valid),                               //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_001_source0_data),                                //   input,  width = 697,          .data
		.sink_startofpacket (agent_pipeline_001_source0_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_001_source0_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (emif_0_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset              (emif_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                           //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                           //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                                            //  output,  width = 697,          .data
		.src_channel        (router_003_src_channel),                                         //  output,    width = 5,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                   //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                      //  output,    width = 1,          .endofpacket
	);

	top_hw_altera_merlin_router_191_svxrzci router_004 (
		.sink_ready         (agent_pipeline_003_source0_ready),                    //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_003_source0_valid),                    //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_003_source0_data),                     //   input,  width = 409,          .data
		.sink_startofpacket (agent_pipeline_003_source0_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_003_source0_endofpacket),              //   input,    width = 1,          .endofpacket
		.clk                (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset              (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_004_src_ready),                                //   input,    width = 1,       src.ready
		.src_valid          (router_004_src_valid),                                //  output,    width = 1,          .valid
		.src_data           (router_004_src_data),                                 //  output,  width = 409,          .data
		.src_channel        (router_004_src_channel),                              //  output,    width = 5,          .channel
		.src_startofpacket  (router_004_src_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	top_hw_altera_merlin_router_191_svxrzci router_005 (
		.sink_ready         (agent_pipeline_005_source0_ready),                    //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_005_source0_valid),                    //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_005_source0_data),                     //   input,  width = 409,          .data
		.sink_startofpacket (agent_pipeline_005_source0_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_005_source0_endofpacket),              //   input,    width = 1,          .endofpacket
		.clk                (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset              (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_005_src_ready),                                //   input,    width = 1,       src.ready
		.src_valid          (router_005_src_valid),                                //  output,    width = 1,          .valid
		.src_data           (router_005_src_data),                                 //  output,  width = 409,          .data
		.src_channel        (router_005_src_channel),                              //  output,    width = 5,          .channel
		.src_startofpacket  (router_005_src_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	top_hw_altera_merlin_router_191_svxrzci router_006 (
		.sink_ready         (agent_pipeline_007_source0_ready),                    //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_007_source0_valid),                    //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_007_source0_data),                     //   input,  width = 409,          .data
		.sink_startofpacket (agent_pipeline_007_source0_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_007_source0_endofpacket),              //   input,    width = 1,          .endofpacket
		.clk                (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset              (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_006_src_ready),                                //   input,    width = 1,       src.ready
		.src_valid          (router_006_src_valid),                                //  output,    width = 1,          .valid
		.src_data           (router_006_src_data),                                 //  output,  width = 409,          .data
		.src_channel        (router_006_src_channel),                              //  output,    width = 5,          .channel
		.src_startofpacket  (router_006_src_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	top_hw_altera_merlin_router_191_u6cxpni router_007 (
		.sink_ready         (agent_pipeline_009_source0_ready),                    //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_009_source0_valid),                    //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_009_source0_data),                     //   input,  width = 409,          .data
		.sink_startofpacket (agent_pipeline_009_source0_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_009_source0_endofpacket),              //   input,    width = 1,          .endofpacket
		.clk                (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset              (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_007_src_ready),                                //   input,    width = 1,       src.ready
		.src_valid          (router_007_src_valid),                                //  output,    width = 1,          .valid
		.src_data           (router_007_src_data),                                 //  output,  width = 409,          .data
		.src_channel        (router_007_src_channel),                              //  output,    width = 5,          .channel
		.src_startofpacket  (router_007_src_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	top_hw_altera_merlin_traffic_limiter_191_kcba44q #(
		.SYNC_RESET                (0),
		.PKT_DEST_ID_H             (386),
		.PKT_DEST_ID_L             (384),
		.PKT_SRC_ID_H              (383),
		.PKT_SRC_ID_L              (381),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.MAX_OUTSTANDING_RESPONSES (95),
		.PIPELINED                 (0),
		.ST_DATA_W                 (409),
		.ST_CHANNEL_W              (5),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) dut_dma_wr_master_limiter (
		.clk                    (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset                  (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                //   input,    width = 1,          .valid
		.cmd_sink_data          (router_001_src_data),                                 //   input,  width = 409,          .data
		.cmd_sink_channel       (router_001_src_channel),                              //   input,    width = 5,          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                        //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                          //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (dut_dma_wr_master_limiter_cmd_src_ready),             //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (dut_dma_wr_master_limiter_cmd_src_data),              //  output,  width = 409,          .data
		.cmd_src_channel        (dut_dma_wr_master_limiter_cmd_src_channel),           //  output,    width = 5,          .channel
		.cmd_src_startofpacket  (dut_dma_wr_master_limiter_cmd_src_startofpacket),     //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (dut_dma_wr_master_limiter_cmd_src_endofpacket),       //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (dut_dma_wr_master_limiter_cmd_src_valid),             //  output,    width = 1,          .valid
		.rsp_sink_ready         (limiter_pipeline_001_source0_ready),                  //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_001_source0_valid),                  //   input,    width = 1,          .valid
		.rsp_sink_channel       (limiter_pipeline_001_source0_channel),                //   input,    width = 5,          .channel
		.rsp_sink_data          (limiter_pipeline_001_source0_data),                   //   input,  width = 409,          .data
		.rsp_sink_startofpacket (limiter_pipeline_001_source0_startofpacket),          //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_001_source0_endofpacket),            //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (dut_dma_wr_master_limiter_rsp_src_ready),             //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (dut_dma_wr_master_limiter_rsp_src_valid),             //  output,    width = 1,          .valid
		.rsp_src_data           (dut_dma_wr_master_limiter_rsp_src_data),              //  output,  width = 409,          .data
		.rsp_src_channel        (dut_dma_wr_master_limiter_rsp_src_channel),           //  output,    width = 5,          .channel
		.rsp_src_startofpacket  (dut_dma_wr_master_limiter_rsp_src_startofpacket),     //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (dut_dma_wr_master_limiter_rsp_src_endofpacket)        //  output,    width = 1,          .endofpacket
	);

	top_hw_altera_merlin_traffic_limiter_191_kcba44q #(
		.SYNC_RESET                (0),
		.PKT_DEST_ID_H             (134),
		.PKT_DEST_ID_L             (132),
		.PKT_SRC_ID_H              (131),
		.PKT_SRC_ID_L              (129),
		.PKT_BYTE_CNT_H            (118),
		.PKT_BYTE_CNT_L            (106),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (101),
		.PKT_TRANS_WRITE           (102),
		.MAX_OUTSTANDING_RESPONSES (95),
		.PIPELINED                 (0),
		.ST_DATA_W                 (157),
		.ST_CHANNEL_W              (5),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) dut_rxm_bar2_limiter (
		.clk                    (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset                  (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                //   input,    width = 1,          .valid
		.cmd_sink_data          (router_002_src_data),                                 //   input,  width = 157,          .data
		.cmd_sink_channel       (router_002_src_channel),                              //   input,    width = 5,          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                        //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                          //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (dut_rxm_bar2_limiter_cmd_src_ready),                  //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (dut_rxm_bar2_limiter_cmd_src_data),                   //  output,  width = 157,          .data
		.cmd_src_channel        (dut_rxm_bar2_limiter_cmd_src_channel),                //  output,    width = 5,          .channel
		.cmd_src_startofpacket  (dut_rxm_bar2_limiter_cmd_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (dut_rxm_bar2_limiter_cmd_src_endofpacket),            //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (dut_rxm_bar2_limiter_cmd_src_valid),                  //  output,    width = 1,          .valid
		.rsp_sink_ready         (limiter_pipeline_003_source0_ready),                  //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_003_source0_valid),                  //   input,    width = 1,          .valid
		.rsp_sink_channel       (limiter_pipeline_003_source0_channel),                //   input,    width = 5,          .channel
		.rsp_sink_data          (limiter_pipeline_003_source0_data),                   //   input,  width = 157,          .data
		.rsp_sink_startofpacket (limiter_pipeline_003_source0_startofpacket),          //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_003_source0_endofpacket),            //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (dut_rxm_bar2_limiter_rsp_src_ready),                  //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (dut_rxm_bar2_limiter_rsp_src_valid),                  //  output,    width = 1,          .valid
		.rsp_src_data           (dut_rxm_bar2_limiter_rsp_src_data),                   //  output,  width = 157,          .data
		.rsp_src_channel        (dut_rxm_bar2_limiter_rsp_src_channel),                //  output,    width = 5,          .channel
		.rsp_src_startofpacket  (dut_rxm_bar2_limiter_rsp_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (dut_rxm_bar2_limiter_rsp_src_endofpacket)             //  output,    width = 1,          .endofpacket
	);

	top_hw_altera_merlin_burst_adapter_191_7422xpi #(
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_BEGIN_BURST           (379),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_BURST_TYPE_H          (376),
		.PKT_BURST_TYPE_L          (375),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (409),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (363),
		.OUT_BURSTWRAP_H           (371),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) onchip_memory2_0_s2_burst_adapter (
		.clk                   (DUT_coreclkout_hip_clk),                                  //   input,    width = 1,       cr0.clk
		.reset                 (onchip_memory2_0_reset2_reset_bridge_in_reset_reset),     //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                   //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                    //   input,  width = 409,          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                 //   input,    width = 5,          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                           //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                             //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                   //  output,    width = 1,          .ready
		.source0_valid         (onchip_memory2_0_s2_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (onchip_memory2_0_s2_burst_adapter_source0_data),          //  output,  width = 409,          .data
		.source0_channel       (onchip_memory2_0_s2_burst_adapter_source0_channel),       //  output,    width = 5,          .channel
		.source0_startofpacket (onchip_memory2_0_s2_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (onchip_memory2_0_s2_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (onchip_memory2_0_s2_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	top_hw_altera_merlin_burst_adapter_191_7422xpi #(
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_BEGIN_BURST           (379),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_BURST_TYPE_H          (376),
		.PKT_BURST_TYPE_L          (375),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (409),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (363),
		.OUT_BURSTWRAP_H           (371),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) onchip_memory2_0_s1_burst_adapter (
		.clk                   (DUT_coreclkout_hip_clk),                                  //   input,    width = 1,       cr0.clk
		.reset                 (onchip_memory2_0_reset2_reset_bridge_in_reset_reset),     //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                                   //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                    //   input,  width = 409,          .data
		.sink0_channel         (cmd_mux_004_src_channel),                                 //   input,    width = 5,          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                           //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                             //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                                   //  output,    width = 1,          .ready
		.source0_valid         (onchip_memory2_0_s1_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (onchip_memory2_0_s1_burst_adapter_source0_data),          //  output,  width = 409,          .data
		.source0_channel       (onchip_memory2_0_s1_burst_adapter_source0_channel),       //  output,    width = 5,          .channel
		.source0_startofpacket (onchip_memory2_0_s1_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (onchip_memory2_0_s1_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (onchip_memory2_0_s1_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	top_hw_altera_merlin_demultiplexer_191_2v5jvsa cmd_demux (
		.clk                (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset              (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                                    //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                                  //   input,    width = 5,          .channel
		.sink_data          (router_src_data),                                     //   input,  width = 409,          .data
		.sink_startofpacket (router_src_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                              //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                                    //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                 //  output,  width = 409,          .data
		.src0_channel       (cmd_demux_src0_channel),                              //  output,    width = 5,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                          //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_src1_data),                                 //  output,  width = 409,          .data
		.src1_channel       (cmd_demux_src1_channel),                              //  output,    width = 5,          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                          //  output,    width = 1,          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                //   input,    width = 1,      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                //  output,    width = 1,          .valid
		.src2_data          (cmd_demux_src2_data),                                 //  output,  width = 409,          .data
		.src2_channel       (cmd_demux_src2_channel),                              //  output,    width = 5,          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                          //  output,    width = 1,          .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                //   input,    width = 1,      src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                //  output,    width = 1,          .valid
		.src3_data          (cmd_demux_src3_data),                                 //  output,  width = 409,          .data
		.src3_channel       (cmd_demux_src3_channel),                              //  output,    width = 5,          .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	top_hw_altera_merlin_demultiplexer_191_mozyuqi cmd_demux_001 (
		.clk                (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset              (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (limiter_pipeline_source0_ready),                      //  output,    width = 1,      sink.ready
		.sink_channel       (limiter_pipeline_source0_channel),                    //   input,    width = 5,          .channel
		.sink_data          (limiter_pipeline_source0_data),                       //   input,  width = 409,          .data
		.sink_startofpacket (limiter_pipeline_source0_startofpacket),              //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (limiter_pipeline_source0_endofpacket),                //   input,    width = 1,          .endofpacket
		.sink_valid         (limiter_pipeline_source0_valid),                      //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                            //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                            //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_001_src0_data),                             //  output,  width = 409,          .data
		.src0_channel       (cmd_demux_001_src0_channel),                          //  output,    width = 5,          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                      //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                            //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                            //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_001_src1_data),                             //  output,  width = 409,          .data
		.src1_channel       (cmd_demux_001_src1_channel),                          //  output,    width = 5,          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)                       //  output,    width = 1,          .endofpacket
	);

	top_hw_altera_merlin_demultiplexer_191_bggfk5a cmd_demux_002 (
		.clk                (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset              (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (limiter_pipeline_002_source0_ready),                  //  output,    width = 1,      sink.ready
		.sink_channel       (limiter_pipeline_002_source0_channel),                //   input,    width = 5,          .channel
		.sink_data          (limiter_pipeline_002_source0_data),                   //   input,  width = 157,          .data
		.sink_startofpacket (limiter_pipeline_002_source0_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (limiter_pipeline_002_source0_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink_valid         (limiter_pipeline_002_source0_valid),                  //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                            //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                            //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_002_src0_data),                             //  output,  width = 157,          .data
		.src0_channel       (cmd_demux_002_src0_channel),                          //  output,    width = 5,          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                      //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                            //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                            //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_002_src1_data),                             //  output,  width = 157,          .data
		.src1_channel       (cmd_demux_002_src1_channel),                          //  output,    width = 5,          .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket)                       //  output,    width = 1,          .endofpacket
	);

	top_hw_altera_merlin_multiplexer_191_4ow47rq cmd_mux (
		.clk                 (emif_0_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset               (emif_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                              //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                              //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                               //  output,  width = 697,          .data
		.src_channel         (cmd_mux_src_channel),                                            //  output,    width = 5,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                      //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                        //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),                                     //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),                                     //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_source0_channel),                                   //   input,    width = 5,          .channel
		.sink0_data          (mux_pipeline_source0_data),                                      //   input,  width = 697,          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink1_ready         (mux_pipeline_001_source0_ready),                                 //  output,    width = 1,     sink1.ready
		.sink1_valid         (mux_pipeline_001_source0_valid),                                 //   input,    width = 1,          .valid
		.sink1_channel       (mux_pipeline_001_source0_channel),                               //   input,    width = 5,          .channel
		.sink1_data          (mux_pipeline_001_source0_data),                                  //   input,  width = 697,          .data
		.sink1_startofpacket (mux_pipeline_001_source0_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (mux_pipeline_001_source0_endofpacket),                           //   input,    width = 1,          .endofpacket
		.sink2_ready         (mux_pipeline_002_source0_ready),                                 //  output,    width = 1,     sink2.ready
		.sink2_valid         (mux_pipeline_002_source0_valid),                                 //   input,    width = 1,          .valid
		.sink2_channel       (mux_pipeline_002_source0_channel),                               //   input,    width = 5,          .channel
		.sink2_data          (mux_pipeline_002_source0_data),                                  //   input,  width = 697,          .data
		.sink2_startofpacket (mux_pipeline_002_source0_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (mux_pipeline_002_source0_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

	top_hw_altera_merlin_multiplexer_191_hgsyksi cmd_mux_001 (
		.clk                 (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset               (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                               //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                               //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                                //  output,  width = 409,          .data
		.src_channel         (cmd_mux_001_src_channel),                             //  output,    width = 5,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                       //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                         //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_003_source0_ready),                      //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_003_source0_valid),                      //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_003_source0_channel),                    //   input,    width = 5,          .channel
		.sink0_data          (mux_pipeline_003_source0_data),                       //   input,  width = 409,          .data
		.sink0_startofpacket (mux_pipeline_003_source0_startofpacket),              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_003_source0_endofpacket)                 //   input,    width = 1,          .endofpacket
	);

	top_hw_altera_merlin_multiplexer_191_hgsyksi cmd_mux_002 (
		.clk                 (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset               (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                               //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                               //  output,    width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                                //  output,  width = 409,          .data
		.src_channel         (cmd_mux_002_src_channel),                             //  output,    width = 5,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                       //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                         //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_004_source0_ready),                      //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_004_source0_valid),                      //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_004_source0_channel),                    //   input,    width = 5,          .channel
		.sink0_data          (mux_pipeline_004_source0_data),                       //   input,  width = 409,          .data
		.sink0_startofpacket (mux_pipeline_004_source0_startofpacket),              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_004_source0_endofpacket)                 //   input,    width = 1,          .endofpacket
	);

	top_hw_altera_merlin_multiplexer_191_hgsyksi cmd_mux_003 (
		.clk                 (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset               (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                               //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_003_src_valid),                               //  output,    width = 1,          .valid
		.src_data            (cmd_mux_003_src_data),                                //  output,  width = 409,          .data
		.src_channel         (cmd_mux_003_src_channel),                             //  output,    width = 5,          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                       //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                         //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_005_source0_ready),                      //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_005_source0_valid),                      //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_005_source0_channel),                    //   input,    width = 5,          .channel
		.sink0_data          (mux_pipeline_005_source0_data),                       //   input,  width = 409,          .data
		.sink0_startofpacket (mux_pipeline_005_source0_startofpacket),              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_005_source0_endofpacket)                 //   input,    width = 1,          .endofpacket
	);

	top_hw_altera_merlin_multiplexer_191_ku3jpgy cmd_mux_004 (
		.clk                 (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset               (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                               //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_004_src_valid),                               //  output,    width = 1,          .valid
		.src_data            (cmd_mux_004_src_data),                                //  output,  width = 409,          .data
		.src_channel         (cmd_mux_004_src_channel),                             //  output,    width = 5,          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                       //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                         //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_006_source0_ready),                      //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_006_source0_valid),                      //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_006_source0_channel),                    //   input,    width = 5,          .channel
		.sink0_data          (mux_pipeline_006_source0_data),                       //   input,  width = 409,          .data
		.sink0_startofpacket (mux_pipeline_006_source0_startofpacket),              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_006_source0_endofpacket),                //   input,    width = 1,          .endofpacket
		.sink1_ready         (mux_pipeline_007_source0_ready),                      //  output,    width = 1,     sink1.ready
		.sink1_valid         (mux_pipeline_007_source0_valid),                      //   input,    width = 1,          .valid
		.sink1_channel       (mux_pipeline_007_source0_channel),                    //   input,    width = 5,          .channel
		.sink1_data          (mux_pipeline_007_source0_data),                       //   input,  width = 409,          .data
		.sink1_startofpacket (mux_pipeline_007_source0_startofpacket),              //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (mux_pipeline_007_source0_endofpacket)                 //   input,    width = 1,          .endofpacket
	);

	top_hw_altera_merlin_demultiplexer_191_hzqd6da rsp_demux (
		.clk                (emif_0_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset              (emif_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                                         //   input,    width = 5,          .channel
		.sink_data          (router_003_src_data),                                            //   input,  width = 697,          .data
		.sink_startofpacket (router_003_src_startofpacket),                                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                           //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                           //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                            //  output,  width = 697,          .data
		.src0_channel       (rsp_demux_src0_channel),                                         //  output,    width = 5,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                   //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                     //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                           //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                           //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_src1_data),                                            //  output,  width = 697,          .data
		.src1_channel       (rsp_demux_src1_channel),                                         //  output,    width = 5,          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                   //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                                     //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                                           //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                                           //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_src2_data),                                            //  output,  width = 697,          .data
		.src2_channel       (rsp_demux_src2_channel),                                         //  output,    width = 5,          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                                   //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket)                                      //  output,    width = 1,          .endofpacket
	);

	top_hw_altera_merlin_demultiplexer_191_gbjax7a rsp_demux_001 (
		.clk                (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset              (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_004_src_ready),                                //  output,    width = 1,      sink.ready
		.sink_channel       (router_004_src_channel),                              //   input,    width = 5,          .channel
		.sink_data          (router_004_src_data),                                 //   input,  width = 409,          .data
		.sink_startofpacket (router_004_src_startofpacket),                        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                          //   input,    width = 1,          .endofpacket
		.sink_valid         (router_004_src_valid),                                //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                            //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                            //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                             //  output,  width = 409,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                          //  output,    width = 5,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                       //  output,    width = 1,          .endofpacket
	);

	top_hw_altera_merlin_demultiplexer_191_gbjax7a rsp_demux_002 (
		.clk                (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset              (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_005_src_ready),                                //  output,    width = 1,      sink.ready
		.sink_channel       (router_005_src_channel),                              //   input,    width = 5,          .channel
		.sink_data          (router_005_src_data),                                 //   input,  width = 409,          .data
		.sink_startofpacket (router_005_src_startofpacket),                        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                          //   input,    width = 1,          .endofpacket
		.sink_valid         (router_005_src_valid),                                //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                            //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                            //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                             //  output,  width = 409,          .data
		.src0_channel       (rsp_demux_002_src0_channel),                          //  output,    width = 5,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                       //  output,    width = 1,          .endofpacket
	);

	top_hw_altera_merlin_demultiplexer_191_gbjax7a rsp_demux_003 (
		.clk                (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset              (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_006_src_ready),                                //  output,    width = 1,      sink.ready
		.sink_channel       (router_006_src_channel),                              //   input,    width = 5,          .channel
		.sink_data          (router_006_src_data),                                 //   input,  width = 409,          .data
		.sink_startofpacket (router_006_src_startofpacket),                        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                          //   input,    width = 1,          .endofpacket
		.sink_valid         (router_006_src_valid),                                //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                            //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                            //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_003_src0_data),                             //  output,  width = 409,          .data
		.src0_channel       (rsp_demux_003_src0_channel),                          //  output,    width = 5,          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                       //  output,    width = 1,          .endofpacket
	);

	top_hw_altera_merlin_demultiplexer_191_mozyuqi rsp_demux_004 (
		.clk                (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset              (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_007_src_ready),                                //  output,    width = 1,      sink.ready
		.sink_channel       (router_007_src_channel),                              //   input,    width = 5,          .channel
		.sink_data          (router_007_src_data),                                 //   input,  width = 409,          .data
		.sink_startofpacket (router_007_src_startofpacket),                        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                          //   input,    width = 1,          .endofpacket
		.sink_valid         (router_007_src_valid),                                //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                            //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                            //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_004_src0_data),                             //  output,  width = 409,          .data
		.src0_channel       (rsp_demux_004_src0_channel),                          //  output,    width = 5,          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                      //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                            //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                            //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_004_src1_data),                             //  output,  width = 409,          .data
		.src1_channel       (rsp_demux_004_src1_channel),                          //  output,    width = 5,          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                       //  output,    width = 1,          .endofpacket
	);

	top_hw_altera_merlin_multiplexer_191_pj2odpy rsp_mux (
		.clk                 (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset               (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                   //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                   //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                    //  output,  width = 409,          .data
		.src_channel         (rsp_mux_src_channel),                                 //  output,    width = 5,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_008_source0_ready),                      //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_008_source0_valid),                      //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_008_source0_channel),                    //   input,    width = 5,          .channel
		.sink0_data          (mux_pipeline_008_source0_data),                       //   input,  width = 409,          .data
		.sink0_startofpacket (mux_pipeline_008_source0_startofpacket),              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_008_source0_endofpacket),                //   input,    width = 1,          .endofpacket
		.sink1_ready         (mux_pipeline_009_source0_ready),                      //  output,    width = 1,     sink1.ready
		.sink1_valid         (mux_pipeline_009_source0_valid),                      //   input,    width = 1,          .valid
		.sink1_channel       (mux_pipeline_009_source0_channel),                    //   input,    width = 5,          .channel
		.sink1_data          (mux_pipeline_009_source0_data),                       //   input,  width = 409,          .data
		.sink1_startofpacket (mux_pipeline_009_source0_startofpacket),              //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (mux_pipeline_009_source0_endofpacket),                //   input,    width = 1,          .endofpacket
		.sink2_ready         (mux_pipeline_010_source0_ready),                      //  output,    width = 1,     sink2.ready
		.sink2_valid         (mux_pipeline_010_source0_valid),                      //   input,    width = 1,          .valid
		.sink2_channel       (mux_pipeline_010_source0_channel),                    //   input,    width = 5,          .channel
		.sink2_data          (mux_pipeline_010_source0_data),                       //   input,  width = 409,          .data
		.sink2_startofpacket (mux_pipeline_010_source0_startofpacket),              //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (mux_pipeline_010_source0_endofpacket),                //   input,    width = 1,          .endofpacket
		.sink3_ready         (mux_pipeline_011_source0_ready),                      //  output,    width = 1,     sink3.ready
		.sink3_valid         (mux_pipeline_011_source0_valid),                      //   input,    width = 1,          .valid
		.sink3_channel       (mux_pipeline_011_source0_channel),                    //   input,    width = 5,          .channel
		.sink3_data          (mux_pipeline_011_source0_data),                       //   input,  width = 409,          .data
		.sink3_startofpacket (mux_pipeline_011_source0_startofpacket),              //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (mux_pipeline_011_source0_endofpacket)                 //   input,    width = 1,          .endofpacket
	);

	top_hw_altera_merlin_multiplexer_191_lrmpvga rsp_mux_001 (
		.clk                 (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset               (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                               //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                               //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                                //  output,  width = 409,          .data
		.src_channel         (rsp_mux_001_src_channel),                             //  output,    width = 5,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                       //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                         //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_012_source0_ready),                      //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_012_source0_valid),                      //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_012_source0_channel),                    //   input,    width = 5,          .channel
		.sink0_data          (mux_pipeline_012_source0_data),                       //   input,  width = 409,          .data
		.sink0_startofpacket (mux_pipeline_012_source0_startofpacket),              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_012_source0_endofpacket),                //   input,    width = 1,          .endofpacket
		.sink1_ready         (mux_pipeline_013_source0_ready),                      //  output,    width = 1,     sink1.ready
		.sink1_valid         (mux_pipeline_013_source0_valid),                      //   input,    width = 1,          .valid
		.sink1_channel       (mux_pipeline_013_source0_channel),                    //   input,    width = 5,          .channel
		.sink1_data          (mux_pipeline_013_source0_data),                       //   input,  width = 409,          .data
		.sink1_startofpacket (mux_pipeline_013_source0_startofpacket),              //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (mux_pipeline_013_source0_endofpacket)                 //   input,    width = 1,          .endofpacket
	);

	top_hw_altera_merlin_multiplexer_191_25cmumq rsp_mux_002 (
		.clk                 (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset               (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                               //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_002_src_valid),                               //  output,    width = 1,          .valid
		.src_data            (rsp_mux_002_src_data),                                //  output,  width = 157,          .data
		.src_channel         (rsp_mux_002_src_channel),                             //  output,    width = 5,          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                       //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                         //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_014_source0_ready),                      //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_014_source0_valid),                      //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_014_source0_channel),                    //   input,    width = 5,          .channel
		.sink0_data          (mux_pipeline_014_source0_data),                       //   input,  width = 157,          .data
		.sink0_startofpacket (mux_pipeline_014_source0_startofpacket),              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_014_source0_endofpacket),                //   input,    width = 1,          .endofpacket
		.sink1_ready         (mux_pipeline_015_source0_ready),                      //  output,    width = 1,     sink1.ready
		.sink1_valid         (mux_pipeline_015_source0_valid),                      //   input,    width = 1,          .valid
		.sink1_channel       (mux_pipeline_015_source0_channel),                    //   input,    width = 5,          .channel
		.sink1_data          (mux_pipeline_015_source0_data),                       //   input,  width = 157,          .data
		.sink1_startofpacket (mux_pipeline_015_source0_startofpacket),              //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (mux_pipeline_015_source0_endofpacket)                 //   input,    width = 1,          .endofpacket
	);

	top_hw_altera_merlin_width_adapter_191_i6xyepy #(
		.IN_PKT_ADDR_H                 (351),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (370),
		.IN_PKT_BYTE_CNT_L             (358),
		.IN_PKT_TRANS_COMPRESSED_READ  (352),
		.IN_PKT_TRANS_WRITE            (354),
		.IN_PKT_BURSTWRAP_H            (371),
		.IN_PKT_BURSTWRAP_L            (371),
		.IN_PKT_BURST_SIZE_H           (374),
		.IN_PKT_BURST_SIZE_L           (372),
		.IN_PKT_RESPONSE_STATUS_H      (396),
		.IN_PKT_RESPONSE_STATUS_L      (395),
		.IN_PKT_TRANS_EXCLUSIVE        (357),
		.IN_PKT_BURST_TYPE_H           (376),
		.IN_PKT_BURST_TYPE_L           (375),
		.IN_PKT_ORI_BURST_SIZE_L       (397),
		.IN_PKT_ORI_BURST_SIZE_H       (399),
		.IN_ST_DATA_W                  (409),
		.OUT_PKT_ADDR_H                (639),
		.OUT_PKT_ADDR_L                (576),
		.OUT_PKT_DATA_H                (511),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (575),
		.OUT_PKT_BYTEEN_L              (512),
		.OUT_PKT_BYTE_CNT_H            (658),
		.OUT_PKT_BYTE_CNT_L            (646),
		.OUT_PKT_TRANS_COMPRESSED_READ (640),
		.OUT_PKT_BURST_SIZE_H          (662),
		.OUT_PKT_BURST_SIZE_L          (660),
		.OUT_PKT_RESPONSE_STATUS_H     (684),
		.OUT_PKT_RESPONSE_STATUS_L     (683),
		.OUT_PKT_TRANS_EXCLUSIVE       (645),
		.OUT_PKT_BURST_TYPE_H          (664),
		.OUT_PKT_BURST_TYPE_L          (663),
		.OUT_PKT_ORI_BURST_SIZE_L      (685),
		.OUT_PKT_ORI_BURST_SIZE_H      (687),
		.OUT_ST_DATA_W                 (697),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) dut_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter (
		.clk                  (DUT_coreclkout_hip_clk),                                                     //   input,    width = 1,       clk.clk
		.reset                (onchip_memory2_0_reset2_reset_bridge_in_reset_reset),                        //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_src0_valid),                                                       //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_src0_channel),                                                     //   input,    width = 5,          .channel
		.in_startofpacket     (cmd_demux_src0_startofpacket),                                               //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_src0_endofpacket),                                                 //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_src0_ready),                                                       //  output,    width = 1,          .ready
		.in_data              (cmd_demux_src0_data),                                                        //   input,  width = 409,          .data
		.out_endofpacket      (dut_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (dut_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_data),          //  output,  width = 697,          .data
		.out_channel          (dut_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_channel),       //  output,    width = 5,          .channel
		.out_valid            (dut_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (dut_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (dut_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated),                         
	);

	top_hw_altera_merlin_width_adapter_191_i6xyepy #(
		.IN_PKT_ADDR_H                 (351),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (370),
		.IN_PKT_BYTE_CNT_L             (358),
		.IN_PKT_TRANS_COMPRESSED_READ  (352),
		.IN_PKT_TRANS_WRITE            (354),
		.IN_PKT_BURSTWRAP_H            (371),
		.IN_PKT_BURSTWRAP_L            (371),
		.IN_PKT_BURST_SIZE_H           (374),
		.IN_PKT_BURST_SIZE_L           (372),
		.IN_PKT_RESPONSE_STATUS_H      (396),
		.IN_PKT_RESPONSE_STATUS_L      (395),
		.IN_PKT_TRANS_EXCLUSIVE        (357),
		.IN_PKT_BURST_TYPE_H           (376),
		.IN_PKT_BURST_TYPE_L           (375),
		.IN_PKT_ORI_BURST_SIZE_L       (397),
		.IN_PKT_ORI_BURST_SIZE_H       (399),
		.IN_ST_DATA_W                  (409),
		.OUT_PKT_ADDR_H                (639),
		.OUT_PKT_ADDR_L                (576),
		.OUT_PKT_DATA_H                (511),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (575),
		.OUT_PKT_BYTEEN_L              (512),
		.OUT_PKT_BYTE_CNT_H            (658),
		.OUT_PKT_BYTE_CNT_L            (646),
		.OUT_PKT_TRANS_COMPRESSED_READ (640),
		.OUT_PKT_BURST_SIZE_H          (662),
		.OUT_PKT_BURST_SIZE_L          (660),
		.OUT_PKT_RESPONSE_STATUS_H     (684),
		.OUT_PKT_RESPONSE_STATUS_L     (683),
		.OUT_PKT_TRANS_EXCLUSIVE       (645),
		.OUT_PKT_BURST_TYPE_H          (664),
		.OUT_PKT_BURST_TYPE_L          (663),
		.OUT_PKT_ORI_BURST_SIZE_L      (685),
		.OUT_PKT_ORI_BURST_SIZE_H      (687),
		.OUT_ST_DATA_W                 (697),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) dut_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter (
		.clk                  (DUT_coreclkout_hip_clk),                                                     //   input,    width = 1,       clk.clk
		.reset                (onchip_memory2_0_reset2_reset_bridge_in_reset_reset),                        //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_001_src0_valid),                                                   //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_001_src0_channel),                                                 //   input,    width = 5,          .channel
		.in_startofpacket     (cmd_demux_001_src0_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_001_src0_endofpacket),                                             //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_001_src0_ready),                                                   //  output,    width = 1,          .ready
		.in_data              (cmd_demux_001_src0_data),                                                    //   input,  width = 409,          .data
		.out_endofpacket      (dut_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (dut_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_data),          //  output,  width = 697,          .data
		.out_channel          (dut_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_channel),       //  output,    width = 5,          .channel
		.out_valid            (dut_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (dut_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (dut_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated),                         
	);

	top_hw_altera_merlin_width_adapter_191_ff67b3i #(
		.IN_PKT_ADDR_H                 (99),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (118),
		.IN_PKT_BYTE_CNT_L             (106),
		.IN_PKT_TRANS_COMPRESSED_READ  (100),
		.IN_PKT_TRANS_WRITE            (102),
		.IN_PKT_BURSTWRAP_H            (119),
		.IN_PKT_BURSTWRAP_L            (119),
		.IN_PKT_BURST_SIZE_H           (122),
		.IN_PKT_BURST_SIZE_L           (120),
		.IN_PKT_RESPONSE_STATUS_H      (144),
		.IN_PKT_RESPONSE_STATUS_L      (143),
		.IN_PKT_TRANS_EXCLUSIVE        (105),
		.IN_PKT_BURST_TYPE_H           (124),
		.IN_PKT_BURST_TYPE_L           (123),
		.IN_PKT_ORI_BURST_SIZE_L       (145),
		.IN_PKT_ORI_BURST_SIZE_H       (147),
		.IN_ST_DATA_W                  (157),
		.OUT_PKT_ADDR_H                (639),
		.OUT_PKT_ADDR_L                (576),
		.OUT_PKT_DATA_H                (511),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (575),
		.OUT_PKT_BYTEEN_L              (512),
		.OUT_PKT_BYTE_CNT_H            (658),
		.OUT_PKT_BYTE_CNT_L            (646),
		.OUT_PKT_TRANS_COMPRESSED_READ (640),
		.OUT_PKT_BURST_SIZE_H          (662),
		.OUT_PKT_BURST_SIZE_L          (660),
		.OUT_PKT_RESPONSE_STATUS_H     (684),
		.OUT_PKT_RESPONSE_STATUS_L     (683),
		.OUT_PKT_TRANS_EXCLUSIVE       (645),
		.OUT_PKT_BURST_TYPE_H          (664),
		.OUT_PKT_BURST_TYPE_L          (663),
		.OUT_PKT_ORI_BURST_SIZE_L      (685),
		.OUT_PKT_ORI_BURST_SIZE_H      (687),
		.OUT_ST_DATA_W                 (697),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) dut_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter (
		.clk                  (DUT_coreclkout_hip_clk),                                                //   input,    width = 1,       clk.clk
		.reset                (onchip_memory2_0_reset2_reset_bridge_in_reset_reset),                   //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_002_src0_valid),                                              //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_002_src0_channel),                                            //   input,    width = 5,          .channel
		.in_startofpacket     (cmd_demux_002_src0_startofpacket),                                      //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_002_src0_endofpacket),                                        //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_002_src0_ready),                                              //  output,    width = 1,          .ready
		.in_data              (cmd_demux_002_src0_data),                                               //   input,  width = 157,          .data
		.out_endofpacket      (dut_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (dut_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_data),          //  output,  width = 697,          .data
		.out_channel          (dut_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_channel),       //  output,    width = 5,          .channel
		.out_valid            (dut_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (dut_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (dut_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated),                         
	);

	top_hw_altera_merlin_width_adapter_191_op7abui #(
		.IN_PKT_ADDR_H                 (99),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (118),
		.IN_PKT_BYTE_CNT_L             (106),
		.IN_PKT_TRANS_COMPRESSED_READ  (100),
		.IN_PKT_TRANS_WRITE            (102),
		.IN_PKT_BURSTWRAP_H            (119),
		.IN_PKT_BURSTWRAP_L            (119),
		.IN_PKT_BURST_SIZE_H           (122),
		.IN_PKT_BURST_SIZE_L           (120),
		.IN_PKT_RESPONSE_STATUS_H      (144),
		.IN_PKT_RESPONSE_STATUS_L      (143),
		.IN_PKT_TRANS_EXCLUSIVE        (105),
		.IN_PKT_BURST_TYPE_H           (124),
		.IN_PKT_BURST_TYPE_L           (123),
		.IN_PKT_ORI_BURST_SIZE_L       (145),
		.IN_PKT_ORI_BURST_SIZE_H       (147),
		.IN_ST_DATA_W                  (157),
		.OUT_PKT_ADDR_H                (351),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (370),
		.OUT_PKT_BYTE_CNT_L            (358),
		.OUT_PKT_TRANS_COMPRESSED_READ (352),
		.OUT_PKT_BURST_SIZE_H          (374),
		.OUT_PKT_BURST_SIZE_L          (372),
		.OUT_PKT_RESPONSE_STATUS_H     (396),
		.OUT_PKT_RESPONSE_STATUS_L     (395),
		.OUT_PKT_TRANS_EXCLUSIVE       (357),
		.OUT_PKT_BURST_TYPE_H          (376),
		.OUT_PKT_BURST_TYPE_L          (375),
		.OUT_PKT_ORI_BURST_SIZE_L      (397),
		.OUT_PKT_ORI_BURST_SIZE_H      (399),
		.OUT_ST_DATA_W                 (409),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) dut_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter (
		.clk                  (DUT_coreclkout_hip_clk),                                                  //   input,    width = 1,       clk.clk
		.reset                (onchip_memory2_0_reset2_reset_bridge_in_reset_reset),                     //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_002_src1_valid),                                                //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_002_src1_channel),                                              //   input,    width = 5,          .channel
		.in_startofpacket     (cmd_demux_002_src1_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_002_src1_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_002_src1_ready),                                                //  output,    width = 1,          .ready
		.in_data              (cmd_demux_002_src1_data),                                                 //   input,  width = 157,          .data
		.out_endofpacket      (dut_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (dut_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter_src_data),          //  output,  width = 409,          .data
		.out_channel          (dut_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel),       //  output,    width = 5,          .channel
		.out_valid            (dut_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (dut_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (dut_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated),                         
	);

	top_hw_altera_merlin_width_adapter_191_jigh62i #(
		.IN_PKT_ADDR_H                 (639),
		.IN_PKT_ADDR_L                 (576),
		.IN_PKT_DATA_H                 (511),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (575),
		.IN_PKT_BYTEEN_L               (512),
		.IN_PKT_BYTE_CNT_H             (658),
		.IN_PKT_BYTE_CNT_L             (646),
		.IN_PKT_TRANS_COMPRESSED_READ  (640),
		.IN_PKT_TRANS_WRITE            (642),
		.IN_PKT_BURSTWRAP_H            (659),
		.IN_PKT_BURSTWRAP_L            (659),
		.IN_PKT_BURST_SIZE_H           (662),
		.IN_PKT_BURST_SIZE_L           (660),
		.IN_PKT_RESPONSE_STATUS_H      (684),
		.IN_PKT_RESPONSE_STATUS_L      (683),
		.IN_PKT_TRANS_EXCLUSIVE        (645),
		.IN_PKT_BURST_TYPE_H           (664),
		.IN_PKT_BURST_TYPE_L           (663),
		.IN_PKT_ORI_BURST_SIZE_L       (685),
		.IN_PKT_ORI_BURST_SIZE_H       (687),
		.IN_ST_DATA_W                  (697),
		.OUT_PKT_ADDR_H                (351),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (370),
		.OUT_PKT_BYTE_CNT_L            (358),
		.OUT_PKT_TRANS_COMPRESSED_READ (352),
		.OUT_PKT_BURST_SIZE_H          (374),
		.OUT_PKT_BURST_SIZE_L          (372),
		.OUT_PKT_RESPONSE_STATUS_H     (396),
		.OUT_PKT_RESPONSE_STATUS_L     (395),
		.OUT_PKT_TRANS_EXCLUSIVE       (357),
		.OUT_PKT_BURST_TYPE_H          (376),
		.OUT_PKT_BURST_TYPE_L          (375),
		.OUT_PKT_ORI_BURST_SIZE_L      (397),
		.OUT_PKT_ORI_BURST_SIZE_H      (399),
		.OUT_ST_DATA_W                 (409),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) emif_0_ctrl_amm_0_to_dut_dma_rd_master_rsp_width_adapter (
		.clk                  (emif_0_emif_usr_clk_clk),                                                    //   input,    width = 1,       clk.clk
		.reset                (emif_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_src0_valid),                                                       //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_src0_channel),                                                     //   input,    width = 5,          .channel
		.in_startofpacket     (rsp_demux_src0_startofpacket),                                               //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_src0_endofpacket),                                                 //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_src0_ready),                                                       //  output,    width = 1,          .ready
		.in_data              (rsp_demux_src0_data),                                                        //   input,  width = 697,          .data
		.out_endofpacket      (emif_0_ctrl_amm_0_to_dut_dma_rd_master_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (emif_0_ctrl_amm_0_to_dut_dma_rd_master_rsp_width_adapter_src_data),          //  output,  width = 409,          .data
		.out_channel          (emif_0_ctrl_amm_0_to_dut_dma_rd_master_rsp_width_adapter_src_channel),       //  output,    width = 5,          .channel
		.out_valid            (emif_0_ctrl_amm_0_to_dut_dma_rd_master_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (emif_0_ctrl_amm_0_to_dut_dma_rd_master_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (emif_0_ctrl_amm_0_to_dut_dma_rd_master_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated),                         
	);

	top_hw_altera_merlin_width_adapter_191_jigh62i #(
		.IN_PKT_ADDR_H                 (639),
		.IN_PKT_ADDR_L                 (576),
		.IN_PKT_DATA_H                 (511),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (575),
		.IN_PKT_BYTEEN_L               (512),
		.IN_PKT_BYTE_CNT_H             (658),
		.IN_PKT_BYTE_CNT_L             (646),
		.IN_PKT_TRANS_COMPRESSED_READ  (640),
		.IN_PKT_TRANS_WRITE            (642),
		.IN_PKT_BURSTWRAP_H            (659),
		.IN_PKT_BURSTWRAP_L            (659),
		.IN_PKT_BURST_SIZE_H           (662),
		.IN_PKT_BURST_SIZE_L           (660),
		.IN_PKT_RESPONSE_STATUS_H      (684),
		.IN_PKT_RESPONSE_STATUS_L      (683),
		.IN_PKT_TRANS_EXCLUSIVE        (645),
		.IN_PKT_BURST_TYPE_H           (664),
		.IN_PKT_BURST_TYPE_L           (663),
		.IN_PKT_ORI_BURST_SIZE_L       (685),
		.IN_PKT_ORI_BURST_SIZE_H       (687),
		.IN_ST_DATA_W                  (697),
		.OUT_PKT_ADDR_H                (351),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (370),
		.OUT_PKT_BYTE_CNT_L            (358),
		.OUT_PKT_TRANS_COMPRESSED_READ (352),
		.OUT_PKT_BURST_SIZE_H          (374),
		.OUT_PKT_BURST_SIZE_L          (372),
		.OUT_PKT_RESPONSE_STATUS_H     (396),
		.OUT_PKT_RESPONSE_STATUS_L     (395),
		.OUT_PKT_TRANS_EXCLUSIVE       (357),
		.OUT_PKT_BURST_TYPE_H          (376),
		.OUT_PKT_BURST_TYPE_L          (375),
		.OUT_PKT_ORI_BURST_SIZE_L      (397),
		.OUT_PKT_ORI_BURST_SIZE_H      (399),
		.OUT_ST_DATA_W                 (409),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) emif_0_ctrl_amm_0_to_dut_dma_wr_master_rsp_width_adapter (
		.clk                  (emif_0_emif_usr_clk_clk),                                                    //   input,    width = 1,       clk.clk
		.reset                (emif_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_src1_valid),                                                       //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_src1_channel),                                                     //   input,    width = 5,          .channel
		.in_startofpacket     (rsp_demux_src1_startofpacket),                                               //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_src1_endofpacket),                                                 //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_src1_ready),                                                       //  output,    width = 1,          .ready
		.in_data              (rsp_demux_src1_data),                                                        //   input,  width = 697,          .data
		.out_endofpacket      (emif_0_ctrl_amm_0_to_dut_dma_wr_master_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (emif_0_ctrl_amm_0_to_dut_dma_wr_master_rsp_width_adapter_src_data),          //  output,  width = 409,          .data
		.out_channel          (emif_0_ctrl_amm_0_to_dut_dma_wr_master_rsp_width_adapter_src_channel),       //  output,    width = 5,          .channel
		.out_valid            (emif_0_ctrl_amm_0_to_dut_dma_wr_master_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (emif_0_ctrl_amm_0_to_dut_dma_wr_master_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (emif_0_ctrl_amm_0_to_dut_dma_wr_master_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated),                         
	);

	top_hw_altera_merlin_width_adapter_191_zevtati #(
		.IN_PKT_ADDR_H                 (639),
		.IN_PKT_ADDR_L                 (576),
		.IN_PKT_DATA_H                 (511),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (575),
		.IN_PKT_BYTEEN_L               (512),
		.IN_PKT_BYTE_CNT_H             (658),
		.IN_PKT_BYTE_CNT_L             (646),
		.IN_PKT_TRANS_COMPRESSED_READ  (640),
		.IN_PKT_TRANS_WRITE            (642),
		.IN_PKT_BURSTWRAP_H            (659),
		.IN_PKT_BURSTWRAP_L            (659),
		.IN_PKT_BURST_SIZE_H           (662),
		.IN_PKT_BURST_SIZE_L           (660),
		.IN_PKT_RESPONSE_STATUS_H      (684),
		.IN_PKT_RESPONSE_STATUS_L      (683),
		.IN_PKT_TRANS_EXCLUSIVE        (645),
		.IN_PKT_BURST_TYPE_H           (664),
		.IN_PKT_BURST_TYPE_L           (663),
		.IN_PKT_ORI_BURST_SIZE_L       (685),
		.IN_PKT_ORI_BURST_SIZE_H       (687),
		.IN_ST_DATA_W                  (697),
		.OUT_PKT_ADDR_H                (99),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (118),
		.OUT_PKT_BYTE_CNT_L            (106),
		.OUT_PKT_TRANS_COMPRESSED_READ (100),
		.OUT_PKT_BURST_SIZE_H          (122),
		.OUT_PKT_BURST_SIZE_L          (120),
		.OUT_PKT_RESPONSE_STATUS_H     (144),
		.OUT_PKT_RESPONSE_STATUS_L     (143),
		.OUT_PKT_TRANS_EXCLUSIVE       (105),
		.OUT_PKT_BURST_TYPE_H          (124),
		.OUT_PKT_BURST_TYPE_L          (123),
		.OUT_PKT_ORI_BURST_SIZE_L      (145),
		.OUT_PKT_ORI_BURST_SIZE_H      (147),
		.OUT_ST_DATA_W                 (157),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) emif_0_ctrl_amm_0_to_dut_rxm_bar2_rsp_width_adapter (
		.clk                  (emif_0_emif_usr_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset                (emif_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset),        //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_src2_valid),                                                  //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_src2_channel),                                                //   input,    width = 5,          .channel
		.in_startofpacket     (rsp_demux_src2_startofpacket),                                          //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_src2_endofpacket),                                            //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_src2_ready),                                                  //  output,    width = 1,          .ready
		.in_data              (rsp_demux_src2_data),                                                   //   input,  width = 697,          .data
		.out_endofpacket      (emif_0_ctrl_amm_0_to_dut_rxm_bar2_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (emif_0_ctrl_amm_0_to_dut_rxm_bar2_rsp_width_adapter_src_data),          //  output,  width = 157,          .data
		.out_channel          (emif_0_ctrl_amm_0_to_dut_rxm_bar2_rsp_width_adapter_src_channel),       //  output,    width = 5,          .channel
		.out_valid            (emif_0_ctrl_amm_0_to_dut_rxm_bar2_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (emif_0_ctrl_amm_0_to_dut_rxm_bar2_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (emif_0_ctrl_amm_0_to_dut_rxm_bar2_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated),                         
	);

	top_hw_altera_merlin_width_adapter_191_6qisuny #(
		.IN_PKT_ADDR_H                 (351),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (370),
		.IN_PKT_BYTE_CNT_L             (358),
		.IN_PKT_TRANS_COMPRESSED_READ  (352),
		.IN_PKT_TRANS_WRITE            (354),
		.IN_PKT_BURSTWRAP_H            (371),
		.IN_PKT_BURSTWRAP_L            (371),
		.IN_PKT_BURST_SIZE_H           (374),
		.IN_PKT_BURST_SIZE_L           (372),
		.IN_PKT_RESPONSE_STATUS_H      (396),
		.IN_PKT_RESPONSE_STATUS_L      (395),
		.IN_PKT_TRANS_EXCLUSIVE        (357),
		.IN_PKT_BURST_TYPE_H           (376),
		.IN_PKT_BURST_TYPE_L           (375),
		.IN_PKT_ORI_BURST_SIZE_L       (397),
		.IN_PKT_ORI_BURST_SIZE_H       (399),
		.IN_ST_DATA_W                  (409),
		.OUT_PKT_ADDR_H                (99),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (118),
		.OUT_PKT_BYTE_CNT_L            (106),
		.OUT_PKT_TRANS_COMPRESSED_READ (100),
		.OUT_PKT_BURST_SIZE_H          (122),
		.OUT_PKT_BURST_SIZE_L          (120),
		.OUT_PKT_RESPONSE_STATUS_H     (144),
		.OUT_PKT_RESPONSE_STATUS_L     (143),
		.OUT_PKT_TRANS_EXCLUSIVE       (105),
		.OUT_PKT_BURST_TYPE_H          (124),
		.OUT_PKT_BURST_TYPE_L          (123),
		.OUT_PKT_ORI_BURST_SIZE_L      (145),
		.OUT_PKT_ORI_BURST_SIZE_H      (147),
		.OUT_ST_DATA_W                 (157),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) onchip_memory2_0_s1_to_dut_rxm_bar2_rsp_width_adapter (
		.clk                  (DUT_coreclkout_hip_clk),                                                  //   input,    width = 1,       clk.clk
		.reset                (onchip_memory2_0_reset2_reset_bridge_in_reset_reset),                     //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_004_src1_valid),                                                //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_004_src1_channel),                                              //   input,    width = 5,          .channel
		.in_startofpacket     (rsp_demux_004_src1_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_004_src1_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_004_src1_ready),                                                //  output,    width = 1,          .ready
		.in_data              (rsp_demux_004_src1_data),                                                 //   input,  width = 409,          .data
		.out_endofpacket      (onchip_memory2_0_s1_to_dut_rxm_bar2_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (onchip_memory2_0_s1_to_dut_rxm_bar2_rsp_width_adapter_src_data),          //  output,  width = 157,          .data
		.out_channel          (onchip_memory2_0_s1_to_dut_rxm_bar2_rsp_width_adapter_src_channel),       //  output,    width = 5,          .channel
		.out_valid            (onchip_memory2_0_s1_to_dut_rxm_bar2_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (onchip_memory2_0_s1_to_dut_rxm_bar2_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (onchip_memory2_0_s1_to_dut_rxm_bar2_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated),                         
	);

	top_hw_altera_avalon_dc_fifo_191_7gx45aq #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (697),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (5),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3),
		.SYNC_RESET         (0)
	) async_fifo (
		.in_clk             (DUT_coreclkout_hip_clk),                                                     //   input,    width = 1,        in_clk.clk
		.in_reset_n         (~onchip_memory2_0_reset2_reset_bridge_in_reset_reset),                       //   input,    width = 1,  in_clk_reset.reset_n
		.out_clk            (emif_0_emif_usr_clk_clk),                                                    //   input,    width = 1,       out_clk.clk
		.out_reset_n        (~emif_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset),            //   input,    width = 1, out_clk_reset.reset_n
		.in_data            (dut_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_data),          //   input,  width = 697,            in.data
		.in_valid           (dut_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_valid),         //   input,    width = 1,              .valid
		.in_ready           (dut_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_ready),         //  output,    width = 1,              .ready
		.in_startofpacket   (dut_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_startofpacket), //   input,    width = 1,              .startofpacket
		.in_endofpacket     (dut_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,              .endofpacket
		.in_channel         (dut_dma_rd_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_channel),       //   input,    width = 5,              .channel
		.out_data           (async_fifo_out_data),                                                        //  output,  width = 697,           out.data
		.out_valid          (async_fifo_out_valid),                                                       //  output,    width = 1,              .valid
		.out_ready          (async_fifo_out_ready),                                                       //   input,    width = 1,              .ready
		.out_startofpacket  (async_fifo_out_startofpacket),                                               //  output,    width = 1,              .startofpacket
		.out_endofpacket    (async_fifo_out_endofpacket),                                                 //  output,    width = 1,              .endofpacket
		.out_channel        (async_fifo_out_channel),                                                     //  output,    width = 5,              .channel
		.in_csr_address     (1'b0),                                                                       // (terminated),                             
		.in_csr_read        (1'b0),                                                                       // (terminated),                             
		.in_csr_write       (1'b0),                                                                       // (terminated),                             
		.in_csr_readdata    (),                                                                           // (terminated),                             
		.in_csr_writedata   (32'b00000000000000000000000000000000),                                       // (terminated),                             
		.out_csr_address    (1'b0),                                                                       // (terminated),                             
		.out_csr_read       (1'b0),                                                                       // (terminated),                             
		.out_csr_write      (1'b0),                                                                       // (terminated),                             
		.out_csr_readdata   (),                                                                           // (terminated),                             
		.out_csr_writedata  (32'b00000000000000000000000000000000),                                       // (terminated),                             
		.in_empty           (1'b0),                                                                       // (terminated),                             
		.out_empty          (),                                                                           // (terminated),                             
		.in_error           (1'b0),                                                                       // (terminated),                             
		.out_error          (),                                                                           // (terminated),                             
		.space_avail_data   (),                                                                           // (terminated),                             
		.almost_full_valid  (),                                                                           // (terminated),                             
		.almost_full_data   (),                                                                           // (terminated),                             
		.almost_empty_valid (),                                                                           // (terminated),                             
		.almost_empty_data  ()                                                                            // (terminated),                             
	);

	top_hw_altera_avalon_dc_fifo_191_7gx45aq #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (697),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (5),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3),
		.SYNC_RESET         (0)
	) async_fifo_001 (
		.in_clk             (DUT_coreclkout_hip_clk),                                                     //   input,    width = 1,        in_clk.clk
		.in_reset_n         (~onchip_memory2_0_reset2_reset_bridge_in_reset_reset),                       //   input,    width = 1,  in_clk_reset.reset_n
		.out_clk            (emif_0_emif_usr_clk_clk),                                                    //   input,    width = 1,       out_clk.clk
		.out_reset_n        (~emif_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset),            //   input,    width = 1, out_clk_reset.reset_n
		.in_data            (dut_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_data),          //   input,  width = 697,            in.data
		.in_valid           (dut_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_valid),         //   input,    width = 1,              .valid
		.in_ready           (dut_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_ready),         //  output,    width = 1,              .ready
		.in_startofpacket   (dut_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_startofpacket), //   input,    width = 1,              .startofpacket
		.in_endofpacket     (dut_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,              .endofpacket
		.in_channel         (dut_dma_wr_master_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_channel),       //   input,    width = 5,              .channel
		.out_data           (async_fifo_001_out_data),                                                    //  output,  width = 697,           out.data
		.out_valid          (async_fifo_001_out_valid),                                                   //  output,    width = 1,              .valid
		.out_ready          (async_fifo_001_out_ready),                                                   //   input,    width = 1,              .ready
		.out_startofpacket  (async_fifo_001_out_startofpacket),                                           //  output,    width = 1,              .startofpacket
		.out_endofpacket    (async_fifo_001_out_endofpacket),                                             //  output,    width = 1,              .endofpacket
		.out_channel        (async_fifo_001_out_channel),                                                 //  output,    width = 5,              .channel
		.in_csr_address     (1'b0),                                                                       // (terminated),                             
		.in_csr_read        (1'b0),                                                                       // (terminated),                             
		.in_csr_write       (1'b0),                                                                       // (terminated),                             
		.in_csr_readdata    (),                                                                           // (terminated),                             
		.in_csr_writedata   (32'b00000000000000000000000000000000),                                       // (terminated),                             
		.out_csr_address    (1'b0),                                                                       // (terminated),                             
		.out_csr_read       (1'b0),                                                                       // (terminated),                             
		.out_csr_write      (1'b0),                                                                       // (terminated),                             
		.out_csr_readdata   (),                                                                           // (terminated),                             
		.out_csr_writedata  (32'b00000000000000000000000000000000),                                       // (terminated),                             
		.in_empty           (1'b0),                                                                       // (terminated),                             
		.out_empty          (),                                                                           // (terminated),                             
		.in_error           (1'b0),                                                                       // (terminated),                             
		.out_error          (),                                                                           // (terminated),                             
		.space_avail_data   (),                                                                           // (terminated),                             
		.almost_full_valid  (),                                                                           // (terminated),                             
		.almost_full_data   (),                                                                           // (terminated),                             
		.almost_empty_valid (),                                                                           // (terminated),                             
		.almost_empty_data  ()                                                                            // (terminated),                             
	);

	top_hw_altera_avalon_dc_fifo_191_7gx45aq #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (697),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (5),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3),
		.SYNC_RESET         (0)
	) async_fifo_002 (
		.in_clk             (DUT_coreclkout_hip_clk),                                                //   input,    width = 1,        in_clk.clk
		.in_reset_n         (~onchip_memory2_0_reset2_reset_bridge_in_reset_reset),                  //   input,    width = 1,  in_clk_reset.reset_n
		.out_clk            (emif_0_emif_usr_clk_clk),                                               //   input,    width = 1,       out_clk.clk
		.out_reset_n        (~emif_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, out_clk_reset.reset_n
		.in_data            (dut_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_data),          //   input,  width = 697,            in.data
		.in_valid           (dut_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_valid),         //   input,    width = 1,              .valid
		.in_ready           (dut_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_ready),         //  output,    width = 1,              .ready
		.in_startofpacket   (dut_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_startofpacket), //   input,    width = 1,              .startofpacket
		.in_endofpacket     (dut_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,              .endofpacket
		.in_channel         (dut_rxm_bar2_to_emif_0_ctrl_amm_0_cmd_width_adapter_src_channel),       //   input,    width = 5,              .channel
		.out_data           (async_fifo_002_out_data),                                               //  output,  width = 697,           out.data
		.out_valid          (async_fifo_002_out_valid),                                              //  output,    width = 1,              .valid
		.out_ready          (async_fifo_002_out_ready),                                              //   input,    width = 1,              .ready
		.out_startofpacket  (async_fifo_002_out_startofpacket),                                      //  output,    width = 1,              .startofpacket
		.out_endofpacket    (async_fifo_002_out_endofpacket),                                        //  output,    width = 1,              .endofpacket
		.out_channel        (async_fifo_002_out_channel),                                            //  output,    width = 5,              .channel
		.in_csr_address     (1'b0),                                                                  // (terminated),                             
		.in_csr_read        (1'b0),                                                                  // (terminated),                             
		.in_csr_write       (1'b0),                                                                  // (terminated),                             
		.in_csr_readdata    (),                                                                      // (terminated),                             
		.in_csr_writedata   (32'b00000000000000000000000000000000),                                  // (terminated),                             
		.out_csr_address    (1'b0),                                                                  // (terminated),                             
		.out_csr_read       (1'b0),                                                                  // (terminated),                             
		.out_csr_write      (1'b0),                                                                  // (terminated),                             
		.out_csr_readdata   (),                                                                      // (terminated),                             
		.out_csr_writedata  (32'b00000000000000000000000000000000),                                  // (terminated),                             
		.in_empty           (1'b0),                                                                  // (terminated),                             
		.out_empty          (),                                                                      // (terminated),                             
		.in_error           (1'b0),                                                                  // (terminated),                             
		.out_error          (),                                                                      // (terminated),                             
		.space_avail_data   (),                                                                      // (terminated),                             
		.almost_full_valid  (),                                                                      // (terminated),                             
		.almost_full_data   (),                                                                      // (terminated),                             
		.almost_empty_valid (),                                                                      // (terminated),                             
		.almost_empty_data  ()                                                                       // (terminated),                             
	);

	top_hw_altera_avalon_dc_fifo_191_7gx45aq #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (409),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (5),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3),
		.SYNC_RESET         (0)
	) async_fifo_003 (
		.in_clk             (emif_0_emif_usr_clk_clk),                                                    //   input,    width = 1,        in_clk.clk
		.in_reset_n         (~emif_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset),            //   input,    width = 1,  in_clk_reset.reset_n
		.out_clk            (DUT_coreclkout_hip_clk),                                                     //   input,    width = 1,       out_clk.clk
		.out_reset_n        (~onchip_memory2_0_reset2_reset_bridge_in_reset_reset),                       //   input,    width = 1, out_clk_reset.reset_n
		.in_data            (emif_0_ctrl_amm_0_to_dut_dma_rd_master_rsp_width_adapter_src_data),          //   input,  width = 409,            in.data
		.in_valid           (emif_0_ctrl_amm_0_to_dut_dma_rd_master_rsp_width_adapter_src_valid),         //   input,    width = 1,              .valid
		.in_ready           (emif_0_ctrl_amm_0_to_dut_dma_rd_master_rsp_width_adapter_src_ready),         //  output,    width = 1,              .ready
		.in_startofpacket   (emif_0_ctrl_amm_0_to_dut_dma_rd_master_rsp_width_adapter_src_startofpacket), //   input,    width = 1,              .startofpacket
		.in_endofpacket     (emif_0_ctrl_amm_0_to_dut_dma_rd_master_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,              .endofpacket
		.in_channel         (emif_0_ctrl_amm_0_to_dut_dma_rd_master_rsp_width_adapter_src_channel),       //   input,    width = 5,              .channel
		.out_data           (async_fifo_003_out_data),                                                    //  output,  width = 409,           out.data
		.out_valid          (async_fifo_003_out_valid),                                                   //  output,    width = 1,              .valid
		.out_ready          (async_fifo_003_out_ready),                                                   //   input,    width = 1,              .ready
		.out_startofpacket  (async_fifo_003_out_startofpacket),                                           //  output,    width = 1,              .startofpacket
		.out_endofpacket    (async_fifo_003_out_endofpacket),                                             //  output,    width = 1,              .endofpacket
		.out_channel        (async_fifo_003_out_channel),                                                 //  output,    width = 5,              .channel
		.in_csr_address     (1'b0),                                                                       // (terminated),                             
		.in_csr_read        (1'b0),                                                                       // (terminated),                             
		.in_csr_write       (1'b0),                                                                       // (terminated),                             
		.in_csr_readdata    (),                                                                           // (terminated),                             
		.in_csr_writedata   (32'b00000000000000000000000000000000),                                       // (terminated),                             
		.out_csr_address    (1'b0),                                                                       // (terminated),                             
		.out_csr_read       (1'b0),                                                                       // (terminated),                             
		.out_csr_write      (1'b0),                                                                       // (terminated),                             
		.out_csr_readdata   (),                                                                           // (terminated),                             
		.out_csr_writedata  (32'b00000000000000000000000000000000),                                       // (terminated),                             
		.in_empty           (1'b0),                                                                       // (terminated),                             
		.out_empty          (),                                                                           // (terminated),                             
		.in_error           (1'b0),                                                                       // (terminated),                             
		.out_error          (),                                                                           // (terminated),                             
		.space_avail_data   (),                                                                           // (terminated),                             
		.almost_full_valid  (),                                                                           // (terminated),                             
		.almost_full_data   (),                                                                           // (terminated),                             
		.almost_empty_valid (),                                                                           // (terminated),                             
		.almost_empty_data  ()                                                                            // (terminated),                             
	);

	top_hw_altera_avalon_dc_fifo_191_7gx45aq #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (409),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (5),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3),
		.SYNC_RESET         (0)
	) async_fifo_004 (
		.in_clk             (emif_0_emif_usr_clk_clk),                                                    //   input,    width = 1,        in_clk.clk
		.in_reset_n         (~emif_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset),            //   input,    width = 1,  in_clk_reset.reset_n
		.out_clk            (DUT_coreclkout_hip_clk),                                                     //   input,    width = 1,       out_clk.clk
		.out_reset_n        (~onchip_memory2_0_reset2_reset_bridge_in_reset_reset),                       //   input,    width = 1, out_clk_reset.reset_n
		.in_data            (emif_0_ctrl_amm_0_to_dut_dma_wr_master_rsp_width_adapter_src_data),          //   input,  width = 409,            in.data
		.in_valid           (emif_0_ctrl_amm_0_to_dut_dma_wr_master_rsp_width_adapter_src_valid),         //   input,    width = 1,              .valid
		.in_ready           (emif_0_ctrl_amm_0_to_dut_dma_wr_master_rsp_width_adapter_src_ready),         //  output,    width = 1,              .ready
		.in_startofpacket   (emif_0_ctrl_amm_0_to_dut_dma_wr_master_rsp_width_adapter_src_startofpacket), //   input,    width = 1,              .startofpacket
		.in_endofpacket     (emif_0_ctrl_amm_0_to_dut_dma_wr_master_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,              .endofpacket
		.in_channel         (emif_0_ctrl_amm_0_to_dut_dma_wr_master_rsp_width_adapter_src_channel),       //   input,    width = 5,              .channel
		.out_data           (async_fifo_004_out_data),                                                    //  output,  width = 409,           out.data
		.out_valid          (async_fifo_004_out_valid),                                                   //  output,    width = 1,              .valid
		.out_ready          (async_fifo_004_out_ready),                                                   //   input,    width = 1,              .ready
		.out_startofpacket  (async_fifo_004_out_startofpacket),                                           //  output,    width = 1,              .startofpacket
		.out_endofpacket    (async_fifo_004_out_endofpacket),                                             //  output,    width = 1,              .endofpacket
		.out_channel        (async_fifo_004_out_channel),                                                 //  output,    width = 5,              .channel
		.in_csr_address     (1'b0),                                                                       // (terminated),                             
		.in_csr_read        (1'b0),                                                                       // (terminated),                             
		.in_csr_write       (1'b0),                                                                       // (terminated),                             
		.in_csr_readdata    (),                                                                           // (terminated),                             
		.in_csr_writedata   (32'b00000000000000000000000000000000),                                       // (terminated),                             
		.out_csr_address    (1'b0),                                                                       // (terminated),                             
		.out_csr_read       (1'b0),                                                                       // (terminated),                             
		.out_csr_write      (1'b0),                                                                       // (terminated),                             
		.out_csr_readdata   (),                                                                           // (terminated),                             
		.out_csr_writedata  (32'b00000000000000000000000000000000),                                       // (terminated),                             
		.in_empty           (1'b0),                                                                       // (terminated),                             
		.out_empty          (),                                                                           // (terminated),                             
		.in_error           (1'b0),                                                                       // (terminated),                             
		.out_error          (),                                                                           // (terminated),                             
		.space_avail_data   (),                                                                           // (terminated),                             
		.almost_full_valid  (),                                                                           // (terminated),                             
		.almost_full_data   (),                                                                           // (terminated),                             
		.almost_empty_valid (),                                                                           // (terminated),                             
		.almost_empty_data  ()                                                                            // (terminated),                             
	);

	top_hw_altera_avalon_dc_fifo_191_7gx45aq #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (157),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (5),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3),
		.SYNC_RESET         (0)
	) async_fifo_005 (
		.in_clk             (emif_0_emif_usr_clk_clk),                                               //   input,    width = 1,        in_clk.clk
		.in_reset_n         (~emif_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1,  in_clk_reset.reset_n
		.out_clk            (DUT_coreclkout_hip_clk),                                                //   input,    width = 1,       out_clk.clk
		.out_reset_n        (~onchip_memory2_0_reset2_reset_bridge_in_reset_reset),                  //   input,    width = 1, out_clk_reset.reset_n
		.in_data            (emif_0_ctrl_amm_0_to_dut_rxm_bar2_rsp_width_adapter_src_data),          //   input,  width = 157,            in.data
		.in_valid           (emif_0_ctrl_amm_0_to_dut_rxm_bar2_rsp_width_adapter_src_valid),         //   input,    width = 1,              .valid
		.in_ready           (emif_0_ctrl_amm_0_to_dut_rxm_bar2_rsp_width_adapter_src_ready),         //  output,    width = 1,              .ready
		.in_startofpacket   (emif_0_ctrl_amm_0_to_dut_rxm_bar2_rsp_width_adapter_src_startofpacket), //   input,    width = 1,              .startofpacket
		.in_endofpacket     (emif_0_ctrl_amm_0_to_dut_rxm_bar2_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,              .endofpacket
		.in_channel         (emif_0_ctrl_amm_0_to_dut_rxm_bar2_rsp_width_adapter_src_channel),       //   input,    width = 5,              .channel
		.out_data           (async_fifo_005_out_data),                                               //  output,  width = 157,           out.data
		.out_valid          (async_fifo_005_out_valid),                                              //  output,    width = 1,              .valid
		.out_ready          (async_fifo_005_out_ready),                                              //   input,    width = 1,              .ready
		.out_startofpacket  (async_fifo_005_out_startofpacket),                                      //  output,    width = 1,              .startofpacket
		.out_endofpacket    (async_fifo_005_out_endofpacket),                                        //  output,    width = 1,              .endofpacket
		.out_channel        (async_fifo_005_out_channel),                                            //  output,    width = 5,              .channel
		.in_csr_address     (1'b0),                                                                  // (terminated),                             
		.in_csr_read        (1'b0),                                                                  // (terminated),                             
		.in_csr_write       (1'b0),                                                                  // (terminated),                             
		.in_csr_readdata    (),                                                                      // (terminated),                             
		.in_csr_writedata   (32'b00000000000000000000000000000000),                                  // (terminated),                             
		.out_csr_address    (1'b0),                                                                  // (terminated),                             
		.out_csr_read       (1'b0),                                                                  // (terminated),                             
		.out_csr_write      (1'b0),                                                                  // (terminated),                             
		.out_csr_readdata   (),                                                                      // (terminated),                             
		.out_csr_writedata  (32'b00000000000000000000000000000000),                                  // (terminated),                             
		.in_empty           (1'b0),                                                                  // (terminated),                             
		.out_empty          (),                                                                      // (terminated),                             
		.in_error           (1'b0),                                                                  // (terminated),                             
		.out_error          (),                                                                      // (terminated),                             
		.space_avail_data   (),                                                                      // (terminated),                             
		.almost_full_valid  (),                                                                      // (terminated),                             
		.almost_full_data   (),                                                                      // (terminated),                             
		.almost_empty_valid (),                                                                      // (terminated),                             
		.almost_empty_data  ()                                                                       // (terminated),                             
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (409),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) limiter_pipeline (
		.clk               (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       cr0.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (dut_dma_wr_master_limiter_cmd_src_ready),             //  output,    width = 1,     sink0.ready
		.in_valid          (dut_dma_wr_master_limiter_cmd_src_valid),             //   input,    width = 1,          .valid
		.in_startofpacket  (dut_dma_wr_master_limiter_cmd_src_startofpacket),     //   input,    width = 1,          .startofpacket
		.in_endofpacket    (dut_dma_wr_master_limiter_cmd_src_endofpacket),       //   input,    width = 1,          .endofpacket
		.in_data           (dut_dma_wr_master_limiter_cmd_src_data),              //   input,  width = 409,          .data
		.in_channel        (dut_dma_wr_master_limiter_cmd_src_channel),           //   input,    width = 5,          .channel
		.out_ready         (limiter_pipeline_source0_ready),                      //   input,    width = 1,   source0.ready
		.out_valid         (limiter_pipeline_source0_valid),                      //  output,    width = 1,          .valid
		.out_startofpacket (limiter_pipeline_source0_startofpacket),              //  output,    width = 1,          .startofpacket
		.out_endofpacket   (limiter_pipeline_source0_endofpacket),                //  output,    width = 1,          .endofpacket
		.out_data          (limiter_pipeline_source0_data),                       //  output,  width = 409,          .data
		.out_channel       (limiter_pipeline_source0_channel),                    //  output,    width = 5,          .channel
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_error          (1'b0)                                                 // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (409),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) limiter_pipeline_001 (
		.clk               (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       cr0.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_mux_001_src_ready),                               //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_mux_001_src_valid),                               //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_mux_001_src_startofpacket),                       //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_mux_001_src_endofpacket),                         //   input,    width = 1,          .endofpacket
		.in_data           (rsp_mux_001_src_data),                                //   input,  width = 409,          .data
		.in_channel        (rsp_mux_001_src_channel),                             //   input,    width = 5,          .channel
		.out_ready         (limiter_pipeline_001_source0_ready),                  //   input,    width = 1,   source0.ready
		.out_valid         (limiter_pipeline_001_source0_valid),                  //  output,    width = 1,          .valid
		.out_startofpacket (limiter_pipeline_001_source0_startofpacket),          //  output,    width = 1,          .startofpacket
		.out_endofpacket   (limiter_pipeline_001_source0_endofpacket),            //  output,    width = 1,          .endofpacket
		.out_data          (limiter_pipeline_001_source0_data),                   //  output,  width = 409,          .data
		.out_channel       (limiter_pipeline_001_source0_channel),                //  output,    width = 5,          .channel
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_error          (1'b0)                                                 // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (157),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) limiter_pipeline_002 (
		.clk               (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       cr0.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (dut_rxm_bar2_limiter_cmd_src_ready),                  //  output,    width = 1,     sink0.ready
		.in_valid          (dut_rxm_bar2_limiter_cmd_src_valid),                  //   input,    width = 1,          .valid
		.in_startofpacket  (dut_rxm_bar2_limiter_cmd_src_startofpacket),          //   input,    width = 1,          .startofpacket
		.in_endofpacket    (dut_rxm_bar2_limiter_cmd_src_endofpacket),            //   input,    width = 1,          .endofpacket
		.in_data           (dut_rxm_bar2_limiter_cmd_src_data),                   //   input,  width = 157,          .data
		.in_channel        (dut_rxm_bar2_limiter_cmd_src_channel),                //   input,    width = 5,          .channel
		.out_ready         (limiter_pipeline_002_source0_ready),                  //   input,    width = 1,   source0.ready
		.out_valid         (limiter_pipeline_002_source0_valid),                  //  output,    width = 1,          .valid
		.out_startofpacket (limiter_pipeline_002_source0_startofpacket),          //  output,    width = 1,          .startofpacket
		.out_endofpacket   (limiter_pipeline_002_source0_endofpacket),            //  output,    width = 1,          .endofpacket
		.out_data          (limiter_pipeline_002_source0_data),                   //  output,  width = 157,          .data
		.out_channel       (limiter_pipeline_002_source0_channel),                //  output,    width = 5,          .channel
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_error          (1'b0)                                                 // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (157),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) limiter_pipeline_003 (
		.clk               (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       cr0.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_mux_002_src_ready),                               //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_mux_002_src_valid),                               //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_mux_002_src_startofpacket),                       //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_mux_002_src_endofpacket),                         //   input,    width = 1,          .endofpacket
		.in_data           (rsp_mux_002_src_data),                                //   input,  width = 157,          .data
		.in_channel        (rsp_mux_002_src_channel),                             //   input,    width = 5,          .channel
		.out_ready         (limiter_pipeline_003_source0_ready),                  //   input,    width = 1,   source0.ready
		.out_valid         (limiter_pipeline_003_source0_valid),                  //  output,    width = 1,          .valid
		.out_startofpacket (limiter_pipeline_003_source0_startofpacket),          //  output,    width = 1,          .startofpacket
		.out_endofpacket   (limiter_pipeline_003_source0_endofpacket),            //  output,    width = 1,          .endofpacket
		.out_data          (limiter_pipeline_003_source0_data),                   //  output,  width = 157,          .data
		.out_channel       (limiter_pipeline_003_source0_channel),                //  output,    width = 5,          .channel
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_error          (1'b0)                                                 // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (697),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline (
		.clk               (emif_0_emif_usr_clk_clk),                                        //   input,    width = 1,       cr0.clk
		.reset             (emif_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_mux_src_ready),                                              //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_mux_src_valid),                                              //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_mux_src_startofpacket),                                      //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_mux_src_endofpacket),                                        //   input,    width = 1,          .endofpacket
		.in_data           (cmd_mux_src_data),                                               //   input,  width = 697,          .data
		.in_channel        (cmd_mux_src_channel),                                            //   input,    width = 5,          .channel
		.out_ready         (agent_pipeline_source0_ready),                                   //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                                   //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),                           //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),                             //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_source0_data),                                    //  output,  width = 697,          .data
		.out_channel       (agent_pipeline_source0_channel),                                 //  output,    width = 5,          .channel
		.in_empty          (1'b0),                                                           // (terminated),                         
		.out_empty         (),                                                               // (terminated),                         
		.out_error         (),                                                               // (terminated),                         
		.in_error          (1'b0)                                                            // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (697),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_001 (
		.clk               (emif_0_emif_usr_clk_clk),                                        //   input,    width = 1,       cr0.clk
		.reset             (emif_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (emif_0_ctrl_amm_0_agent_rp_ready),                               //  output,    width = 1,     sink0.ready
		.in_valid          (emif_0_ctrl_amm_0_agent_rp_valid),                               //   input,    width = 1,          .valid
		.in_startofpacket  (emif_0_ctrl_amm_0_agent_rp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.in_endofpacket    (emif_0_ctrl_amm_0_agent_rp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.in_data           (emif_0_ctrl_amm_0_agent_rp_data),                                //   input,  width = 697,          .data
		.out_ready         (agent_pipeline_001_source0_ready),                               //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                               //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),                       //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),                         //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                                //  output,  width = 697,          .data
		.in_empty          (1'b0),                                                           // (terminated),                         
		.out_empty         (),                                                               // (terminated),                         
		.out_error         (),                                                               // (terminated),                         
		.in_error          (1'b0),                                                           // (terminated),                         
		.out_channel       (),                                                               // (terminated),                         
		.in_channel        (1'b0)                                                            // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (409),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_002 (
		.clk               (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       cr0.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_mux_001_src_ready),                               //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_mux_001_src_valid),                               //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_mux_001_src_startofpacket),                       //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_mux_001_src_endofpacket),                         //   input,    width = 1,          .endofpacket
		.in_data           (cmd_mux_001_src_data),                                //   input,  width = 409,          .data
		.in_channel        (cmd_mux_001_src_channel),                             //   input,    width = 5,          .channel
		.out_ready         (agent_pipeline_002_source0_ready),                    //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_002_source0_valid),                    //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_002_source0_startofpacket),            //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_002_source0_endofpacket),              //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_002_source0_data),                     //  output,  width = 409,          .data
		.out_channel       (agent_pipeline_002_source0_channel),                  //  output,    width = 5,          .channel
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_error          (1'b0)                                                 // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (409),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_003 (
		.clk               (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       cr0.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (dut_rd_dts_slave_agent_rp_ready),                     //  output,    width = 1,     sink0.ready
		.in_valid          (dut_rd_dts_slave_agent_rp_valid),                     //   input,    width = 1,          .valid
		.in_startofpacket  (dut_rd_dts_slave_agent_rp_startofpacket),             //   input,    width = 1,          .startofpacket
		.in_endofpacket    (dut_rd_dts_slave_agent_rp_endofpacket),               //   input,    width = 1,          .endofpacket
		.in_data           (dut_rd_dts_slave_agent_rp_data),                      //   input,  width = 409,          .data
		.out_ready         (agent_pipeline_003_source0_ready),                    //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_003_source0_valid),                    //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_003_source0_startofpacket),            //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_003_source0_endofpacket),              //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_003_source0_data),                     //  output,  width = 409,          .data
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_error          (1'b0),                                                // (terminated),                         
		.out_channel       (),                                                    // (terminated),                         
		.in_channel        (1'b0)                                                 // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (409),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_004 (
		.clk               (DUT_coreclkout_hip_clk),                                  //   input,    width = 1,       cr0.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset),     //   input,    width = 1, cr0_reset.reset
		.in_ready          (onchip_memory2_0_s2_burst_adapter_source0_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (onchip_memory2_0_s2_burst_adapter_source0_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (onchip_memory2_0_s2_burst_adapter_source0_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s2_burst_adapter_source0_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (onchip_memory2_0_s2_burst_adapter_source0_data),          //   input,  width = 409,          .data
		.in_channel        (onchip_memory2_0_s2_burst_adapter_source0_channel),       //   input,    width = 5,          .channel
		.out_ready         (agent_pipeline_004_source0_ready),                        //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_004_source0_valid),                        //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_004_source0_startofpacket),                //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_004_source0_endofpacket),                  //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_004_source0_data),                         //  output,  width = 409,          .data
		.out_channel       (agent_pipeline_004_source0_channel),                      //  output,    width = 5,          .channel
		.in_empty          (1'b0),                                                    // (terminated),                         
		.out_empty         (),                                                        // (terminated),                         
		.out_error         (),                                                        // (terminated),                         
		.in_error          (1'b0)                                                     // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (409),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_005 (
		.clk               (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       cr0.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (onchip_memory2_0_s2_agent_rp_ready),                  //  output,    width = 1,     sink0.ready
		.in_valid          (onchip_memory2_0_s2_agent_rp_valid),                  //   input,    width = 1,          .valid
		.in_startofpacket  (onchip_memory2_0_s2_agent_rp_startofpacket),          //   input,    width = 1,          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s2_agent_rp_endofpacket),            //   input,    width = 1,          .endofpacket
		.in_data           (onchip_memory2_0_s2_agent_rp_data),                   //   input,  width = 409,          .data
		.out_ready         (agent_pipeline_005_source0_ready),                    //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_005_source0_valid),                    //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_005_source0_startofpacket),            //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_005_source0_endofpacket),              //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_005_source0_data),                     //  output,  width = 409,          .data
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_error          (1'b0),                                                // (terminated),                         
		.out_channel       (),                                                    // (terminated),                         
		.in_channel        (1'b0)                                                 // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (409),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_006 (
		.clk               (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       cr0.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_mux_003_src_ready),                               //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_mux_003_src_valid),                               //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_mux_003_src_startofpacket),                       //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_mux_003_src_endofpacket),                         //   input,    width = 1,          .endofpacket
		.in_data           (cmd_mux_003_src_data),                                //   input,  width = 409,          .data
		.in_channel        (cmd_mux_003_src_channel),                             //   input,    width = 5,          .channel
		.out_ready         (agent_pipeline_006_source0_ready),                    //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_006_source0_valid),                    //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_006_source0_startofpacket),            //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_006_source0_endofpacket),              //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_006_source0_data),                     //  output,  width = 409,          .data
		.out_channel       (agent_pipeline_006_source0_channel),                  //  output,    width = 5,          .channel
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_error          (1'b0)                                                 // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (409),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_007 (
		.clk               (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       cr0.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (dut_wr_dts_slave_agent_rp_ready),                     //  output,    width = 1,     sink0.ready
		.in_valid          (dut_wr_dts_slave_agent_rp_valid),                     //   input,    width = 1,          .valid
		.in_startofpacket  (dut_wr_dts_slave_agent_rp_startofpacket),             //   input,    width = 1,          .startofpacket
		.in_endofpacket    (dut_wr_dts_slave_agent_rp_endofpacket),               //   input,    width = 1,          .endofpacket
		.in_data           (dut_wr_dts_slave_agent_rp_data),                      //   input,  width = 409,          .data
		.out_ready         (agent_pipeline_007_source0_ready),                    //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_007_source0_valid),                    //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_007_source0_startofpacket),            //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_007_source0_endofpacket),              //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_007_source0_data),                     //  output,  width = 409,          .data
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_error          (1'b0),                                                // (terminated),                         
		.out_channel       (),                                                    // (terminated),                         
		.in_channel        (1'b0)                                                 // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (409),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_008 (
		.clk               (DUT_coreclkout_hip_clk),                                  //   input,    width = 1,       cr0.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset),     //   input,    width = 1, cr0_reset.reset
		.in_ready          (onchip_memory2_0_s1_burst_adapter_source0_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (onchip_memory2_0_s1_burst_adapter_source0_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (onchip_memory2_0_s1_burst_adapter_source0_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_burst_adapter_source0_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (onchip_memory2_0_s1_burst_adapter_source0_data),          //   input,  width = 409,          .data
		.in_channel        (onchip_memory2_0_s1_burst_adapter_source0_channel),       //   input,    width = 5,          .channel
		.out_ready         (agent_pipeline_008_source0_ready),                        //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_008_source0_valid),                        //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_008_source0_startofpacket),                //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_008_source0_endofpacket),                  //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_008_source0_data),                         //  output,  width = 409,          .data
		.out_channel       (agent_pipeline_008_source0_channel),                      //  output,    width = 5,          .channel
		.in_empty          (1'b0),                                                    // (terminated),                         
		.out_empty         (),                                                        // (terminated),                         
		.out_error         (),                                                        // (terminated),                         
		.in_error          (1'b0)                                                     // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (409),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_009 (
		.clk               (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       cr0.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (onchip_memory2_0_s1_agent_rp_ready),                  //  output,    width = 1,     sink0.ready
		.in_valid          (onchip_memory2_0_s1_agent_rp_valid),                  //   input,    width = 1,          .valid
		.in_startofpacket  (onchip_memory2_0_s1_agent_rp_startofpacket),          //   input,    width = 1,          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rp_endofpacket),            //   input,    width = 1,          .endofpacket
		.in_data           (onchip_memory2_0_s1_agent_rp_data),                   //   input,  width = 409,          .data
		.out_ready         (agent_pipeline_009_source0_ready),                    //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_009_source0_valid),                    //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_009_source0_startofpacket),            //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_009_source0_endofpacket),              //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_009_source0_data),                     //  output,  width = 409,          .data
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_error          (1'b0),                                                // (terminated),                         
		.out_channel       (),                                                    // (terminated),                         
		.in_channel        (1'b0)                                                 // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (697),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline (
		.clk               (emif_0_emif_usr_clk_clk),                                        //   input,    width = 1,       cr0.clk
		.reset             (emif_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (async_fifo_out_ready),                                           //  output,    width = 1,     sink0.ready
		.in_valid          (async_fifo_out_valid),                                           //   input,    width = 1,          .valid
		.in_startofpacket  (async_fifo_out_startofpacket),                                   //   input,    width = 1,          .startofpacket
		.in_endofpacket    (async_fifo_out_endofpacket),                                     //   input,    width = 1,          .endofpacket
		.in_data           (async_fifo_out_data),                                            //   input,  width = 697,          .data
		.in_channel        (async_fifo_out_channel),                                         //   input,    width = 5,          .channel
		.out_ready         (mux_pipeline_source0_ready),                                     //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_source0_valid),                                     //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),                               //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_source0_data),                                      //  output,  width = 697,          .data
		.out_channel       (mux_pipeline_source0_channel),                                   //  output,    width = 5,          .channel
		.in_empty          (1'b0),                                                           // (terminated),                         
		.out_empty         (),                                                               // (terminated),                         
		.out_error         (),                                                               // (terminated),                         
		.in_error          (1'b0)                                                            // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (697),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_001 (
		.clk               (emif_0_emif_usr_clk_clk),                                        //   input,    width = 1,       cr0.clk
		.reset             (emif_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (async_fifo_001_out_ready),                                       //  output,    width = 1,     sink0.ready
		.in_valid          (async_fifo_001_out_valid),                                       //   input,    width = 1,          .valid
		.in_startofpacket  (async_fifo_001_out_startofpacket),                               //   input,    width = 1,          .startofpacket
		.in_endofpacket    (async_fifo_001_out_endofpacket),                                 //   input,    width = 1,          .endofpacket
		.in_data           (async_fifo_001_out_data),                                        //   input,  width = 697,          .data
		.in_channel        (async_fifo_001_out_channel),                                     //   input,    width = 5,          .channel
		.out_ready         (mux_pipeline_001_source0_ready),                                 //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),                                 //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),                         //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),                           //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),                                  //  output,  width = 697,          .data
		.out_channel       (mux_pipeline_001_source0_channel),                               //  output,    width = 5,          .channel
		.in_empty          (1'b0),                                                           // (terminated),                         
		.out_empty         (),                                                               // (terminated),                         
		.out_error         (),                                                               // (terminated),                         
		.in_error          (1'b0)                                                            // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (697),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_002 (
		.clk               (emif_0_emif_usr_clk_clk),                                        //   input,    width = 1,       cr0.clk
		.reset             (emif_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (async_fifo_002_out_ready),                                       //  output,    width = 1,     sink0.ready
		.in_valid          (async_fifo_002_out_valid),                                       //   input,    width = 1,          .valid
		.in_startofpacket  (async_fifo_002_out_startofpacket),                               //   input,    width = 1,          .startofpacket
		.in_endofpacket    (async_fifo_002_out_endofpacket),                                 //   input,    width = 1,          .endofpacket
		.in_data           (async_fifo_002_out_data),                                        //   input,  width = 697,          .data
		.in_channel        (async_fifo_002_out_channel),                                     //   input,    width = 5,          .channel
		.out_ready         (mux_pipeline_002_source0_ready),                                 //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_002_source0_valid),                                 //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_002_source0_startofpacket),                         //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_002_source0_endofpacket),                           //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_002_source0_data),                                  //  output,  width = 697,          .data
		.out_channel       (mux_pipeline_002_source0_channel),                               //  output,    width = 5,          .channel
		.in_empty          (1'b0),                                                           // (terminated),                         
		.out_empty         (),                                                               // (terminated),                         
		.out_error         (),                                                               // (terminated),                         
		.in_error          (1'b0)                                                            // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (409),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_003 (
		.clk               (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       cr0.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_src1_ready),                                //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_src1_valid),                                //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                        //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                          //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_src1_data),                                 //   input,  width = 409,          .data
		.in_channel        (cmd_demux_src1_channel),                              //   input,    width = 5,          .channel
		.out_ready         (mux_pipeline_003_source0_ready),                      //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_003_source0_valid),                      //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_003_source0_startofpacket),              //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_003_source0_endofpacket),                //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_003_source0_data),                       //  output,  width = 409,          .data
		.out_channel       (mux_pipeline_003_source0_channel),                    //  output,    width = 5,          .channel
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_error          (1'b0)                                                 // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (409),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_004 (
		.clk               (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       cr0.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_src2_ready),                                //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_src2_valid),                                //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),                        //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),                          //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_src2_data),                                 //   input,  width = 409,          .data
		.in_channel        (cmd_demux_src2_channel),                              //   input,    width = 5,          .channel
		.out_ready         (mux_pipeline_004_source0_ready),                      //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_004_source0_valid),                      //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_004_source0_startofpacket),              //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_004_source0_endofpacket),                //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_004_source0_data),                       //  output,  width = 409,          .data
		.out_channel       (mux_pipeline_004_source0_channel),                    //  output,    width = 5,          .channel
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_error          (1'b0)                                                 // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (409),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_005 (
		.clk               (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       cr0.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_src3_ready),                                //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_src3_valid),                                //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),                        //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),                          //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_src3_data),                                 //   input,  width = 409,          .data
		.in_channel        (cmd_demux_src3_channel),                              //   input,    width = 5,          .channel
		.out_ready         (mux_pipeline_005_source0_ready),                      //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_005_source0_valid),                      //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_005_source0_startofpacket),              //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_005_source0_endofpacket),                //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_005_source0_data),                       //  output,  width = 409,          .data
		.out_channel       (mux_pipeline_005_source0_channel),                    //  output,    width = 5,          .channel
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_error          (1'b0)                                                 // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (409),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_006 (
		.clk               (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       cr0.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_001_src1_ready),                            //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_001_src1_valid),                            //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),                    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),                      //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_001_src1_data),                             //   input,  width = 409,          .data
		.in_channel        (cmd_demux_001_src1_channel),                          //   input,    width = 5,          .channel
		.out_ready         (mux_pipeline_006_source0_ready),                      //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_006_source0_valid),                      //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_006_source0_startofpacket),              //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_006_source0_endofpacket),                //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_006_source0_data),                       //  output,  width = 409,          .data
		.out_channel       (mux_pipeline_006_source0_channel),                    //  output,    width = 5,          .channel
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_error          (1'b0)                                                 // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (409),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_007 (
		.clk               (DUT_coreclkout_hip_clk),                                                  //   input,    width = 1,       cr0.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset),                     //   input,    width = 1, cr0_reset.reset
		.in_ready          (dut_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (dut_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (dut_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (dut_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (dut_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter_src_data),          //   input,  width = 409,          .data
		.in_channel        (dut_rxm_bar2_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel),       //   input,    width = 5,          .channel
		.out_ready         (mux_pipeline_007_source0_ready),                                          //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_007_source0_valid),                                          //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_007_source0_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_007_source0_endofpacket),                                    //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_007_source0_data),                                           //  output,  width = 409,          .data
		.out_channel       (mux_pipeline_007_source0_channel),                                        //  output,    width = 5,          .channel
		.in_empty          (1'b0),                                                                    // (terminated),                         
		.out_empty         (),                                                                        // (terminated),                         
		.out_error         (),                                                                        // (terminated),                         
		.in_error          (1'b0)                                                                     // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (409),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_008 (
		.clk               (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       cr0.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (async_fifo_003_out_ready),                            //  output,    width = 1,     sink0.ready
		.in_valid          (async_fifo_003_out_valid),                            //   input,    width = 1,          .valid
		.in_startofpacket  (async_fifo_003_out_startofpacket),                    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (async_fifo_003_out_endofpacket),                      //   input,    width = 1,          .endofpacket
		.in_data           (async_fifo_003_out_data),                             //   input,  width = 409,          .data
		.in_channel        (async_fifo_003_out_channel),                          //   input,    width = 5,          .channel
		.out_ready         (mux_pipeline_008_source0_ready),                      //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_008_source0_valid),                      //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_008_source0_startofpacket),              //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_008_source0_endofpacket),                //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_008_source0_data),                       //  output,  width = 409,          .data
		.out_channel       (mux_pipeline_008_source0_channel),                    //  output,    width = 5,          .channel
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_error          (1'b0)                                                 // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (409),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_009 (
		.clk               (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       cr0.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                            //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_001_src0_valid),                            //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                      //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_001_src0_data),                             //   input,  width = 409,          .data
		.in_channel        (rsp_demux_001_src0_channel),                          //   input,    width = 5,          .channel
		.out_ready         (mux_pipeline_009_source0_ready),                      //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_009_source0_valid),                      //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_009_source0_startofpacket),              //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_009_source0_endofpacket),                //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_009_source0_data),                       //  output,  width = 409,          .data
		.out_channel       (mux_pipeline_009_source0_channel),                    //  output,    width = 5,          .channel
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_error          (1'b0)                                                 // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (409),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_010 (
		.clk               (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       cr0.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                            //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_002_src0_valid),                            //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),                    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                      //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_002_src0_data),                             //   input,  width = 409,          .data
		.in_channel        (rsp_demux_002_src0_channel),                          //   input,    width = 5,          .channel
		.out_ready         (mux_pipeline_010_source0_ready),                      //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_010_source0_valid),                      //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_010_source0_startofpacket),              //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_010_source0_endofpacket),                //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_010_source0_data),                       //  output,  width = 409,          .data
		.out_channel       (mux_pipeline_010_source0_channel),                    //  output,    width = 5,          .channel
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_error          (1'b0)                                                 // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (409),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_011 (
		.clk               (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       cr0.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                            //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_003_src0_valid),                            //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),                    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),                      //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_003_src0_data),                             //   input,  width = 409,          .data
		.in_channel        (rsp_demux_003_src0_channel),                          //   input,    width = 5,          .channel
		.out_ready         (mux_pipeline_011_source0_ready),                      //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_011_source0_valid),                      //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_011_source0_startofpacket),              //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_011_source0_endofpacket),                //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_011_source0_data),                       //  output,  width = 409,          .data
		.out_channel       (mux_pipeline_011_source0_channel),                    //  output,    width = 5,          .channel
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_error          (1'b0)                                                 // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (409),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_012 (
		.clk               (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       cr0.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (async_fifo_004_out_ready),                            //  output,    width = 1,     sink0.ready
		.in_valid          (async_fifo_004_out_valid),                            //   input,    width = 1,          .valid
		.in_startofpacket  (async_fifo_004_out_startofpacket),                    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (async_fifo_004_out_endofpacket),                      //   input,    width = 1,          .endofpacket
		.in_data           (async_fifo_004_out_data),                             //   input,  width = 409,          .data
		.in_channel        (async_fifo_004_out_channel),                          //   input,    width = 5,          .channel
		.out_ready         (mux_pipeline_012_source0_ready),                      //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_012_source0_valid),                      //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_012_source0_startofpacket),              //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_012_source0_endofpacket),                //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_012_source0_data),                       //  output,  width = 409,          .data
		.out_channel       (mux_pipeline_012_source0_channel),                    //  output,    width = 5,          .channel
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_error          (1'b0)                                                 // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (409),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_013 (
		.clk               (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       cr0.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                            //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_004_src0_valid),                            //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),                    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),                      //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_004_src0_data),                             //   input,  width = 409,          .data
		.in_channel        (rsp_demux_004_src0_channel),                          //   input,    width = 5,          .channel
		.out_ready         (mux_pipeline_013_source0_ready),                      //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_013_source0_valid),                      //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_013_source0_startofpacket),              //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_013_source0_endofpacket),                //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_013_source0_data),                       //  output,  width = 409,          .data
		.out_channel       (mux_pipeline_013_source0_channel),                    //  output,    width = 5,          .channel
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_error          (1'b0)                                                 // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (157),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_014 (
		.clk               (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       cr0.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (async_fifo_005_out_ready),                            //  output,    width = 1,     sink0.ready
		.in_valid          (async_fifo_005_out_valid),                            //   input,    width = 1,          .valid
		.in_startofpacket  (async_fifo_005_out_startofpacket),                    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (async_fifo_005_out_endofpacket),                      //   input,    width = 1,          .endofpacket
		.in_data           (async_fifo_005_out_data),                             //   input,  width = 157,          .data
		.in_channel        (async_fifo_005_out_channel),                          //   input,    width = 5,          .channel
		.out_ready         (mux_pipeline_014_source0_ready),                      //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_014_source0_valid),                      //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_014_source0_startofpacket),              //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_014_source0_endofpacket),                //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_014_source0_data),                       //  output,  width = 157,          .data
		.out_channel       (mux_pipeline_014_source0_channel),                    //  output,    width = 5,          .channel
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_error          (1'b0)                                                 // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (157),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_015 (
		.clk               (DUT_coreclkout_hip_clk),                                                  //   input,    width = 1,       cr0.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset),                     //   input,    width = 1, cr0_reset.reset
		.in_ready          (onchip_memory2_0_s1_to_dut_rxm_bar2_rsp_width_adapter_src_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (onchip_memory2_0_s1_to_dut_rxm_bar2_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (onchip_memory2_0_s1_to_dut_rxm_bar2_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_to_dut_rxm_bar2_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (onchip_memory2_0_s1_to_dut_rxm_bar2_rsp_width_adapter_src_data),          //   input,  width = 157,          .data
		.in_channel        (onchip_memory2_0_s1_to_dut_rxm_bar2_rsp_width_adapter_src_channel),       //   input,    width = 5,          .channel
		.out_ready         (mux_pipeline_015_source0_ready),                                          //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_015_source0_valid),                                          //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_015_source0_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_015_source0_endofpacket),                                    //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_015_source0_data),                                           //  output,  width = 157,          .data
		.out_channel       (mux_pipeline_015_source0_channel),                                        //  output,    width = 5,          .channel
		.in_empty          (1'b0),                                                                    // (terminated),                         
		.out_empty         (),                                                                        // (terminated),                         
		.out_error         (),                                                                        // (terminated),                         
		.in_error          (1'b0)                                                                     // (terminated),                         
	);

endmodule
